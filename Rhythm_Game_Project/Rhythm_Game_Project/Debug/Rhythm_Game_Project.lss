
Rhythm_Game_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000864  00800100  00001490  00001524  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001490  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000855  00800964  00800964  00001d88  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001d88  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001db8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00001df8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d83  00000000  00000000  00001f70  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aed  00000000  00000000  00003cf3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000139c  00000000  00000000  000047e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000350  00000000  00000000  00005b7c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009b9  00000000  00000000  00005ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ebe  00000000  00000000  00006885  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00007743  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	5d c0       	rjmp	.+186    	; 0xbc <__ctors_end>
       2:	00 00       	nop
       4:	79 c0       	rjmp	.+242    	; 0xf8 <__bad_interrupt>
       6:	00 00       	nop
       8:	77 c0       	rjmp	.+238    	; 0xf8 <__bad_interrupt>
       a:	00 00       	nop
       c:	75 c0       	rjmp	.+234    	; 0xf8 <__bad_interrupt>
       e:	00 00       	nop
      10:	73 c0       	rjmp	.+230    	; 0xf8 <__bad_interrupt>
      12:	00 00       	nop
      14:	71 c0       	rjmp	.+226    	; 0xf8 <__bad_interrupt>
      16:	00 00       	nop
      18:	6f c0       	rjmp	.+222    	; 0xf8 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	6d c0       	rjmp	.+218    	; 0xf8 <__bad_interrupt>
      1e:	00 00       	nop
      20:	6b c0       	rjmp	.+214    	; 0xf8 <__bad_interrupt>
      22:	00 00       	nop
      24:	69 c0       	rjmp	.+210    	; 0xf8 <__bad_interrupt>
      26:	00 00       	nop
      28:	67 c0       	rjmp	.+206    	; 0xf8 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	65 c0       	rjmp	.+202    	; 0xf8 <__bad_interrupt>
      2e:	00 00       	nop
      30:	63 c0       	rjmp	.+198    	; 0xf8 <__bad_interrupt>
      32:	00 00       	nop
      34:	9f c4       	rjmp	.+2366   	; 0x974 <__vector_13>
      36:	00 00       	nop
      38:	5f c0       	rjmp	.+190    	; 0xf8 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	5d c0       	rjmp	.+186    	; 0xf8 <__bad_interrupt>
      3e:	00 00       	nop
      40:	5b c0       	rjmp	.+182    	; 0xf8 <__bad_interrupt>
      42:	00 00       	nop
      44:	59 c0       	rjmp	.+178    	; 0xf8 <__bad_interrupt>
      46:	00 00       	nop
      48:	57 c0       	rjmp	.+174    	; 0xf8 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	55 c0       	rjmp	.+170    	; 0xf8 <__bad_interrupt>
      4e:	00 00       	nop
      50:	53 c0       	rjmp	.+166    	; 0xf8 <__bad_interrupt>
      52:	00 00       	nop
      54:	51 c0       	rjmp	.+162    	; 0xf8 <__bad_interrupt>
      56:	00 00       	nop
      58:	4f c0       	rjmp	.+158    	; 0xf8 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	4d c0       	rjmp	.+154    	; 0xf8 <__bad_interrupt>
      5e:	00 00       	nop
      60:	4b c0       	rjmp	.+150    	; 0xf8 <__bad_interrupt>
      62:	00 00       	nop
      64:	49 c0       	rjmp	.+146    	; 0xf8 <__bad_interrupt>
      66:	00 00       	nop
      68:	47 c0       	rjmp	.+142    	; 0xf8 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	45 c0       	rjmp	.+138    	; 0xf8 <__bad_interrupt>
      6e:	00 00       	nop
      70:	43 c0       	rjmp	.+134    	; 0xf8 <__bad_interrupt>
      72:	00 00       	nop
      74:	41 c0       	rjmp	.+130    	; 0xf8 <__bad_interrupt>
      76:	00 00       	nop
      78:	3f c0       	rjmp	.+126    	; 0xf8 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	3d c0       	rjmp	.+122    	; 0xf8 <__bad_interrupt>
      7e:	00 00       	nop
      80:	3b c0       	rjmp	.+118    	; 0xf8 <__bad_interrupt>
      82:	00 00       	nop
      84:	39 c0       	rjmp	.+114    	; 0xf8 <__bad_interrupt>
      86:	00 00       	nop
      88:	37 c0       	rjmp	.+110    	; 0xf8 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	23 03       	mulsu	r18, r19
      8e:	eb 01       	movw	r28, r22
      90:	04 02       	muls	r16, r20
      92:	16 02       	muls	r17, r22
      94:	62 02       	muls	r22, r18
      96:	74 02       	muls	r23, r20
      98:	86 02       	muls	r24, r22
      9a:	aa 02       	muls	r26, r26
      9c:	bb 02       	muls	r27, r27
      9e:	c9 02       	muls	r28, r25
      a0:	d3 02       	muls	r29, r19
      a2:	f7 02       	muls	r31, r23
      a4:	08 03       	fmul	r16, r16
      a6:	23 03       	mulsu	r18, r19
      a8:	42 04       	cpc	r4, r2
      aa:	29 03       	fmul	r18, r17
      ac:	42 04       	cpc	r4, r2
      ae:	42 04       	cpc	r4, r2
      b0:	4b 03       	fmul	r20, r19
      b2:	42 04       	cpc	r4, r2
      b4:	93 03       	fmuls	r17, r19
      b6:	a8 03       	fmulsu	r18, r16
      b8:	e3 03       	fmuls	r22, r19
      ba:	ec 03       	fmulsu	r22, r20

000000bc <__ctors_end>:
      bc:	11 24       	eor	r1, r1
      be:	1f be       	out	0x3f, r1	; 63
      c0:	cf ef       	ldi	r28, 0xFF	; 255
      c2:	d0 e4       	ldi	r29, 0x40	; 64
      c4:	de bf       	out	0x3e, r29	; 62
      c6:	cd bf       	out	0x3d, r28	; 61

000000c8 <__do_copy_data>:
      c8:	19 e0       	ldi	r17, 0x09	; 9
      ca:	a0 e0       	ldi	r26, 0x00	; 0
      cc:	b1 e0       	ldi	r27, 0x01	; 1
      ce:	e0 e9       	ldi	r30, 0x90	; 144
      d0:	f4 e1       	ldi	r31, 0x14	; 20
      d2:	00 e0       	ldi	r16, 0x00	; 0
      d4:	0b bf       	out	0x3b, r16	; 59
      d6:	02 c0       	rjmp	.+4      	; 0xdc <__do_copy_data+0x14>
      d8:	07 90       	elpm	r0, Z+
      da:	0d 92       	st	X+, r0
      dc:	a4 36       	cpi	r26, 0x64	; 100
      de:	b1 07       	cpc	r27, r17
      e0:	d9 f7       	brne	.-10     	; 0xd8 <__do_copy_data+0x10>

000000e2 <__do_clear_bss>:
      e2:	21 e1       	ldi	r18, 0x11	; 17
      e4:	a4 e6       	ldi	r26, 0x64	; 100
      e6:	b9 e0       	ldi	r27, 0x09	; 9
      e8:	01 c0       	rjmp	.+2      	; 0xec <.do_clear_bss_start>

000000ea <.do_clear_bss_loop>:
      ea:	1d 92       	st	X+, r1

000000ec <.do_clear_bss_start>:
      ec:	a9 3b       	cpi	r26, 0xB9	; 185
      ee:	b2 07       	cpc	r27, r18
      f0:	e1 f7       	brne	.-8      	; 0xea <.do_clear_bss_loop>
      f2:	2c d7       	rcall	.+3672   	; 0xf4c <main>
      f4:	0c 94 46 0a 	jmp	0x148c	; 0x148c <_exit>

000000f8 <__bad_interrupt>:
      f8:	83 cf       	rjmp	.-250    	; 0x0 <__vectors>

000000fa <Left_Tick>:
unsigned char Set_Bit(unsigned char output, unsigned char in){
    return (output | (1 << in));   
}
unsigned char Clear_Bit(unsigned char output, unsigned char in){
    return (output & ~(1 << in));
} 
      fa:	82 30       	cpi	r24, 0x02	; 2
      fc:	91 05       	cpc	r25, r1
      fe:	18 f0       	brcs	.+6      	; 0x106 <Left_Tick+0xc>
     100:	81 30       	cpi	r24, 0x01	; 1
     102:	91 05       	cpc	r25, r1
     104:	61 f4       	brne	.+24     	; 0x11e <Left_Tick+0x24>
     106:	03 99       	sbic	0x00, 3	; 0
     108:	06 c0       	rjmp	.+12     	; 0x116 <Left_Tick+0x1c>
     10a:	81 e0       	ldi	r24, 0x01	; 1
     10c:	80 93 83 09 	sts	0x0983, r24	; 0x800983 <LEFT>
     110:	81 e0       	ldi	r24, 0x01	; 1
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	08 95       	ret
     116:	10 92 83 09 	sts	0x0983, r1	; 0x800983 <LEFT>
     11a:	81 e0       	ldi	r24, 0x01	; 1
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	08 95       	ret

00000120 <Right_Tick>:
     120:	82 30       	cpi	r24, 0x02	; 2
     122:	91 05       	cpc	r25, r1
     124:	18 f0       	brcs	.+6      	; 0x12c <Right_Tick+0xc>
     126:	81 30       	cpi	r24, 0x01	; 1
     128:	91 05       	cpc	r25, r1
     12a:	61 f4       	brne	.+24     	; 0x144 <Right_Tick+0x24>
     12c:	00 99       	sbic	0x00, 0	; 0
     12e:	06 c0       	rjmp	.+12     	; 0x13c <Right_Tick+0x1c>
     130:	81 e0       	ldi	r24, 0x01	; 1
     132:	80 93 82 09 	sts	0x0982, r24	; 0x800982 <RIGHT>
     136:	81 e0       	ldi	r24, 0x01	; 1
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	08 95       	ret
     13c:	10 92 82 09 	sts	0x0982, r1	; 0x800982 <RIGHT>
     140:	81 e0       	ldi	r24, 0x01	; 1
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	08 95       	ret

00000146 <Up_Tick>:
     146:	82 30       	cpi	r24, 0x02	; 2
     148:	91 05       	cpc	r25, r1
     14a:	18 f0       	brcs	.+6      	; 0x152 <Up_Tick+0xc>
     14c:	81 30       	cpi	r24, 0x01	; 1
     14e:	91 05       	cpc	r25, r1
     150:	61 f4       	brne	.+24     	; 0x16a <Up_Tick+0x24>
     152:	01 99       	sbic	0x00, 1	; 0
     154:	06 c0       	rjmp	.+12     	; 0x162 <Up_Tick+0x1c>
     156:	81 e0       	ldi	r24, 0x01	; 1
     158:	80 93 81 09 	sts	0x0981, r24	; 0x800981 <UP>
     15c:	81 e0       	ldi	r24, 0x01	; 1
     15e:	90 e0       	ldi	r25, 0x00	; 0
     160:	08 95       	ret
     162:	10 92 81 09 	sts	0x0981, r1	; 0x800981 <UP>
     166:	81 e0       	ldi	r24, 0x01	; 1
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	08 95       	ret

0000016c <Down_Tick>:
     16c:	82 30       	cpi	r24, 0x02	; 2
     16e:	91 05       	cpc	r25, r1
     170:	18 f0       	brcs	.+6      	; 0x178 <Down_Tick+0xc>
     172:	81 30       	cpi	r24, 0x01	; 1
     174:	91 05       	cpc	r25, r1
     176:	61 f4       	brne	.+24     	; 0x190 <Down_Tick+0x24>
     178:	02 99       	sbic	0x00, 2	; 0
     17a:	06 c0       	rjmp	.+12     	; 0x188 <Down_Tick+0x1c>
     17c:	81 e0       	ldi	r24, 0x01	; 1
     17e:	80 93 80 09 	sts	0x0980, r24	; 0x800980 <DOWN>
     182:	81 e0       	ldi	r24, 0x01	; 1
     184:	90 e0       	ldi	r25, 0x00	; 0
     186:	08 95       	ret
     188:	10 92 80 09 	sts	0x0980, r1	; 0x800980 <DOWN>
     18c:	81 e0       	ldi	r24, 0x01	; 1
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	08 95       	ret

00000192 <Player_Tick>:
     192:	82 30       	cpi	r24, 0x02	; 2
     194:	91 05       	cpc	r25, r1
     196:	20 f0       	brcs	.+8      	; 0x1a0 <Player_Tick+0xe>
     198:	81 30       	cpi	r24, 0x01	; 1
     19a:	91 05       	cpc	r25, r1
     19c:	09 f0       	breq	.+2      	; 0x1a0 <Player_Tick+0xe>
     19e:	4d c0       	rjmp	.+154    	; 0x23a <Player_Tick+0xa8>
     1a0:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <LEFT>
     1a4:	88 23       	and	r24, r24
     1a6:	91 f0       	breq	.+36     	; 0x1cc <Player_Tick+0x3a>
     1a8:	80 91 82 09 	lds	r24, 0x0982	; 0x800982 <RIGHT>
     1ac:	81 11       	cpse	r24, r1
     1ae:	38 c0       	rjmp	.+112    	; 0x220 <Player_Tick+0x8e>
     1b0:	80 91 81 09 	lds	r24, 0x0981	; 0x800981 <UP>
     1b4:	81 11       	cpse	r24, r1
     1b6:	34 c0       	rjmp	.+104    	; 0x220 <Player_Tick+0x8e>
     1b8:	80 91 80 09 	lds	r24, 0x0980	; 0x800980 <DOWN>
     1bc:	81 11       	cpse	r24, r1
     1be:	30 c0       	rjmp	.+96     	; 0x220 <Player_Tick+0x8e>
     1c0:	88 e0       	ldi	r24, 0x08	; 8
     1c2:	80 93 7d 09 	sts	0x097D, r24	; 0x80097d <player_button_press>
     1c6:	81 e0       	ldi	r24, 0x01	; 1
     1c8:	90 e0       	ldi	r25, 0x00	; 0
     1ca:	08 95       	ret
     1cc:	80 91 82 09 	lds	r24, 0x0982	; 0x800982 <RIGHT>
     1d0:	81 11       	cpse	r24, r1
     1d2:	30 c0       	rjmp	.+96     	; 0x234 <Player_Tick+0xa2>
     1d4:	80 91 81 09 	lds	r24, 0x0981	; 0x800981 <UP>
     1d8:	81 11       	cpse	r24, r1
     1da:	27 c0       	rjmp	.+78     	; 0x22a <Player_Tick+0x98>
     1dc:	80 91 80 09 	lds	r24, 0x0980	; 0x800980 <DOWN>
     1e0:	88 23       	and	r24, r24
     1e2:	19 f1       	breq	.+70     	; 0x22a <Player_Tick+0x98>
     1e4:	84 e0       	ldi	r24, 0x04	; 4
     1e6:	80 93 7d 09 	sts	0x097D, r24	; 0x80097d <player_button_press>
     1ea:	81 e0       	ldi	r24, 0x01	; 1
     1ec:	90 e0       	ldi	r25, 0x00	; 0
     1ee:	08 95       	ret
     1f0:	80 91 80 09 	lds	r24, 0x0980	; 0x800980 <DOWN>
     1f4:	81 11       	cpse	r24, r1
     1f6:	14 c0       	rjmp	.+40     	; 0x220 <Player_Tick+0x8e>
     1f8:	82 e0       	ldi	r24, 0x02	; 2
     1fa:	80 93 7d 09 	sts	0x097D, r24	; 0x80097d <player_button_press>
     1fe:	81 e0       	ldi	r24, 0x01	; 1
     200:	90 e0       	ldi	r25, 0x00	; 0
     202:	08 95       	ret
     204:	80 91 81 09 	lds	r24, 0x0981	; 0x800981 <UP>
     208:	81 11       	cpse	r24, r1
     20a:	0a c0       	rjmp	.+20     	; 0x220 <Player_Tick+0x8e>
     20c:	80 91 80 09 	lds	r24, 0x0980	; 0x800980 <DOWN>
     210:	81 11       	cpse	r24, r1
     212:	06 c0       	rjmp	.+12     	; 0x220 <Player_Tick+0x8e>
     214:	81 e0       	ldi	r24, 0x01	; 1
     216:	80 93 7d 09 	sts	0x097D, r24	; 0x80097d <player_button_press>
     21a:	81 e0       	ldi	r24, 0x01	; 1
     21c:	90 e0       	ldi	r25, 0x00	; 0
     21e:	08 95       	ret
     220:	10 92 7d 09 	sts	0x097D, r1	; 0x80097d <player_button_press>
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	08 95       	ret
     22a:	80 91 81 09 	lds	r24, 0x0981	; 0x800981 <UP>
     22e:	81 11       	cpse	r24, r1
     230:	df cf       	rjmp	.-66     	; 0x1f0 <Player_Tick+0x5e>
     232:	f6 cf       	rjmp	.-20     	; 0x220 <Player_Tick+0x8e>
     234:	81 11       	cpse	r24, r1
     236:	e6 cf       	rjmp	.-52     	; 0x204 <Player_Tick+0x72>
     238:	f3 cf       	rjmp	.-26     	; 0x220 <Player_Tick+0x8e>
     23a:	08 95       	ret

0000023c <delay_ms>:
     23c:	18 16       	cp	r1, r24
     23e:	19 06       	cpc	r1, r25
     240:	5c f0       	brlt	.+22     	; 0x258 <delay_ms+0x1c>
     242:	08 95       	ret
     244:	00 00       	nop
     246:	21 50       	subi	r18, 0x01	; 1
     248:	31 09       	sbc	r19, r1
     24a:	e1 f7       	brne	.-8      	; 0x244 <delay_ms+0x8>
     24c:	4f 5f       	subi	r20, 0xFF	; 255
     24e:	5f 4f       	sbci	r21, 0xFF	; 255
     250:	84 17       	cp	r24, r20
     252:	95 07       	cpc	r25, r21
     254:	19 f4       	brne	.+6      	; 0x25c <delay_ms+0x20>
     256:	08 95       	ret
     258:	40 e0       	ldi	r20, 0x00	; 0
     25a:	50 e0       	ldi	r21, 0x00	; 0
     25c:	27 e0       	ldi	r18, 0x07	; 7
     25e:	33 e0       	ldi	r19, 0x03	; 3
     260:	f1 cf       	rjmp	.-30     	; 0x244 <delay_ms+0x8>

00000262 <LCD_WriteCommand>:
     262:	28 98       	cbi	0x05, 0	; 5
     264:	8b b9       	out	0x0b, r24	; 11
     266:	29 9a       	sbi	0x05, 1	; 5
     268:	00 00       	nop
     26a:	29 98       	cbi	0x05, 1	; 5
     26c:	82 e0       	ldi	r24, 0x02	; 2
     26e:	90 e0       	ldi	r25, 0x00	; 0
     270:	e5 cf       	rjmp	.-54     	; 0x23c <delay_ms>
     272:	08 95       	ret

00000274 <LCD_ClearScreen>:
     274:	81 e0       	ldi	r24, 0x01	; 1
     276:	f5 cf       	rjmp	.-22     	; 0x262 <LCD_WriteCommand>
     278:	08 95       	ret

0000027a <LCD_Cursor>:
     27a:	81 31       	cpi	r24, 0x11	; 17
     27c:	18 f4       	brcc	.+6      	; 0x284 <LCD_Cursor+0xa>
     27e:	81 58       	subi	r24, 0x81	; 129
     280:	f0 cf       	rjmp	.-32     	; 0x262 <LCD_WriteCommand>
     282:	08 95       	ret
     284:	81 55       	subi	r24, 0x51	; 81
     286:	ed cf       	rjmp	.-38     	; 0x262 <LCD_WriteCommand>
     288:	08 95       	ret

0000028a <LCD_WriteData>:
     28a:	28 9a       	sbi	0x05, 0	; 5
     28c:	8b b9       	out	0x0b, r24	; 11
     28e:	29 9a       	sbi	0x05, 1	; 5
     290:	00 00       	nop
     292:	29 98       	cbi	0x05, 1	; 5
     294:	81 e0       	ldi	r24, 0x01	; 1
     296:	90 e0       	ldi	r25, 0x00	; 0
     298:	d1 cf       	rjmp	.-94     	; 0x23c <delay_ms>
     29a:	08 95       	ret

0000029c <LCD_DisplayString>:
     29c:	0f 93       	push	r16
     29e:	1f 93       	push	r17
     2a0:	cf 93       	push	r28
     2a2:	df 93       	push	r29
     2a4:	18 2f       	mov	r17, r24
     2a6:	eb 01       	movw	r28, r22
     2a8:	e5 df       	rcall	.-54     	; 0x274 <LCD_ClearScreen>
     2aa:	88 81       	ld	r24, Y
     2ac:	88 23       	and	r24, r24
     2ae:	51 f0       	breq	.+20     	; 0x2c4 <LCD_DisplayString+0x28>
     2b0:	01 e0       	ldi	r16, 0x01	; 1
     2b2:	01 0f       	add	r16, r17
     2b4:	81 2f       	mov	r24, r17
     2b6:	e1 df       	rcall	.-62     	; 0x27a <LCD_Cursor>
     2b8:	89 91       	ld	r24, Y+
     2ba:	e7 df       	rcall	.-50     	; 0x28a <LCD_WriteData>
     2bc:	10 2f       	mov	r17, r16
     2be:	88 81       	ld	r24, Y
     2c0:	81 11       	cpse	r24, r1
     2c2:	f6 cf       	rjmp	.-20     	; 0x2b0 <LCD_DisplayString+0x14>
     2c4:	df 91       	pop	r29
     2c6:	cf 91       	pop	r28
     2c8:	1f 91       	pop	r17
     2ca:	0f 91       	pop	r16
     2cc:	08 95       	ret

000002ce <LCD_Write_Single_Line>:
     2ce:	1f 93       	push	r17
     2d0:	cf 93       	push	r28
     2d2:	df 93       	push	r29
     2d4:	62 30       	cpi	r22, 0x02	; 2
     2d6:	71 05       	cpc	r23, r1
     2d8:	09 f4       	brne	.+2      	; 0x2dc <LCD_Write_Single_Line+0xe>
     2da:	80 5f       	subi	r24, 0xF0	; 240
     2dc:	fa 01       	movw	r30, r20
     2de:	90 81       	ld	r25, Z
     2e0:	99 23       	and	r25, r25
     2e2:	51 f0       	breq	.+20     	; 0x2f8 <LCD_Write_Single_Line+0x2a>
     2e4:	ea 01       	movw	r28, r20
     2e6:	11 e0       	ldi	r17, 0x01	; 1
     2e8:	18 0f       	add	r17, r24
     2ea:	c7 df       	rcall	.-114    	; 0x27a <LCD_Cursor>
     2ec:	89 91       	ld	r24, Y+
     2ee:	cd df       	rcall	.-102    	; 0x28a <LCD_WriteData>
     2f0:	81 2f       	mov	r24, r17
     2f2:	98 81       	ld	r25, Y
     2f4:	91 11       	cpse	r25, r1
     2f6:	f7 cf       	rjmp	.-18     	; 0x2e6 <LCD_Write_Single_Line+0x18>
     2f8:	df 91       	pop	r29
     2fa:	cf 91       	pop	r28
     2fc:	1f 91       	pop	r17
     2fe:	08 95       	ret

00000300 <LCD_Custom_Character>:
     300:	0f 93       	push	r16
     302:	1f 93       	push	r17
     304:	cf 93       	push	r28
     306:	df 93       	push	r29
     308:	8b 01       	movw	r16, r22
     30a:	88 30       	cpi	r24, 0x08	; 8
     30c:	68 f4       	brcc	.+26     	; 0x328 <LCD_Custom_Character+0x28>
     30e:	88 0f       	add	r24, r24
     310:	88 0f       	add	r24, r24
     312:	88 0f       	add	r24, r24
     314:	80 5c       	subi	r24, 0xC0	; 192
     316:	a5 df       	rcall	.-182    	; 0x262 <LCD_WriteCommand>
     318:	e8 01       	movw	r28, r16
     31a:	08 5f       	subi	r16, 0xF8	; 248
     31c:	1f 4f       	sbci	r17, 0xFF	; 255
     31e:	89 91       	ld	r24, Y+
     320:	b4 df       	rcall	.-152    	; 0x28a <LCD_WriteData>
     322:	c0 17       	cp	r28, r16
     324:	d1 07       	cpc	r29, r17
     326:	d9 f7       	brne	.-10     	; 0x31e <LCD_Custom_Character+0x1e>
     328:	80 e8       	ldi	r24, 0x80	; 128
     32a:	9b df       	rcall	.-202    	; 0x262 <LCD_WriteCommand>
     32c:	df 91       	pop	r29
     32e:	cf 91       	pop	r28
     330:	1f 91       	pop	r17
     332:	0f 91       	pop	r16
     334:	08 95       	ret

00000336 <LCD_init>:
     336:	84 e6       	ldi	r24, 0x64	; 100
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	80 df       	rcall	.-256    	; 0x23c <delay_ms>
     33c:	88 e3       	ldi	r24, 0x38	; 56
     33e:	91 df       	rcall	.-222    	; 0x262 <LCD_WriteCommand>
     340:	86 e0       	ldi	r24, 0x06	; 6
     342:	8f df       	rcall	.-226    	; 0x262 <LCD_WriteCommand>
     344:	8f e0       	ldi	r24, 0x0F	; 15
     346:	8d df       	rcall	.-230    	; 0x262 <LCD_WriteCommand>
     348:	81 e0       	ldi	r24, 0x01	; 1
     34a:	8b df       	rcall	.-234    	; 0x262 <LCD_WriteCommand>
     34c:	8a e0       	ldi	r24, 0x0A	; 10
     34e:	90 e0       	ldi	r25, 0x00	; 0
     350:	75 df       	rcall	.-278    	; 0x23c <delay_ms>
     352:	64 e0       	ldi	r22, 0x04	; 4
     354:	79 e0       	ldi	r23, 0x09	; 9
     356:	80 e0       	ldi	r24, 0x00	; 0
     358:	d3 df       	rcall	.-90     	; 0x300 <LCD_Custom_Character>
     35a:	6c ef       	ldi	r22, 0xFC	; 252
     35c:	78 e0       	ldi	r23, 0x08	; 8
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	cf df       	rcall	.-98     	; 0x300 <LCD_Custom_Character>
     362:	64 ef       	ldi	r22, 0xF4	; 244
     364:	78 e0       	ldi	r23, 0x08	; 8
     366:	82 e0       	ldi	r24, 0x02	; 2
     368:	cb df       	rcall	.-106    	; 0x300 <LCD_Custom_Character>
     36a:	6c ee       	ldi	r22, 0xEC	; 236
     36c:	78 e0       	ldi	r23, 0x08	; 8
     36e:	84 e0       	ldi	r24, 0x04	; 4
     370:	c7 df       	rcall	.-114    	; 0x300 <LCD_Custom_Character>
     372:	64 ee       	ldi	r22, 0xE4	; 228
     374:	78 e0       	ldi	r23, 0x08	; 8
     376:	85 e0       	ldi	r24, 0x05	; 5
     378:	c3 df       	rcall	.-122    	; 0x300 <LCD_Custom_Character>
     37a:	6c ed       	ldi	r22, 0xDC	; 220
     37c:	78 e0       	ldi	r23, 0x08	; 8
     37e:	86 e0       	ldi	r24, 0x06	; 6
     380:	bf cf       	rjmp	.-130    	; 0x300 <LCD_Custom_Character>
     382:	08 95       	ret

00000384 <LCD_Game_Menu>:
     384:	8c e0       	ldi	r24, 0x0C	; 12
     386:	6d df       	rcall	.-294    	; 0x262 <LCD_WriteCommand>
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	77 df       	rcall	.-274    	; 0x27a <LCD_Cursor>
     38c:	85 e0       	ldi	r24, 0x05	; 5
     38e:	7d df       	rcall	.-262    	; 0x28a <LCD_WriteData>
     390:	86 e0       	ldi	r24, 0x06	; 6
     392:	73 df       	rcall	.-282    	; 0x27a <LCD_Cursor>
     394:	81 e0       	ldi	r24, 0x01	; 1
     396:	79 df       	rcall	.-270    	; 0x28a <LCD_WriteData>
     398:	82 e0       	ldi	r24, 0x02	; 2
     39a:	77 df       	rcall	.-274    	; 0x28a <LCD_WriteData>
     39c:	84 e0       	ldi	r24, 0x04	; 4
     39e:	75 df       	rcall	.-278    	; 0x28a <LCD_WriteData>
     3a0:	80 e0       	ldi	r24, 0x00	; 0
     3a2:	73 df       	rcall	.-282    	; 0x28a <LCD_WriteData>
     3a4:	80 e1       	ldi	r24, 0x10	; 16
     3a6:	69 df       	rcall	.-302    	; 0x27a <LCD_Cursor>
     3a8:	85 e0       	ldi	r24, 0x05	; 5
     3aa:	6f df       	rcall	.-290    	; 0x28a <LCD_WriteData>
     3ac:	4c e0       	ldi	r20, 0x0C	; 12
     3ae:	59 e0       	ldi	r21, 0x09	; 9
     3b0:	62 e0       	ldi	r22, 0x02	; 2
     3b2:	70 e0       	ldi	r23, 0x00	; 0
     3b4:	81 e0       	ldi	r24, 0x01	; 1
     3b6:	8b df       	rcall	.-234    	; 0x2ce <LCD_Write_Single_Line>
     3b8:	87 e1       	ldi	r24, 0x17	; 23
     3ba:	5f df       	rcall	.-322    	; 0x27a <LCD_Cursor>
     3bc:	86 e0       	ldi	r24, 0x06	; 6
     3be:	65 cf       	rjmp	.-310    	; 0x28a <LCD_WriteData>
     3c0:	08 95       	ret

000003c2 <LCD_Menu_Tick>:
     3c2:	cf 93       	push	r28
     3c4:	8d 30       	cpi	r24, 0x0D	; 13
     3c6:	91 05       	cpc	r25, r1
     3c8:	08 f0       	brcs	.+2      	; 0x3cc <LCD_Menu_Tick+0xa>
     3ca:	34 c1       	rjmp	.+616    	; 0x634 <__LOCK_REGION_LENGTH__+0x234>
     3cc:	fc 01       	movw	r30, r24
     3ce:	ea 5b       	subi	r30, 0xBA	; 186
     3d0:	ff 4f       	sbci	r31, 0xFF	; 255
     3d2:	0c 94 23 0a 	jmp	0x1446	; 0x1446 <__tablejump2__>
     3d6:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <LEFT>
     3da:	88 23       	and	r24, r24
     3dc:	09 f4       	brne	.+2      	; 0x3e0 <LCD_Menu_Tick+0x1e>
     3de:	33 c1       	rjmp	.+614    	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
     3e0:	80 91 82 09 	lds	r24, 0x0982	; 0x800982 <RIGHT>
     3e4:	88 23       	and	r24, r24
     3e6:	09 f4       	brne	.+2      	; 0x3ea <LCD_Menu_Tick+0x28>
     3e8:	2e c1       	rjmp	.+604    	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
     3ea:	80 91 80 09 	lds	r24, 0x0980	; 0x800980 <DOWN>
     3ee:	88 23       	and	r24, r24
     3f0:	09 f4       	brne	.+2      	; 0x3f4 <LCD_Menu_Tick+0x32>
     3f2:	29 c1       	rjmp	.+594    	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
     3f4:	80 91 81 09 	lds	r24, 0x0981	; 0x800981 <UP>
     3f8:	88 23       	and	r24, r24
     3fa:	09 f4       	brne	.+2      	; 0x3fe <LCD_Menu_Tick+0x3c>
     3fc:	24 c1       	rjmp	.+584    	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
     3fe:	10 92 7e 09 	sts	0x097E, r1	; 0x80097e <current_song_choice>
     402:	82 e0       	ldi	r24, 0x02	; 2
     404:	90 e0       	ldi	r25, 0x00	; 0
     406:	3e c2       	rjmp	.+1148   	; 0x884 <__LOCK_REGION_LENGTH__+0x484>
     408:	20 91 83 09 	lds	r18, 0x0983	; 0x800983 <LEFT>
     40c:	21 11       	cpse	r18, r1
     40e:	3a c2       	rjmp	.+1140   	; 0x884 <__LOCK_REGION_LENGTH__+0x484>
     410:	20 91 82 09 	lds	r18, 0x0982	; 0x800982 <RIGHT>
     414:	21 11       	cpse	r18, r1
     416:	36 c2       	rjmp	.+1132   	; 0x884 <__LOCK_REGION_LENGTH__+0x484>
     418:	20 91 81 09 	lds	r18, 0x0981	; 0x800981 <UP>
     41c:	21 11       	cpse	r18, r1
     41e:	32 c2       	rjmp	.+1124   	; 0x884 <__LOCK_REGION_LENGTH__+0x484>
     420:	20 91 80 09 	lds	r18, 0x0980	; 0x800980 <DOWN>
     424:	21 11       	cpse	r18, r1
     426:	2e c2       	rjmp	.+1116   	; 0x884 <__LOCK_REGION_LENGTH__+0x484>
     428:	25 df       	rcall	.-438    	; 0x274 <LCD_ClearScreen>
     42a:	13 c1       	rjmp	.+550    	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
     42c:	20 91 83 09 	lds	r18, 0x0983	; 0x800983 <LEFT>
     430:	22 23       	and	r18, r18
     432:	71 f0       	breq	.+28     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     434:	30 91 82 09 	lds	r19, 0x0982	; 0x800982 <RIGHT>
     438:	31 11       	cpse	r19, r1
     43a:	0a c0       	rjmp	.+20     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     43c:	30 91 81 09 	lds	r19, 0x0981	; 0x800981 <UP>
     440:	31 11       	cpse	r19, r1
     442:	06 c0       	rjmp	.+12     	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
     444:	20 91 80 09 	lds	r18, 0x0980	; 0x800980 <DOWN>
     448:	21 11       	cpse	r18, r1
     44a:	f4 c0       	rjmp	.+488    	; 0x634 <__LOCK_REGION_LENGTH__+0x234>
     44c:	13 df       	rcall	.-474    	; 0x274 <LCD_ClearScreen>
     44e:	fb c0       	rjmp	.+502    	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
     450:	80 91 80 09 	lds	r24, 0x0980	; 0x800980 <DOWN>
     454:	88 23       	and	r24, r24
     456:	b1 f0       	breq	.+44     	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
     458:	80 91 81 09 	lds	r24, 0x0981	; 0x800981 <UP>
     45c:	81 11       	cpse	r24, r1
     45e:	f9 c0       	rjmp	.+498    	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
     460:	21 11       	cpse	r18, r1
     462:	f7 c0       	rjmp	.+494    	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
     464:	80 91 82 09 	lds	r24, 0x0982	; 0x800982 <RIGHT>
     468:	81 11       	cpse	r24, r1
     46a:	f3 c0       	rjmp	.+486    	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
     46c:	80 91 7e 09 	lds	r24, 0x097E	; 0x80097e <current_song_choice>
     470:	88 23       	and	r24, r24
     472:	21 f0       	breq	.+8      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     474:	81 e0       	ldi	r24, 0x01	; 1
     476:	80 93 7e 09 	sts	0x097E, r24	; 0x80097e <current_song_choice>
     47a:	ef c0       	rjmp	.+478    	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
     47c:	81 e0       	ldi	r24, 0x01	; 1
     47e:	80 93 7e 09 	sts	0x097E, r24	; 0x80097e <current_song_choice>
     482:	eb c0       	rjmp	.+470    	; 0x65a <__LOCK_REGION_LENGTH__+0x25a>
     484:	80 91 81 09 	lds	r24, 0x0981	; 0x800981 <UP>
     488:	88 23       	and	r24, r24
     48a:	09 f4       	brne	.+2      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
     48c:	f8 c1       	rjmp	.+1008   	; 0x87e <__LOCK_REGION_LENGTH__+0x47e>
     48e:	21 11       	cpse	r18, r1
     490:	e0 c0       	rjmp	.+448    	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
     492:	80 91 82 09 	lds	r24, 0x0982	; 0x800982 <RIGHT>
     496:	81 11       	cpse	r24, r1
     498:	dc c0       	rjmp	.+440    	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
     49a:	80 91 7e 09 	lds	r24, 0x097E	; 0x80097e <current_song_choice>
     49e:	88 23       	and	r24, r24
     4a0:	09 f4       	brne	.+2      	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
     4a2:	e2 c0       	rjmp	.+452    	; 0x668 <__LOCK_REGION_LENGTH__+0x268>
     4a4:	81 50       	subi	r24, 0x01	; 1
     4a6:	80 93 7e 09 	sts	0x097E, r24	; 0x80097e <current_song_choice>
     4aa:	d3 c0       	rjmp	.+422    	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
     4ac:	80 91 82 09 	lds	r24, 0x0982	; 0x800982 <RIGHT>
     4b0:	88 23       	and	r24, r24
     4b2:	09 f4       	brne	.+2      	; 0x4b6 <__LOCK_REGION_LENGTH__+0xb6>
     4b4:	ce c0       	rjmp	.+412    	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
     4b6:	80 91 7e 09 	lds	r24, 0x097E	; 0x80097e <current_song_choice>
     4ba:	88 23       	and	r24, r24
     4bc:	09 f4       	brne	.+2      	; 0x4c0 <__LOCK_REGION_LENGTH__+0xc0>
     4be:	d0 c1       	rjmp	.+928    	; 0x860 <__LOCK_REGION_LENGTH__+0x460>
     4c0:	d9 de       	rcall	.-590    	; 0x274 <LCD_ClearScreen>
     4c2:	c1 c0       	rjmp	.+386    	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
     4c4:	20 91 83 09 	lds	r18, 0x0983	; 0x800983 <LEFT>
     4c8:	21 11       	cpse	r18, r1
     4ca:	dc c1       	rjmp	.+952    	; 0x884 <__LOCK_REGION_LENGTH__+0x484>
     4cc:	20 91 82 09 	lds	r18, 0x0982	; 0x800982 <RIGHT>
     4d0:	21 11       	cpse	r18, r1
     4d2:	d8 c1       	rjmp	.+944    	; 0x884 <__LOCK_REGION_LENGTH__+0x484>
     4d4:	20 91 81 09 	lds	r18, 0x0981	; 0x800981 <UP>
     4d8:	21 11       	cpse	r18, r1
     4da:	d4 c1       	rjmp	.+936    	; 0x884 <__LOCK_REGION_LENGTH__+0x484>
     4dc:	20 91 80 09 	lds	r18, 0x0980	; 0x800980 <DOWN>
     4e0:	21 11       	cpse	r18, r1
     4e2:	d0 c1       	rjmp	.+928    	; 0x884 <__LOCK_REGION_LENGTH__+0x484>
     4e4:	c7 de       	rcall	.-626    	; 0x274 <LCD_ClearScreen>
     4e6:	d7 c0       	rjmp	.+430    	; 0x696 <__LOCK_REGION_LENGTH__+0x296>
     4e8:	20 91 83 09 	lds	r18, 0x0983	; 0x800983 <LEFT>
     4ec:	21 11       	cpse	r18, r1
     4ee:	ca c1       	rjmp	.+916    	; 0x884 <__LOCK_REGION_LENGTH__+0x484>
     4f0:	20 91 82 09 	lds	r18, 0x0982	; 0x800982 <RIGHT>
     4f4:	21 11       	cpse	r18, r1
     4f6:	c6 c1       	rjmp	.+908    	; 0x884 <__LOCK_REGION_LENGTH__+0x484>
     4f8:	20 91 81 09 	lds	r18, 0x0981	; 0x800981 <UP>
     4fc:	21 11       	cpse	r18, r1
     4fe:	c2 c1       	rjmp	.+900    	; 0x884 <__LOCK_REGION_LENGTH__+0x484>
     500:	20 91 80 09 	lds	r18, 0x0980	; 0x800980 <DOWN>
     504:	21 11       	cpse	r18, r1
     506:	be c1       	rjmp	.+892    	; 0x884 <__LOCK_REGION_LENGTH__+0x484>
     508:	b5 de       	rcall	.-662    	; 0x274 <LCD_ClearScreen>
     50a:	a3 c0       	rjmp	.+326    	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
     50c:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <LEFT>
     510:	88 23       	and	r24, r24
     512:	79 f0       	breq	.+30     	; 0x532 <__LOCK_REGION_LENGTH__+0x132>
     514:	80 91 82 09 	lds	r24, 0x0982	; 0x800982 <RIGHT>
     518:	81 11       	cpse	r24, r1
     51a:	bd c0       	rjmp	.+378    	; 0x696 <__LOCK_REGION_LENGTH__+0x296>
     51c:	80 91 81 09 	lds	r24, 0x0981	; 0x800981 <UP>
     520:	81 11       	cpse	r24, r1
     522:	b9 c0       	rjmp	.+370    	; 0x696 <__LOCK_REGION_LENGTH__+0x296>
     524:	80 91 80 09 	lds	r24, 0x0980	; 0x800980 <DOWN>
     528:	81 11       	cpse	r24, r1
     52a:	b5 c0       	rjmp	.+362    	; 0x696 <__LOCK_REGION_LENGTH__+0x296>
     52c:	85 e0       	ldi	r24, 0x05	; 5
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	a9 c1       	rjmp	.+850    	; 0x884 <__LOCK_REGION_LENGTH__+0x484>
     532:	80 91 82 09 	lds	r24, 0x0982	; 0x800982 <RIGHT>
     536:	88 23       	and	r24, r24
     538:	09 f4       	brne	.+2      	; 0x53c <__LOCK_REGION_LENGTH__+0x13c>
     53a:	ad c0       	rjmp	.+346    	; 0x696 <__LOCK_REGION_LENGTH__+0x296>
     53c:	80 91 81 09 	lds	r24, 0x0981	; 0x800981 <UP>
     540:	81 11       	cpse	r24, r1
     542:	a9 c0       	rjmp	.+338    	; 0x696 <__LOCK_REGION_LENGTH__+0x296>
     544:	80 91 80 09 	lds	r24, 0x0980	; 0x800980 <DOWN>
     548:	81 11       	cpse	r24, r1
     54a:	a5 c0       	rjmp	.+330    	; 0x696 <__LOCK_REGION_LENGTH__+0x296>
     54c:	93 de       	rcall	.-730    	; 0x274 <LCD_ClearScreen>
     54e:	87 e0       	ldi	r24, 0x07	; 7
     550:	90 e0       	ldi	r25, 0x00	; 0
     552:	98 c1       	rjmp	.+816    	; 0x884 <__LOCK_REGION_LENGTH__+0x484>
     554:	20 91 83 09 	lds	r18, 0x0983	; 0x800983 <LEFT>
     558:	21 11       	cpse	r18, r1
     55a:	94 c1       	rjmp	.+808    	; 0x884 <__LOCK_REGION_LENGTH__+0x484>
     55c:	20 91 82 09 	lds	r18, 0x0982	; 0x800982 <RIGHT>
     560:	21 11       	cpse	r18, r1
     562:	90 c1       	rjmp	.+800    	; 0x884 <__LOCK_REGION_LENGTH__+0x484>
     564:	20 91 81 09 	lds	r18, 0x0981	; 0x800981 <UP>
     568:	21 11       	cpse	r18, r1
     56a:	8c c1       	rjmp	.+792    	; 0x884 <__LOCK_REGION_LENGTH__+0x484>
     56c:	20 91 80 09 	lds	r18, 0x0980	; 0x800980 <DOWN>
     570:	21 11       	cpse	r18, r1
     572:	88 c1       	rjmp	.+784    	; 0x884 <__LOCK_REGION_LENGTH__+0x484>
     574:	d8 c0       	rjmp	.+432    	; 0x726 <__LOCK_REGION_LENGTH__+0x326>
     576:	80 91 6b 09 	lds	r24, 0x096B	; 0x80096b <count_down.2259>
     57a:	89 31       	cpi	r24, 0x19	; 25
     57c:	20 f4       	brcc	.+8      	; 0x586 <__LOCK_REGION_LENGTH__+0x186>
     57e:	8f 5f       	subi	r24, 0xFF	; 255
     580:	80 93 6b 09 	sts	0x096B, r24	; 0x80096b <count_down.2259>
     584:	d0 c0       	rjmp	.+416    	; 0x726 <__LOCK_REGION_LENGTH__+0x326>
     586:	10 92 6b 09 	sts	0x096B, r1	; 0x80096b <count_down.2259>
     58a:	81 e0       	ldi	r24, 0x01	; 1
     58c:	80 93 70 09 	sts	0x0970, r24	; 0x800970 <playing>
     590:	df c0       	rjmp	.+446    	; 0x750 <__LOCK_REGION_LENGTH__+0x350>
     592:	80 91 72 09 	lds	r24, 0x0972	; 0x800972 <song_finished>
     596:	88 23       	and	r24, r24
     598:	09 f4       	brne	.+2      	; 0x59c <__LOCK_REGION_LENGTH__+0x19c>
     59a:	da c0       	rjmp	.+436    	; 0x750 <__LOCK_REGION_LENGTH__+0x350>
     59c:	80 91 70 09 	lds	r24, 0x0970	; 0x800970 <playing>
     5a0:	81 11       	cpse	r24, r1
     5a2:	d6 c0       	rjmp	.+428    	; 0x750 <__LOCK_REGION_LENGTH__+0x350>
     5a4:	10 c1       	rjmp	.+544    	; 0x7c6 <__LOCK_REGION_LENGTH__+0x3c6>
     5a6:	90 91 7c 09 	lds	r25, 0x097C	; 0x80097c <high_score>
     5aa:	80 91 7b 09 	lds	r24, 0x097B	; 0x80097b <current_score>
     5ae:	98 17       	cp	r25, r24
     5b0:	30 f4       	brcc	.+12     	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
     5b2:	10 92 72 09 	sts	0x0972, r1	; 0x800972 <song_finished>
     5b6:	10 92 71 09 	sts	0x0971, r1	; 0x800971 <score_increase>
     5ba:	5c de       	rcall	.-840    	; 0x274 <LCD_ClearScreen>
     5bc:	0d c1       	rjmp	.+538    	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
     5be:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <LEFT>
     5c2:	81 11       	cpse	r24, r1
     5c4:	0d c0       	rjmp	.+26     	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
     5c6:	80 91 82 09 	lds	r24, 0x0982	; 0x800982 <RIGHT>
     5ca:	81 11       	cpse	r24, r1
     5cc:	09 c0       	rjmp	.+18     	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
     5ce:	80 91 81 09 	lds	r24, 0x0981	; 0x800981 <UP>
     5d2:	81 11       	cpse	r24, r1
     5d4:	05 c0       	rjmp	.+10     	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
     5d6:	80 91 80 09 	lds	r24, 0x0980	; 0x800980 <DOWN>
     5da:	88 23       	and	r24, r24
     5dc:	09 f4       	brne	.+2      	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
     5de:	f3 c0       	rjmp	.+486    	; 0x7c6 <__LOCK_REGION_LENGTH__+0x3c6>
     5e0:	10 92 72 09 	sts	0x0972, r1	; 0x800972 <song_finished>
     5e4:	10 92 71 09 	sts	0x0971, r1	; 0x800971 <score_increase>
     5e8:	8c e0       	ldi	r24, 0x0C	; 12
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	4b c1       	rjmp	.+662    	; 0x884 <__LOCK_REGION_LENGTH__+0x484>
     5ee:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <LEFT>
     5f2:	81 11       	cpse	r24, r1
     5f4:	38 c1       	rjmp	.+624    	; 0x866 <__LOCK_REGION_LENGTH__+0x466>
     5f6:	80 91 82 09 	lds	r24, 0x0982	; 0x800982 <RIGHT>
     5fa:	81 11       	cpse	r24, r1
     5fc:	37 c1       	rjmp	.+622    	; 0x86c <__LOCK_REGION_LENGTH__+0x46c>
     5fe:	80 91 81 09 	lds	r24, 0x0981	; 0x800981 <UP>
     602:	81 11       	cpse	r24, r1
     604:	36 c1       	rjmp	.+620    	; 0x872 <__LOCK_REGION_LENGTH__+0x472>
     606:	80 91 80 09 	lds	r24, 0x0980	; 0x800980 <DOWN>
     60a:	81 11       	cpse	r24, r1
     60c:	35 c1       	rjmp	.+618    	; 0x878 <__LOCK_REGION_LENGTH__+0x478>
     60e:	e4 c0       	rjmp	.+456    	; 0x7d8 <__LOCK_REGION_LENGTH__+0x3d8>
     610:	20 91 83 09 	lds	r18, 0x0983	; 0x800983 <LEFT>
     614:	21 11       	cpse	r18, r1
     616:	36 c1       	rjmp	.+620    	; 0x884 <__LOCK_REGION_LENGTH__+0x484>
     618:	20 91 82 09 	lds	r18, 0x0982	; 0x800982 <RIGHT>
     61c:	21 11       	cpse	r18, r1
     61e:	32 c1       	rjmp	.+612    	; 0x884 <__LOCK_REGION_LENGTH__+0x484>
     620:	20 91 81 09 	lds	r18, 0x0981	; 0x800981 <UP>
     624:	21 11       	cpse	r18, r1
     626:	2e c1       	rjmp	.+604    	; 0x884 <__LOCK_REGION_LENGTH__+0x484>
     628:	20 91 80 09 	lds	r18, 0x0980	; 0x800980 <DOWN>
     62c:	21 11       	cpse	r18, r1
     62e:	2a c1       	rjmp	.+596    	; 0x884 <__LOCK_REGION_LENGTH__+0x484>
     630:	21 de       	rcall	.-958    	; 0x274 <LCD_ClearScreen>
     632:	09 c0       	rjmp	.+18     	; 0x646 <__LOCK_REGION_LENGTH__+0x246>
     634:	fc 01       	movw	r30, r24
     636:	31 97       	sbiw	r30, 0x01	; 1
     638:	eb 30       	cpi	r30, 0x0B	; 11
     63a:	f1 05       	cpc	r31, r1
     63c:	08 f0       	brcs	.+2      	; 0x640 <__LOCK_REGION_LENGTH__+0x240>
     63e:	22 c1       	rjmp	.+580    	; 0x884 <__LOCK_REGION_LENGTH__+0x484>
     640:	ed 5a       	subi	r30, 0xAD	; 173
     642:	ff 4f       	sbci	r31, 0xFF	; 255
     644:	00 c7       	rjmp	.+3584   	; 0x1446 <__tablejump2__>
     646:	10 92 7b 09 	sts	0x097B, r1	; 0x80097b <current_score>
     64a:	9c de       	rcall	.-712    	; 0x384 <LCD_Game_Menu>
     64c:	81 e0       	ldi	r24, 0x01	; 1
     64e:	90 e0       	ldi	r25, 0x00	; 0
     650:	19 c1       	rjmp	.+562    	; 0x884 <__LOCK_REGION_LENGTH__+0x484>
     652:	80 91 7e 09 	lds	r24, 0x097E	; 0x80097e <current_song_choice>
     656:	88 23       	and	r24, r24
     658:	39 f0       	breq	.+14     	; 0x668 <__LOCK_REGION_LENGTH__+0x268>
     65a:	81 e0       	ldi	r24, 0x01	; 1
     65c:	0e de       	rcall	.-996    	; 0x27a <LCD_Cursor>
     65e:	80 e2       	ldi	r24, 0x20	; 32
     660:	14 de       	rcall	.-984    	; 0x28a <LCD_WriteData>
     662:	81 e1       	ldi	r24, 0x11	; 17
     664:	0a de       	rcall	.-1004   	; 0x27a <LCD_Cursor>
     666:	06 c0       	rjmp	.+12     	; 0x674 <__LOCK_REGION_LENGTH__+0x274>
     668:	81 e1       	ldi	r24, 0x11	; 17
     66a:	07 de       	rcall	.-1010   	; 0x27a <LCD_Cursor>
     66c:	80 e2       	ldi	r24, 0x20	; 32
     66e:	0d de       	rcall	.-998    	; 0x28a <LCD_WriteData>
     670:	81 e0       	ldi	r24, 0x01	; 1
     672:	03 de       	rcall	.-1018   	; 0x27a <LCD_Cursor>
     674:	85 ea       	ldi	r24, 0xA5	; 165
     676:	09 de       	rcall	.-1006   	; 0x28a <LCD_WriteData>
     678:	4d e1       	ldi	r20, 0x1D	; 29
     67a:	59 e0       	ldi	r21, 0x09	; 9
     67c:	61 e0       	ldi	r22, 0x01	; 1
     67e:	70 e0       	ldi	r23, 0x00	; 0
     680:	82 e0       	ldi	r24, 0x02	; 2
     682:	25 de       	rcall	.-950    	; 0x2ce <LCD_Write_Single_Line>
     684:	4b e2       	ldi	r20, 0x2B	; 43
     686:	59 e0       	ldi	r21, 0x09	; 9
     688:	62 e0       	ldi	r22, 0x02	; 2
     68a:	70 e0       	ldi	r23, 0x00	; 0
     68c:	82 e0       	ldi	r24, 0x02	; 2
     68e:	1f de       	rcall	.-962    	; 0x2ce <LCD_Write_Single_Line>
     690:	83 e0       	ldi	r24, 0x03	; 3
     692:	90 e0       	ldi	r25, 0x00	; 0
     694:	f7 c0       	rjmp	.+494    	; 0x884 <__LOCK_REGION_LENGTH__+0x484>
     696:	4e e2       	ldi	r20, 0x2E	; 46
     698:	59 e0       	ldi	r21, 0x09	; 9
     69a:	61 e0       	ldi	r22, 0x01	; 1
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	81 e0       	ldi	r24, 0x01	; 1
     6a0:	16 de       	rcall	.-980    	; 0x2ce <LCD_Write_Single_Line>
     6a2:	87 e0       	ldi	r24, 0x07	; 7
     6a4:	ea dd       	rcall	.-1068   	; 0x27a <LCD_Cursor>
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	f0 dd       	rcall	.-1056   	; 0x28a <LCD_WriteData>
     6aa:	4e e3       	ldi	r20, 0x3E	; 62
     6ac:	59 e0       	ldi	r21, 0x09	; 9
     6ae:	62 e0       	ldi	r22, 0x02	; 2
     6b0:	70 e0       	ldi	r23, 0x00	; 0
     6b2:	81 e0       	ldi	r24, 0x01	; 1
     6b4:	0c de       	rcall	.-1000   	; 0x2ce <LCD_Write_Single_Line>
     6b6:	8c e1       	ldi	r24, 0x1C	; 28
     6b8:	e0 dd       	rcall	.-1088   	; 0x27a <LCD_Cursor>
     6ba:	80 91 7c 09 	lds	r24, 0x097C	; 0x80097c <high_score>
     6be:	99 e2       	ldi	r25, 0x29	; 41
     6c0:	89 9f       	mul	r24, r25
     6c2:	81 2d       	mov	r24, r1
     6c4:	11 24       	eor	r1, r1
     6c6:	cd ec       	ldi	r28, 0xCD	; 205
     6c8:	82 95       	swap	r24
     6ca:	8f 70       	andi	r24, 0x0F	; 15
     6cc:	80 5d       	subi	r24, 0xD0	; 208
     6ce:	dd dd       	rcall	.-1094   	; 0x28a <LCD_WriteData>
     6d0:	80 91 7c 09 	lds	r24, 0x097C	; 0x80097c <high_score>
     6d4:	8c 9f       	mul	r24, r28
     6d6:	81 2d       	mov	r24, r1
     6d8:	11 24       	eor	r1, r1
     6da:	86 95       	lsr	r24
     6dc:	86 95       	lsr	r24
     6de:	86 95       	lsr	r24
     6e0:	8c 9f       	mul	r24, r28
     6e2:	91 2d       	mov	r25, r1
     6e4:	11 24       	eor	r1, r1
     6e6:	96 95       	lsr	r25
     6e8:	96 95       	lsr	r25
     6ea:	96 95       	lsr	r25
     6ec:	99 0f       	add	r25, r25
     6ee:	29 2f       	mov	r18, r25
     6f0:	22 0f       	add	r18, r18
     6f2:	22 0f       	add	r18, r18
     6f4:	92 0f       	add	r25, r18
     6f6:	89 1b       	sub	r24, r25
     6f8:	80 5d       	subi	r24, 0xD0	; 208
     6fa:	c7 dd       	rcall	.-1138   	; 0x28a <LCD_WriteData>
     6fc:	80 91 7c 09 	lds	r24, 0x097C	; 0x80097c <high_score>
     700:	8c 9f       	mul	r24, r28
     702:	c1 2d       	mov	r28, r1
     704:	11 24       	eor	r1, r1
     706:	c6 95       	lsr	r28
     708:	c6 95       	lsr	r28
     70a:	c6 95       	lsr	r28
     70c:	cc 0f       	add	r28, r28
     70e:	9c 2f       	mov	r25, r28
     710:	99 0f       	add	r25, r25
     712:	99 0f       	add	r25, r25
     714:	c9 0f       	add	r28, r25
     716:	8c 1b       	sub	r24, r28
     718:	80 5d       	subi	r24, 0xD0	; 208
     71a:	b7 dd       	rcall	.-1170   	; 0x28a <LCD_WriteData>
     71c:	81 e2       	ldi	r24, 0x21	; 33
     71e:	ad dd       	rcall	.-1190   	; 0x27a <LCD_Cursor>
     720:	86 e0       	ldi	r24, 0x06	; 6
     722:	90 e0       	ldi	r25, 0x00	; 0
     724:	af c0       	rjmp	.+350    	; 0x884 <__LOCK_REGION_LENGTH__+0x484>
     726:	63 e4       	ldi	r22, 0x43	; 67
     728:	79 e0       	ldi	r23, 0x09	; 9
     72a:	81 e0       	ldi	r24, 0x01	; 1
     72c:	b7 dd       	rcall	.-1170   	; 0x29c <LCD_DisplayString>
     72e:	89 e0       	ldi	r24, 0x09	; 9
     730:	a4 dd       	rcall	.-1208   	; 0x27a <LCD_Cursor>
     732:	80 91 7b 09 	lds	r24, 0x097B	; 0x80097b <current_score>
     736:	80 5d       	subi	r24, 0xD0	; 208
     738:	a8 dd       	rcall	.-1200   	; 0x28a <LCD_WriteData>
     73a:	80 91 7b 09 	lds	r24, 0x097B	; 0x80097b <current_score>
     73e:	80 5d       	subi	r24, 0xD0	; 208
     740:	a4 dd       	rcall	.-1208   	; 0x28a <LCD_WriteData>
     742:	80 91 7b 09 	lds	r24, 0x097B	; 0x80097b <current_score>
     746:	80 5d       	subi	r24, 0xD0	; 208
     748:	a0 dd       	rcall	.-1216   	; 0x28a <LCD_WriteData>
     74a:	88 e0       	ldi	r24, 0x08	; 8
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	9a c0       	rjmp	.+308    	; 0x884 <__LOCK_REGION_LENGTH__+0x484>
     750:	80 91 71 09 	lds	r24, 0x0971	; 0x800971 <score_increase>
     754:	88 23       	and	r24, r24
     756:	09 f4       	brne	.+2      	; 0x75a <__LOCK_REGION_LENGTH__+0x35a>
     758:	80 c0       	rjmp	.+256    	; 0x85a <__LOCK_REGION_LENGTH__+0x45a>
     75a:	89 e0       	ldi	r24, 0x09	; 9
     75c:	8e dd       	rcall	.-1252   	; 0x27a <LCD_Cursor>
     75e:	80 91 7b 09 	lds	r24, 0x097B	; 0x80097b <current_score>
     762:	99 e2       	ldi	r25, 0x29	; 41
     764:	89 9f       	mul	r24, r25
     766:	81 2d       	mov	r24, r1
     768:	11 24       	eor	r1, r1
     76a:	cd ec       	ldi	r28, 0xCD	; 205
     76c:	82 95       	swap	r24
     76e:	8f 70       	andi	r24, 0x0F	; 15
     770:	80 5d       	subi	r24, 0xD0	; 208
     772:	8b dd       	rcall	.-1258   	; 0x28a <LCD_WriteData>
     774:	80 91 7b 09 	lds	r24, 0x097B	; 0x80097b <current_score>
     778:	8c 9f       	mul	r24, r28
     77a:	81 2d       	mov	r24, r1
     77c:	11 24       	eor	r1, r1
     77e:	86 95       	lsr	r24
     780:	86 95       	lsr	r24
     782:	86 95       	lsr	r24
     784:	8c 9f       	mul	r24, r28
     786:	91 2d       	mov	r25, r1
     788:	11 24       	eor	r1, r1
     78a:	96 95       	lsr	r25
     78c:	96 95       	lsr	r25
     78e:	96 95       	lsr	r25
     790:	99 0f       	add	r25, r25
     792:	29 2f       	mov	r18, r25
     794:	22 0f       	add	r18, r18
     796:	22 0f       	add	r18, r18
     798:	92 0f       	add	r25, r18
     79a:	89 1b       	sub	r24, r25
     79c:	80 5d       	subi	r24, 0xD0	; 208
     79e:	75 dd       	rcall	.-1302   	; 0x28a <LCD_WriteData>
     7a0:	80 91 7b 09 	lds	r24, 0x097B	; 0x80097b <current_score>
     7a4:	8c 9f       	mul	r24, r28
     7a6:	c1 2d       	mov	r28, r1
     7a8:	11 24       	eor	r1, r1
     7aa:	c6 95       	lsr	r28
     7ac:	c6 95       	lsr	r28
     7ae:	c6 95       	lsr	r28
     7b0:	cc 0f       	add	r28, r28
     7b2:	9c 2f       	mov	r25, r28
     7b4:	99 0f       	add	r25, r25
     7b6:	99 0f       	add	r25, r25
     7b8:	c9 0f       	add	r28, r25
     7ba:	8c 1b       	sub	r24, r28
     7bc:	80 5d       	subi	r24, 0xD0	; 208
     7be:	65 dd       	rcall	.-1334   	; 0x28a <LCD_WriteData>
     7c0:	89 e0       	ldi	r24, 0x09	; 9
     7c2:	90 e0       	ldi	r25, 0x00	; 0
     7c4:	5f c0       	rjmp	.+190    	; 0x884 <__LOCK_REGION_LENGTH__+0x484>
     7c6:	4a e4       	ldi	r20, 0x4A	; 74
     7c8:	59 e0       	ldi	r21, 0x09	; 9
     7ca:	62 e0       	ldi	r22, 0x02	; 2
     7cc:	70 e0       	ldi	r23, 0x00	; 0
     7ce:	81 e0       	ldi	r24, 0x01	; 1
     7d0:	7e dd       	rcall	.-1284   	; 0x2ce <LCD_Write_Single_Line>
     7d2:	8a e0       	ldi	r24, 0x0A	; 10
     7d4:	90 e0       	ldi	r25, 0x00	; 0
     7d6:	56 c0       	rjmp	.+172    	; 0x884 <__LOCK_REGION_LENGTH__+0x484>
     7d8:	67 e5       	ldi	r22, 0x57	; 87
     7da:	79 e0       	ldi	r23, 0x09	; 9
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	5e dd       	rcall	.-1348   	; 0x29c <LCD_DisplayString>
     7e0:	8d e0       	ldi	r24, 0x0D	; 13
     7e2:	4b dd       	rcall	.-1386   	; 0x27a <LCD_Cursor>
     7e4:	80 91 7b 09 	lds	r24, 0x097B	; 0x80097b <current_score>
     7e8:	99 e2       	ldi	r25, 0x29	; 41
     7ea:	89 9f       	mul	r24, r25
     7ec:	81 2d       	mov	r24, r1
     7ee:	11 24       	eor	r1, r1
     7f0:	cd ec       	ldi	r28, 0xCD	; 205
     7f2:	82 95       	swap	r24
     7f4:	8f 70       	andi	r24, 0x0F	; 15
     7f6:	80 5d       	subi	r24, 0xD0	; 208
     7f8:	48 dd       	rcall	.-1392   	; 0x28a <LCD_WriteData>
     7fa:	80 91 7b 09 	lds	r24, 0x097B	; 0x80097b <current_score>
     7fe:	8c 9f       	mul	r24, r28
     800:	81 2d       	mov	r24, r1
     802:	11 24       	eor	r1, r1
     804:	86 95       	lsr	r24
     806:	86 95       	lsr	r24
     808:	86 95       	lsr	r24
     80a:	8c 9f       	mul	r24, r28
     80c:	91 2d       	mov	r25, r1
     80e:	11 24       	eor	r1, r1
     810:	96 95       	lsr	r25
     812:	96 95       	lsr	r25
     814:	96 95       	lsr	r25
     816:	99 0f       	add	r25, r25
     818:	29 2f       	mov	r18, r25
     81a:	22 0f       	add	r18, r18
     81c:	22 0f       	add	r18, r18
     81e:	92 0f       	add	r25, r18
     820:	89 1b       	sub	r24, r25
     822:	80 5d       	subi	r24, 0xD0	; 208
     824:	32 dd       	rcall	.-1436   	; 0x28a <LCD_WriteData>
     826:	80 91 7b 09 	lds	r24, 0x097B	; 0x80097b <current_score>
     82a:	8c 9f       	mul	r24, r28
     82c:	c1 2d       	mov	r28, r1
     82e:	11 24       	eor	r1, r1
     830:	c6 95       	lsr	r28
     832:	c6 95       	lsr	r28
     834:	c6 95       	lsr	r28
     836:	cc 0f       	add	r28, r28
     838:	9c 2f       	mov	r25, r28
     83a:	99 0f       	add	r25, r25
     83c:	99 0f       	add	r25, r25
     83e:	c9 0f       	add	r28, r25
     840:	8c 1b       	sub	r24, r28
     842:	80 5d       	subi	r24, 0xD0	; 208
     844:	22 dd       	rcall	.-1468   	; 0x28a <LCD_WriteData>
     846:	60 91 7b 09 	lds	r22, 0x097B	; 0x80097b <current_score>
     84a:	60 93 7c 09 	sts	0x097C, r22	; 0x80097c <high_score>
     84e:	81 e0       	ldi	r24, 0x01	; 1
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	0a d6       	rcall	.+3092   	; 0x1468 <eeprom_update_byte>
     854:	8b e0       	ldi	r24, 0x0B	; 11
     856:	90 e0       	ldi	r25, 0x00	; 0
     858:	15 c0       	rjmp	.+42     	; 0x884 <__LOCK_REGION_LENGTH__+0x484>
     85a:	89 e0       	ldi	r24, 0x09	; 9
     85c:	90 e0       	ldi	r25, 0x00	; 0
     85e:	12 c0       	rjmp	.+36     	; 0x884 <__LOCK_REGION_LENGTH__+0x484>
     860:	84 e0       	ldi	r24, 0x04	; 4
     862:	90 e0       	ldi	r25, 0x00	; 0
     864:	0f c0       	rjmp	.+30     	; 0x884 <__LOCK_REGION_LENGTH__+0x484>
     866:	8c e0       	ldi	r24, 0x0C	; 12
     868:	90 e0       	ldi	r25, 0x00	; 0
     86a:	0c c0       	rjmp	.+24     	; 0x884 <__LOCK_REGION_LENGTH__+0x484>
     86c:	8c e0       	ldi	r24, 0x0C	; 12
     86e:	90 e0       	ldi	r25, 0x00	; 0
     870:	09 c0       	rjmp	.+18     	; 0x884 <__LOCK_REGION_LENGTH__+0x484>
     872:	8c e0       	ldi	r24, 0x0C	; 12
     874:	90 e0       	ldi	r25, 0x00	; 0
     876:	06 c0       	rjmp	.+12     	; 0x884 <__LOCK_REGION_LENGTH__+0x484>
     878:	8c e0       	ldi	r24, 0x0C	; 12
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	03 c0       	rjmp	.+6      	; 0x884 <__LOCK_REGION_LENGTH__+0x484>
     87e:	21 11       	cpse	r18, r1
     880:	e8 ce       	rjmp	.-560    	; 0x652 <__LOCK_REGION_LENGTH__+0x252>
     882:	14 ce       	rjmp	.-984    	; 0x4ac <__LOCK_REGION_LENGTH__+0xac>
     884:	cf 91       	pop	r28
     886:	08 95       	ret

00000888 <TimerSet>:
     888:	60 93 d8 08 	sts	0x08D8, r22	; 0x8008d8 <_avr_timer_M>
     88c:	70 93 d9 08 	sts	0x08D9, r23	; 0x8008d9 <_avr_timer_M+0x1>
     890:	80 93 da 08 	sts	0x08DA, r24	; 0x8008da <_avr_timer_M+0x2>
     894:	90 93 db 08 	sts	0x08DB, r25	; 0x8008db <_avr_timer_M+0x3>
     898:	60 93 84 09 	sts	0x0984, r22	; 0x800984 <_avr_timer_cntcurr>
     89c:	70 93 85 09 	sts	0x0985, r23	; 0x800985 <_avr_timer_cntcurr+0x1>
     8a0:	80 93 86 09 	sts	0x0986, r24	; 0x800986 <_avr_timer_cntcurr+0x2>
     8a4:	90 93 87 09 	sts	0x0987, r25	; 0x800987 <_avr_timer_cntcurr+0x3>
     8a8:	08 95       	ret

000008aa <TimerOn>:
     8aa:	8b e0       	ldi	r24, 0x0B	; 11
     8ac:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     8b0:	8d e7       	ldi	r24, 0x7D	; 125
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     8b8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     8bc:	82 e0       	ldi	r24, 0x02	; 2
     8be:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     8c2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     8c6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     8ca:	80 91 d8 08 	lds	r24, 0x08D8	; 0x8008d8 <_avr_timer_M>
     8ce:	90 91 d9 08 	lds	r25, 0x08D9	; 0x8008d9 <_avr_timer_M+0x1>
     8d2:	a0 91 da 08 	lds	r26, 0x08DA	; 0x8008da <_avr_timer_M+0x2>
     8d6:	b0 91 db 08 	lds	r27, 0x08DB	; 0x8008db <_avr_timer_M+0x3>
     8da:	80 93 84 09 	sts	0x0984, r24	; 0x800984 <_avr_timer_cntcurr>
     8de:	90 93 85 09 	sts	0x0985, r25	; 0x800985 <_avr_timer_cntcurr+0x1>
     8e2:	a0 93 86 09 	sts	0x0986, r26	; 0x800986 <_avr_timer_cntcurr+0x2>
     8e6:	b0 93 87 09 	sts	0x0987, r27	; 0x800987 <_avr_timer_cntcurr+0x3>
     8ea:	8f b7       	in	r24, 0x3f	; 63
     8ec:	80 68       	ori	r24, 0x80	; 128
     8ee:	8f bf       	out	0x3f, r24	; 63
     8f0:	08 95       	ret

000008f2 <TimerISR>:
     8f2:	ef 92       	push	r14
     8f4:	ff 92       	push	r15
     8f6:	0f 93       	push	r16
     8f8:	1f 93       	push	r17
     8fa:	cf 93       	push	r28
     8fc:	df 93       	push	r29
     8fe:	81 e0       	ldi	r24, 0x01	; 1
     900:	80 93 88 09 	sts	0x0988, r24	; 0x800988 <TimerFlag>
     904:	c9 e8       	ldi	r28, 0x89	; 137
     906:	d9 e0       	ldi	r29, 0x09	; 9
     908:	0f 2e       	mov	r0, r31
     90a:	f9 ee       	ldi	r31, 0xE9	; 233
     90c:	ef 2e       	mov	r14, r31
     90e:	f9 e0       	ldi	r31, 0x09	; 9
     910:	ff 2e       	mov	r15, r31
     912:	f0 2d       	mov	r31, r0
     914:	8e 01       	movw	r16, r28
     916:	4e 81       	ldd	r20, Y+6	; 0x06
     918:	5f 81       	ldd	r21, Y+7	; 0x07
     91a:	68 85       	ldd	r22, Y+8	; 0x08
     91c:	79 85       	ldd	r23, Y+9	; 0x09
     91e:	8a 81       	ldd	r24, Y+2	; 0x02
     920:	9b 81       	ldd	r25, Y+3	; 0x03
     922:	ac 81       	ldd	r26, Y+4	; 0x04
     924:	bd 81       	ldd	r27, Y+5	; 0x05
     926:	48 17       	cp	r20, r24
     928:	59 07       	cpc	r21, r25
     92a:	6a 07       	cpc	r22, r26
     92c:	7b 07       	cpc	r23, r27
     92e:	58 f0       	brcs	.+22     	; 0x946 <TimerISR+0x54>
     930:	ea 85       	ldd	r30, Y+10	; 0x0a
     932:	fb 85       	ldd	r31, Y+11	; 0x0b
     934:	88 81       	ld	r24, Y
     936:	99 81       	ldd	r25, Y+1	; 0x01
     938:	09 95       	icall
     93a:	99 83       	std	Y+1, r25	; 0x01
     93c:	88 83       	st	Y, r24
     93e:	1e 82       	std	Y+6, r1	; 0x06
     940:	1f 82       	std	Y+7, r1	; 0x07
     942:	18 86       	std	Y+8, r1	; 0x08
     944:	19 86       	std	Y+9, r1	; 0x09
     946:	f8 01       	movw	r30, r16
     948:	86 81       	ldd	r24, Z+6	; 0x06
     94a:	97 81       	ldd	r25, Z+7	; 0x07
     94c:	a0 85       	ldd	r26, Z+8	; 0x08
     94e:	b1 85       	ldd	r27, Z+9	; 0x09
     950:	05 96       	adiw	r24, 0x05	; 5
     952:	a1 1d       	adc	r26, r1
     954:	b1 1d       	adc	r27, r1
     956:	86 83       	std	Z+6, r24	; 0x06
     958:	97 83       	std	Z+7, r25	; 0x07
     95a:	a0 87       	std	Z+8, r26	; 0x08
     95c:	b1 87       	std	Z+9, r27	; 0x09
     95e:	2c 96       	adiw	r28, 0x0c	; 12
     960:	ce 15       	cp	r28, r14
     962:	df 05       	cpc	r29, r15
     964:	b9 f6       	brne	.-82     	; 0x914 <TimerISR+0x22>
     966:	df 91       	pop	r29
     968:	cf 91       	pop	r28
     96a:	1f 91       	pop	r17
     96c:	0f 91       	pop	r16
     96e:	ff 90       	pop	r15
     970:	ef 90       	pop	r14
     972:	08 95       	ret

00000974 <__vector_13>:
     974:	1f 92       	push	r1
     976:	0f 92       	push	r0
     978:	0f b6       	in	r0, 0x3f	; 63
     97a:	0f 92       	push	r0
     97c:	11 24       	eor	r1, r1
     97e:	0b b6       	in	r0, 0x3b	; 59
     980:	0f 92       	push	r0
     982:	2f 93       	push	r18
     984:	3f 93       	push	r19
     986:	4f 93       	push	r20
     988:	5f 93       	push	r21
     98a:	6f 93       	push	r22
     98c:	7f 93       	push	r23
     98e:	8f 93       	push	r24
     990:	9f 93       	push	r25
     992:	af 93       	push	r26
     994:	bf 93       	push	r27
     996:	ef 93       	push	r30
     998:	ff 93       	push	r31
     99a:	80 91 84 09 	lds	r24, 0x0984	; 0x800984 <_avr_timer_cntcurr>
     99e:	90 91 85 09 	lds	r25, 0x0985	; 0x800985 <_avr_timer_cntcurr+0x1>
     9a2:	a0 91 86 09 	lds	r26, 0x0986	; 0x800986 <_avr_timer_cntcurr+0x2>
     9a6:	b0 91 87 09 	lds	r27, 0x0987	; 0x800987 <_avr_timer_cntcurr+0x3>
     9aa:	01 97       	sbiw	r24, 0x01	; 1
     9ac:	a1 09       	sbc	r26, r1
     9ae:	b1 09       	sbc	r27, r1
     9b0:	80 93 84 09 	sts	0x0984, r24	; 0x800984 <_avr_timer_cntcurr>
     9b4:	90 93 85 09 	sts	0x0985, r25	; 0x800985 <_avr_timer_cntcurr+0x1>
     9b8:	a0 93 86 09 	sts	0x0986, r26	; 0x800986 <_avr_timer_cntcurr+0x2>
     9bc:	b0 93 87 09 	sts	0x0987, r27	; 0x800987 <_avr_timer_cntcurr+0x3>
     9c0:	89 2b       	or	r24, r25
     9c2:	8a 2b       	or	r24, r26
     9c4:	8b 2b       	or	r24, r27
     9c6:	89 f4       	brne	.+34     	; 0x9ea <__vector_13+0x76>
     9c8:	94 df       	rcall	.-216    	; 0x8f2 <TimerISR>
     9ca:	80 91 d8 08 	lds	r24, 0x08D8	; 0x8008d8 <_avr_timer_M>
     9ce:	90 91 d9 08 	lds	r25, 0x08D9	; 0x8008d9 <_avr_timer_M+0x1>
     9d2:	a0 91 da 08 	lds	r26, 0x08DA	; 0x8008da <_avr_timer_M+0x2>
     9d6:	b0 91 db 08 	lds	r27, 0x08DB	; 0x8008db <_avr_timer_M+0x3>
     9da:	80 93 84 09 	sts	0x0984, r24	; 0x800984 <_avr_timer_cntcurr>
     9de:	90 93 85 09 	sts	0x0985, r25	; 0x800985 <_avr_timer_cntcurr+0x1>
     9e2:	a0 93 86 09 	sts	0x0986, r26	; 0x800986 <_avr_timer_cntcurr+0x2>
     9e6:	b0 93 87 09 	sts	0x0987, r27	; 0x800987 <_avr_timer_cntcurr+0x3>
     9ea:	ff 91       	pop	r31
     9ec:	ef 91       	pop	r30
     9ee:	bf 91       	pop	r27
     9f0:	af 91       	pop	r26
     9f2:	9f 91       	pop	r25
     9f4:	8f 91       	pop	r24
     9f6:	7f 91       	pop	r23
     9f8:	6f 91       	pop	r22
     9fa:	5f 91       	pop	r21
     9fc:	4f 91       	pop	r20
     9fe:	3f 91       	pop	r19
     a00:	2f 91       	pop	r18
     a02:	0f 90       	pop	r0
     a04:	0b be       	out	0x3b, r0	; 59
     a06:	0f 90       	pop	r0
     a08:	0f be       	out	0x3f, r0	; 63
     a0a:	0f 90       	pop	r0
     a0c:	1f 90       	pop	r1
     a0e:	18 95       	reti

00000a10 <Shift_Init>:

void Shift_Init() {
    DDRC = Set_Bit(DDRC, DATA);
     a10:	3a 9a       	sbi	0x07, 2	; 7
    DDRC = Set_Bit(DDRC, SHIFT);
     a12:	3b 9a       	sbi	0x07, 3	; 7
    DDRC = Set_Bit(DDRC, STORE);
     a14:	3c 9a       	sbi	0x07, 4	; 7
     a16:	08 95       	ret

00000a18 <Shift_Data_High>:
}

//Set Data line high
void Shift_Data_High() {
    PORTC = Set_Bit(PORTC, DATA);
     a18:	42 9a       	sbi	0x08, 2	; 8
     a1a:	08 95       	ret

00000a1c <Shift_Data_Low>:
}

//Set Data line low
void Shift_Data_Low() {
    PORTC = Clear_Bit(PORTC, DATA);
     a1c:	42 98       	cbi	0x08, 2	; 8
     a1e:	08 95       	ret

00000a20 <Shift_Pulse>:
}

//Pulse Shift Clock
void Shift_Pulse() {
    PORTC = Set_Bit(PORTC, SHIFT);
     a20:	43 9a       	sbi	0x08, 3	; 8
    PORTC = Clear_Bit(PORTC, SHIFT);
     a22:	43 98       	cbi	0x08, 3	; 8
     a24:	08 95       	ret

00000a26 <Shift_Store>:
}

//Pulse Store Clock
void Shift_Store() {
    PORTC = Set_Bit(PORTC, STORE);
     a26:	44 9a       	sbi	0x08, 4	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	90 e0       	ldi	r25, 0x00	; 0
     a2c:	fc 01       	movw	r30, r24
     a2e:	31 97       	sbiw	r30, 0x01	; 1
     a30:	f1 f7       	brne	.-4      	; 0xa2e <Shift_Store+0x8>
    //SET_BIT(SHIFT_PORT,STORE_LINE);
    _delay_loop_2(1);

    //CLR_BIT(SHIFT_PORT,STORE_LINE);
    PORTC = Clear_Bit(PORTC, STORE);
     a32:	44 98       	cbi	0x08, 4	; 8
     a34:	01 97       	sbiw	r24, 0x01	; 1
     a36:	f1 f7       	brne	.-4      	; 0xa34 <Shift_Store+0xe>
     a38:	08 95       	ret

00000a3a <Shift_transmit_data>:
    _delay_loop_2(1);
}


void Shift_transmit_data(unsigned char data) {
     a3a:	cf 93       	push	r28
     a3c:	df 93       	push	r29
     a3e:	d8 2f       	mov	r29, r24
     a40:	c8 e0       	ldi	r28, 0x08	; 8
    for(unsigned char i=0;i<8;i++) {
        if(data & 0x80) {
     a42:	dd 23       	and	r29, r29
     a44:	14 f4       	brge	.+4      	; 0xa4a <Shift_transmit_data+0x10>
            Shift_Data_High();
     a46:	e8 df       	rcall	.-48     	; 0xa18 <Shift_Data_High>
     a48:	01 c0       	rjmp	.+2      	; 0xa4c <Shift_transmit_data+0x12>
            } else {
            Shift_Data_Low();
     a4a:	e8 df       	rcall	.-48     	; 0xa1c <Shift_Data_Low>
        }

        Shift_Pulse();
     a4c:	e9 df       	rcall	.-46     	; 0xa20 <Shift_Pulse>
     a4e:	dd 0f       	add	r29, r29
        data=data << 1;
     a50:	c1 50       	subi	r28, 0x01	; 1
    _delay_loop_2(1);
}


void Shift_transmit_data(unsigned char data) {
    for(unsigned char i=0;i<8;i++) {
     a52:	b9 f7       	brne	.-18     	; 0xa42 <Shift_transmit_data+0x8>

        Shift_Pulse();
        data=data << 1;
    }

    Shift_Store();
     a54:	e8 df       	rcall	.-48     	; 0xa26 <Shift_Store>
     a56:	df 91       	pop	r29
     a58:	cf 91       	pop	r28
     a5a:	08 95       	ret

00000a5c <RGB_Matrix_Tick>:
     a5c:	ef 92       	push	r14
    }

    return state;
}

int RGB_Matrix_Tick(int state){
     a5e:	ff 92       	push	r15
     a60:	0f 93       	push	r16
     a62:	1f 93       	push	r17
     a64:	cf 93       	push	r28
     a66:	df 93       	push	r29
    static unsigned char play_note;
    static unsigned char rest_note;
    static unsigned char note_to_hit;
    switch(state){
     a68:	81 30       	cpi	r24, 0x01	; 1
     a6a:	91 05       	cpc	r25, r1
     a6c:	59 f0       	breq	.+22     	; 0xa84 <RGB_Matrix_Tick+0x28>
     a6e:	1c f4       	brge	.+6      	; 0xa76 <RGB_Matrix_Tick+0x1a>
     a70:	00 97       	sbiw	r24, 0x00	; 0
     a72:	81 f1       	breq	.+96     	; 0xad4 <RGB_Matrix_Tick+0x78>
     a74:	19 c0       	rjmp	.+50     	; 0xaa8 <RGB_Matrix_Tick+0x4c>
     a76:	82 30       	cpi	r24, 0x02	; 2
     a78:	91 05       	cpc	r25, r1
     a7a:	69 f0       	breq	.+26     	; 0xa96 <RGB_Matrix_Tick+0x3a>
     a7c:	83 30       	cpi	r24, 0x03	; 3
     a7e:	91 05       	cpc	r25, r1
     a80:	49 f1       	breq	.+82     	; 0xad4 <RGB_Matrix_Tick+0x78>
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <RGB_Matrix_Tick+0x4c>
        case RGB_INIT:
            state = RGB_MENU;
            break;
        case RGB_MENU:
            if(playing){
     a84:	80 91 70 09 	lds	r24, 0x0970	; 0x800970 <playing>
     a88:	88 23       	and	r24, r24
     a8a:	21 f1       	breq	.+72     	; 0xad4 <RGB_Matrix_Tick+0x78>
                play_note = 0;
     a8c:	10 92 6a 09 	sts	0x096A, r1	; 0x80096a <play_note.2290>
                rest_note = 0;
     a90:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <rest_note.2291>
                state = RGB_SONG;
                break;
     a94:	14 c0       	rjmp	.+40     	; 0xabe <RGB_Matrix_Tick+0x62>
            else{
                state = RGB_MENU;
                break;
            }    
        case RGB_SONG:
            if(song_finished || !playing){
     a96:	80 91 72 09 	lds	r24, 0x0972	; 0x800972 <song_finished>
     a9a:	81 11       	cpse	r24, r1
     a9c:	16 c0       	rjmp	.+44     	; 0xaca <RGB_Matrix_Tick+0x6e>
     a9e:	80 91 70 09 	lds	r24, 0x0970	; 0x800970 <playing>
     aa2:	81 11       	cpse	r24, r1
     aa4:	0c c0       	rjmp	.+24     	; 0xabe <RGB_Matrix_Tick+0x62>
     aa6:	11 c0       	rjmp	.+34     	; 0xaca <RGB_Matrix_Tick+0x6e>
            }
        case RGB_RESET:
            state = RGB_MENU;
            break;
    }
    switch(state){
     aa8:	82 30       	cpi	r24, 0x02	; 2
     aaa:	91 05       	cpc	r25, r1
     aac:	41 f0       	breq	.+16     	; 0xabe <RGB_Matrix_Tick+0x62>
     aae:	83 30       	cpi	r24, 0x03	; 3
     ab0:	91 05       	cpc	r25, r1
     ab2:	59 f0       	breq	.+22     	; 0xaca <RGB_Matrix_Tick+0x6e>
     ab4:	81 30       	cpi	r24, 0x01	; 1
     ab6:	91 05       	cpc	r25, r1
     ab8:	09 f0       	breq	.+2      	; 0xabc <RGB_Matrix_Tick+0x60>
     aba:	dc c0       	rjmp	.+440    	; 0xc74 <RGB_Matrix_Tick+0x218>
     abc:	0b c0       	rjmp	.+22     	; 0xad4 <RGB_Matrix_Tick+0x78>
     abe:	03 e7       	ldi	r16, 0x73	; 115
     ac0:	19 e0       	ldi	r17, 0x09	; 9
     ac2:	2b e7       	ldi	r18, 0x7B	; 123
     ac4:	39 e0       	ldi	r19, 0x09	; 9
    }

    return state;
}

int RGB_Matrix_Tick(int state){
     ac6:	f8 01       	movw	r30, r16
     ac8:	3a c0       	rjmp	.+116    	; 0xb3e <RGB_Matrix_Tick+0xe2>
     aca:	e3 e7       	ldi	r30, 0x73	; 115
     acc:	f9 e0       	ldi	r31, 0x09	; 9
     ace:	8b e7       	ldi	r24, 0x7B	; 123
     ad0:	99 e0       	ldi	r25, 0x09	; 9
     ad2:	c2 c0       	rjmp	.+388    	; 0xc58 <RGB_Matrix_Tick+0x1fc>
    }
    switch(state){
        case RGB_INIT:
            break;
        case RGB_MENU:
            if(LEFT || RIGHT || UP || DOWN){
     ad4:	80 91 83 09 	lds	r24, 0x0983	; 0x800983 <LEFT>
     ad8:	88 23       	and	r24, r24
     ada:	49 f0       	breq	.+18     	; 0xaee <RGB_Matrix_Tick+0x92>
     adc:	00 e0       	ldi	r16, 0x00	; 0
     ade:	11 e0       	ldi	r17, 0x01	; 1
    }

    return state;
}

int RGB_Matrix_Tick(int state){
     ae0:	c0 e0       	ldi	r28, 0x00	; 0
     ae2:	d0 e0       	ldi	r29, 0x00	; 0
        case RGB_INIT:
            break;
        case RGB_MENU:
            if(LEFT || RIGHT || UP || DOWN){
                for(unsigned char i = 0; i < 8; i++){
                    Shift_transmit_data(128 >> i);
     ae4:	68 94       	set
     ae6:	ee 24       	eor	r14, r14
     ae8:	e7 f8       	bld	r14, 7
     aea:	f1 2c       	mov	r15, r1
     aec:	0d c0       	rjmp	.+26     	; 0xb08 <RGB_Matrix_Tick+0xac>
    }
    switch(state){
        case RGB_INIT:
            break;
        case RGB_MENU:
            if(LEFT || RIGHT || UP || DOWN){
     aee:	80 91 82 09 	lds	r24, 0x0982	; 0x800982 <RIGHT>
     af2:	81 11       	cpse	r24, r1
     af4:	f3 cf       	rjmp	.-26     	; 0xadc <RGB_Matrix_Tick+0x80>
     af6:	80 91 81 09 	lds	r24, 0x0981	; 0x800981 <UP>
     afa:	81 11       	cpse	r24, r1
     afc:	ef cf       	rjmp	.-34     	; 0xadc <RGB_Matrix_Tick+0x80>
     afe:	80 91 80 09 	lds	r24, 0x0980	; 0x800980 <DOWN>
     b02:	81 11       	cpse	r24, r1
     b04:	eb cf       	rjmp	.-42     	; 0xadc <RGB_Matrix_Tick+0x80>
     b06:	14 c0       	rjmp	.+40     	; 0xb30 <RGB_Matrix_Tick+0xd4>
                for(unsigned char i = 0; i < 8; i++){
                    Shift_transmit_data(128 >> i);
     b08:	c7 01       	movw	r24, r14
     b0a:	0c 2e       	mov	r0, r28
     b0c:	02 c0       	rjmp	.+4      	; 0xb12 <RGB_Matrix_Tick+0xb6>
     b0e:	95 95       	asr	r25
     b10:	87 95       	ror	r24
     b12:	0a 94       	dec	r0
     b14:	e2 f7       	brpl	.-8      	; 0xb0e <RGB_Matrix_Tick+0xb2>
     b16:	91 df       	rcall	.-222    	; 0xa3a <Shift_transmit_data>
                    Shift_transmit_data(~pic[i]);
     b18:	f8 01       	movw	r30, r16
     b1a:	81 91       	ld	r24, Z+
     b1c:	8f 01       	movw	r16, r30
     b1e:	80 95       	com	r24
     b20:	8c df       	rcall	.-232    	; 0xa3a <Shift_transmit_data>
                    delay_ms(3);
     b22:	83 e0       	ldi	r24, 0x03	; 3
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	8a db       	rcall	.-2284   	; 0x23c <delay_ms>
     b28:	21 96       	adiw	r28, 0x01	; 1
    switch(state){
        case RGB_INIT:
            break;
        case RGB_MENU:
            if(LEFT || RIGHT || UP || DOWN){
                for(unsigned char i = 0; i < 8; i++){
     b2a:	c8 30       	cpi	r28, 0x08	; 8
     b2c:	d1 05       	cpc	r29, r1
                    Shift_transmit_data(128 >> i);
                    Shift_transmit_data(~pic[i]);
                    delay_ms(3);
                }
            }
            Shift_transmit_data(0);
     b2e:	61 f7       	brne	.-40     	; 0xb08 <RGB_Matrix_Tick+0xac>
     b30:	80 e0       	ldi	r24, 0x00	; 0
            Shift_transmit_data(0);
     b32:	83 df       	rcall	.-250    	; 0xa3a <Shift_transmit_data>
     b34:	80 e0       	ldi	r24, 0x00	; 0
     b36:	81 df       	rcall	.-254    	; 0xa3a <Shift_transmit_data>
            
            break;
     b38:	81 e0       	ldi	r24, 0x01	; 1
     b3a:	90 e0       	ldi	r25, 0x00	; 0
     b3c:	9b c0       	rjmp	.+310    	; 0xc74 <RGB_Matrix_Tick+0x218>
        case RGB_SONG:
            for(unsigned j = 0; j < 8; j++){
                RGB_DISPLAY_NOTES[j] <<= 1;
     b3e:	80 81       	ld	r24, Z
     b40:	88 0f       	add	r24, r24
     b42:	81 93       	st	Z+, r24
            Shift_transmit_data(0);
            Shift_transmit_data(0);
            
            break;
        case RGB_SONG:
            for(unsigned j = 0; j < 8; j++){
     b44:	e2 17       	cp	r30, r18
     b46:	f3 07       	cpc	r31, r19
     b48:	d1 f7       	brne	.-12     	; 0xb3e <RGB_Matrix_Tick+0xe2>
                RGB_DISPLAY_NOTES[j] <<= 1;
            }
            if(play_note < songs[current_song_choice].timing[current_note]){
     b4a:	20 91 7e 09 	lds	r18, 0x097E	; 0x80097e <current_song_choice>
     b4e:	30 e0       	ldi	r19, 0x00	; 0
     b50:	80 91 7f 09 	lds	r24, 0x097F	; 0x80097f <current_note>
     b54:	90 e0       	ldi	r25, 0x00	; 0
     b56:	40 91 6a 09 	lds	r20, 0x096A	; 0x80096a <play_note.2290>
     b5a:	60 ed       	ldi	r22, 0xD0	; 208
     b5c:	77 e0       	ldi	r23, 0x07	; 7
     b5e:	26 9f       	mul	r18, r22
     b60:	f0 01       	movw	r30, r0
     b62:	27 9f       	mul	r18, r23
     b64:	f0 0d       	add	r31, r0
     b66:	36 9f       	mul	r19, r22
     b68:	f0 0d       	add	r31, r0
     b6a:	11 24       	eor	r1, r1
     b6c:	e8 0f       	add	r30, r24
     b6e:	f9 1f       	adc	r31, r25
     b70:	ef 52       	subi	r30, 0x2F	; 47
     b72:	f2 4f       	sbci	r31, 0xF2	; 242
     b74:	50 81       	ld	r21, Z
     b76:	45 17       	cp	r20, r21
     b78:	e0 f5       	brcc	.+120    	; 0xbf2 <RGB_Matrix_Tick+0x196>
                note_to_hit = songs[current_song_choice].hit[current_note];
     b7a:	26 9f       	mul	r18, r22
     b7c:	f0 01       	movw	r30, r0
     b7e:	27 9f       	mul	r18, r23
     b80:	f0 0d       	add	r31, r0
     b82:	36 9f       	mul	r19, r22
     b84:	f0 0d       	add	r31, r0
     b86:	11 24       	eor	r1, r1
     b88:	8e 0f       	add	r24, r30
     b8a:	9f 1f       	adc	r25, r31
     b8c:	fc 01       	movw	r30, r24
     b8e:	eb 53       	subi	r30, 0x3B	; 59
     b90:	f0 4f       	sbci	r31, 0xF0	; 240
     b92:	80 81       	ld	r24, Z
                
                if(note_to_hit == 8){
     b94:	88 30       	cpi	r24, 0x08	; 8
     b96:	49 f4       	brne	.+18     	; 0xbaa <RGB_Matrix_Tick+0x14e>
                    RGB_DISPLAY_NOTES[7] |= 3;
     b98:	e3 e7       	ldi	r30, 0x73	; 115
     b9a:	f9 e0       	ldi	r31, 0x09	; 9
     b9c:	87 81       	ldd	r24, Z+7	; 0x07
     b9e:	83 60       	ori	r24, 0x03	; 3
     ba0:	87 83       	std	Z+7, r24	; 0x07
                    RGB_DISPLAY_NOTES[6] |= 3;
     ba2:	86 81       	ldd	r24, Z+6	; 0x06
     ba4:	83 60       	ori	r24, 0x03	; 3
     ba6:	86 83       	std	Z+6, r24	; 0x06
     ba8:	20 c0       	rjmp	.+64     	; 0xbea <RGB_Matrix_Tick+0x18e>
                }
                else if(note_to_hit == 4){
     baa:	84 30       	cpi	r24, 0x04	; 4
     bac:	49 f4       	brne	.+18     	; 0xbc0 <RGB_Matrix_Tick+0x164>
                    RGB_DISPLAY_NOTES[5] |= 3;
     bae:	e3 e7       	ldi	r30, 0x73	; 115
     bb0:	f9 e0       	ldi	r31, 0x09	; 9
     bb2:	85 81       	ldd	r24, Z+5	; 0x05
     bb4:	83 60       	ori	r24, 0x03	; 3
     bb6:	85 83       	std	Z+5, r24	; 0x05
                    RGB_DISPLAY_NOTES[4] |= 3;
     bb8:	84 81       	ldd	r24, Z+4	; 0x04
     bba:	83 60       	ori	r24, 0x03	; 3
     bbc:	84 83       	std	Z+4, r24	; 0x04
     bbe:	15 c0       	rjmp	.+42     	; 0xbea <RGB_Matrix_Tick+0x18e>
                }
                else if(note_to_hit == 2){
     bc0:	82 30       	cpi	r24, 0x02	; 2
     bc2:	49 f4       	brne	.+18     	; 0xbd6 <RGB_Matrix_Tick+0x17a>
                    RGB_DISPLAY_NOTES[3] |= 3;
     bc4:	e3 e7       	ldi	r30, 0x73	; 115
     bc6:	f9 e0       	ldi	r31, 0x09	; 9
     bc8:	83 81       	ldd	r24, Z+3	; 0x03
     bca:	83 60       	ori	r24, 0x03	; 3
     bcc:	83 83       	std	Z+3, r24	; 0x03
                    RGB_DISPLAY_NOTES[2] |= 3;
     bce:	82 81       	ldd	r24, Z+2	; 0x02
     bd0:	83 60       	ori	r24, 0x03	; 3
     bd2:	82 83       	std	Z+2, r24	; 0x02
     bd4:	0a c0       	rjmp	.+20     	; 0xbea <RGB_Matrix_Tick+0x18e>
                }    
                else if(note_to_hit == 1){
     bd6:	81 30       	cpi	r24, 0x01	; 1
     bd8:	41 f4       	brne	.+16     	; 0xbea <RGB_Matrix_Tick+0x18e>
                    RGB_DISPLAY_NOTES[1] |= 3;
     bda:	e3 e7       	ldi	r30, 0x73	; 115
     bdc:	f9 e0       	ldi	r31, 0x09	; 9
     bde:	81 81       	ldd	r24, Z+1	; 0x01
     be0:	83 60       	ori	r24, 0x03	; 3
     be2:	81 83       	std	Z+1, r24	; 0x01
                    RGB_DISPLAY_NOTES[0] |= 3;
     be4:	80 81       	ld	r24, Z
     be6:	83 60       	ori	r24, 0x03	; 3
     be8:	80 83       	st	Z, r24
                }    
                play_note++;        
     bea:	4f 5f       	subi	r20, 0xFF	; 255
     bec:	40 93 6a 09 	sts	0x096A, r20	; 0x80096a <play_note.2290>
     bf0:	3a c0       	rjmp	.+116    	; 0xc66 <RGB_Matrix_Tick+0x20a>
            }
            else{
                note_to_hit = 0;
                if(rest_note < songs[current_song_choice].rest_timing[current_note]){
     bf2:	40 91 69 09 	lds	r20, 0x0969	; 0x800969 <rest_note.2291>
     bf6:	60 ed       	ldi	r22, 0xD0	; 208
     bf8:	77 e0       	ldi	r23, 0x07	; 7
     bfa:	26 9f       	mul	r18, r22
     bfc:	f0 01       	movw	r30, r0
     bfe:	27 9f       	mul	r18, r23
     c00:	f0 0d       	add	r31, r0
     c02:	36 9f       	mul	r19, r22
     c04:	f0 0d       	add	r31, r0
     c06:	11 24       	eor	r1, r1
     c08:	8e 0f       	add	r24, r30
     c0a:	9f 1f       	adc	r25, r31
     c0c:	fc 01       	movw	r30, r24
     c0e:	e5 53       	subi	r30, 0x35	; 53
     c10:	f1 4f       	sbci	r31, 0xF1	; 241
     c12:	80 81       	ld	r24, Z
     c14:	48 17       	cp	r20, r24
     c16:	20 f4       	brcc	.+8      	; 0xc20 <RGB_Matrix_Tick+0x1c4>
                    rest_note++;
     c18:	4f 5f       	subi	r20, 0xFF	; 255
     c1a:	40 93 69 09 	sts	0x0969, r20	; 0x800969 <rest_note.2291>
     c1e:	23 c0       	rjmp	.+70     	; 0xc66 <RGB_Matrix_Tick+0x20a>
                }
                else{
                    play_note = 0;
     c20:	10 92 6a 09 	sts	0x096A, r1	; 0x80096a <play_note.2290>
                    rest_note = 0;   
     c24:	10 92 69 09 	sts	0x0969, r1	; 0x800969 <rest_note.2291>
     c28:	1e c0       	rjmp	.+60     	; 0xc66 <RGB_Matrix_Tick+0x20a>
                }     
            }                   
            for(unsigned char i = 0; i < 8; i++){
                Shift_transmit_data(128 >> i);
     c2a:	c7 01       	movw	r24, r14
     c2c:	0c 2e       	mov	r0, r28
     c2e:	02 c0       	rjmp	.+4      	; 0xc34 <RGB_Matrix_Tick+0x1d8>
     c30:	95 95       	asr	r25
     c32:	87 95       	ror	r24
     c34:	0a 94       	dec	r0
     c36:	e2 f7       	brpl	.-8      	; 0xc30 <RGB_Matrix_Tick+0x1d4>
                Shift_transmit_data(~RGB_DISPLAY_NOTES[i]);
     c38:	00 df       	rcall	.-512    	; 0xa3a <Shift_transmit_data>
     c3a:	f8 01       	movw	r30, r16
     c3c:	81 91       	ld	r24, Z+
     c3e:	8f 01       	movw	r16, r30
     c40:	80 95       	com	r24
                delay_ms(5);
     c42:	fb de       	rcall	.-522    	; 0xa3a <Shift_transmit_data>
     c44:	85 e0       	ldi	r24, 0x05	; 5
     c46:	90 e0       	ldi	r25, 0x00	; 0
     c48:	f9 da       	rcall	.-2574   	; 0x23c <delay_ms>
     c4a:	21 96       	adiw	r28, 0x01	; 1
                else{
                    play_note = 0;
                    rest_note = 0;   
                }     
            }                   
            for(unsigned char i = 0; i < 8; i++){
     c4c:	c8 30       	cpi	r28, 0x08	; 8
     c4e:	d1 05       	cpc	r29, r1
     c50:	61 f7       	brne	.-40     	; 0xc2a <RGB_Matrix_Tick+0x1ce>
     c52:	82 e0       	ldi	r24, 0x02	; 2
     c54:	90 e0       	ldi	r25, 0x00	; 0
     c56:	0e c0       	rjmp	.+28     	; 0xc74 <RGB_Matrix_Tick+0x218>
            
            }
            break;
        case RGB_RESET:
            for(unsigned char r = 0; r < 8; r++){
                RGB_DISPLAY_NOTES[r] = 0;
     c58:	11 92       	st	Z+, r1
                delay_ms(5);
            
            }
            break;
        case RGB_RESET:
            for(unsigned char r = 0; r < 8; r++){
     c5a:	e8 17       	cp	r30, r24
     c5c:	f9 07       	cpc	r31, r25
     c5e:	e1 f7       	brne	.-8      	; 0xc58 <RGB_Matrix_Tick+0x1fc>
     c60:	83 e0       	ldi	r24, 0x03	; 3
     c62:	90 e0       	ldi	r25, 0x00	; 0
                RGB_DISPLAY_NOTES[r] = 0;
            }
            break;
    }
    
    return state;
     c64:	07 c0       	rjmp	.+14     	; 0xc74 <RGB_Matrix_Tick+0x218>
    }

    return state;
}

int RGB_Matrix_Tick(int state){
     c66:	c0 e0       	ldi	r28, 0x00	; 0
     c68:	d0 e0       	ldi	r29, 0x00	; 0
                    play_note = 0;
                    rest_note = 0;   
                }     
            }                   
            for(unsigned char i = 0; i < 8; i++){
                Shift_transmit_data(128 >> i);
     c6a:	68 94       	set
     c6c:	ee 24       	eor	r14, r14
     c6e:	e7 f8       	bld	r14, 7
     c70:	f1 2c       	mov	r15, r1
     c72:	db cf       	rjmp	.-74     	; 0xc2a <RGB_Matrix_Tick+0x1ce>
            }
            break;
    }
    
    return state;
}
     c74:	df 91       	pop	r29
     c76:	cf 91       	pop	r28
     c78:	1f 91       	pop	r17
     c7a:	0f 91       	pop	r16
     c7c:	ff 90       	pop	r15
     c7e:	ef 90       	pop	r14
     c80:	08 95       	ret

00000c82 <set_PWM>:

// 0.954 hz is lowest frequency possible with this function,
// based on settings in PWM_on()
// Passing in 0 as the frequency will stop the speaker from generating sound
void set_PWM(double frequency) {
     c82:	cf 92       	push	r12
     c84:	df 92       	push	r13
     c86:	ef 92       	push	r14
     c88:	ff 92       	push	r15
     c8a:	6b 01       	movw	r12, r22
     c8c:	7c 01       	movw	r14, r24
	static double current_frequency; // Keeps track of the currently set frequency
	// Will only update the registers when the frequency changes, otherwise allows
	// music to play uninterrupted.
	if (frequency != current_frequency) {
     c8e:	9b 01       	movw	r18, r22
     c90:	ac 01       	movw	r20, r24
     c92:	60 91 6c 09 	lds	r22, 0x096C	; 0x80096c <current_frequency.2121>
     c96:	70 91 6d 09 	lds	r23, 0x096D	; 0x80096d <current_frequency.2121+0x1>
     c9a:	80 91 6e 09 	lds	r24, 0x096E	; 0x80096e <current_frequency.2121+0x2>
     c9e:	90 91 6f 09 	lds	r25, 0x096F	; 0x80096f <current_frequency.2121+0x3>
     ca2:	58 d2       	rcall	.+1200   	; 0x1154 <__cmpsf2>
     ca4:	88 23       	and	r24, r24
     ca6:	09 f4       	brne	.+2      	; 0xcaa <set_PWM+0x28>
     ca8:	52 c0       	rjmp	.+164    	; 0xd4e <set_PWM+0xcc>
		if (!frequency) { TCCR3B &= 0x08; } //stops timer/counter
     caa:	20 e0       	ldi	r18, 0x00	; 0
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	a9 01       	movw	r20, r18
     cb0:	c7 01       	movw	r24, r14
     cb2:	b6 01       	movw	r22, r12
     cb4:	4f d2       	rcall	.+1182   	; 0x1154 <__cmpsf2>
     cb6:	81 11       	cpse	r24, r1
     cb8:	06 c0       	rjmp	.+12     	; 0xcc6 <set_PWM+0x44>
     cba:	e1 e9       	ldi	r30, 0x91	; 145
     cbc:	f0 e0       	ldi	r31, 0x00	; 0
     cbe:	80 81       	ld	r24, Z
     cc0:	88 70       	andi	r24, 0x08	; 8
     cc2:	80 83       	st	Z, r24
     cc4:	05 c0       	rjmp	.+10     	; 0xcd0 <set_PWM+0x4e>
		else { TCCR3B |= 0x03; } // resumes/continues timer/counter
     cc6:	e1 e9       	ldi	r30, 0x91	; 145
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	80 81       	ld	r24, Z
     ccc:	83 60       	ori	r24, 0x03	; 3
     cce:	80 83       	st	Z, r24
		
		// prevents OCR3A from overflowing, using prescaler 64
		// 0.954 is smallest frequency that will not result in overflow
		if (frequency < 0.954) { OCR3A = 0xFFFF; }
     cd0:	28 e5       	ldi	r18, 0x58	; 88
     cd2:	39 e3       	ldi	r19, 0x39	; 57
     cd4:	44 e7       	ldi	r20, 0x74	; 116
     cd6:	5f e3       	ldi	r21, 0x3F	; 63
     cd8:	c7 01       	movw	r24, r14
     cda:	b6 01       	movw	r22, r12
     cdc:	3b d2       	rcall	.+1142   	; 0x1154 <__cmpsf2>
     cde:	88 23       	and	r24, r24
     ce0:	3c f4       	brge	.+14     	; 0xcf0 <set_PWM+0x6e>
     ce2:	8f ef       	ldi	r24, 0xFF	; 255
     ce4:	9f ef       	ldi	r25, 0xFF	; 255
     ce6:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     cea:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
     cee:	23 c0       	rjmp	.+70     	; 0xd36 <set_PWM+0xb4>
		
		// prevents OCR0A from underflowing, using prescaler 64					
		// 31250 is largest frequency that will not result in underflow
		else if (frequency > 31250) { OCR3A = 0x0000; }
     cf0:	20 e0       	ldi	r18, 0x00	; 0
     cf2:	34 e2       	ldi	r19, 0x24	; 36
     cf4:	44 ef       	ldi	r20, 0xF4	; 244
     cf6:	56 e4       	ldi	r21, 0x46	; 70
     cf8:	c7 01       	movw	r24, r14
     cfa:	b6 01       	movw	r22, r12
     cfc:	3d d3       	rcall	.+1658   	; 0x1378 <__gesf2>
     cfe:	18 16       	cp	r1, r24
     d00:	2c f4       	brge	.+10     	; 0xd0c <set_PWM+0x8a>
     d02:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     d06:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
     d0a:	15 c0       	rjmp	.+42     	; 0xd36 <set_PWM+0xb4>
		
		// set OCR3A based on desired frequency
		else { OCR3A = (short)(8000000 / (128 * frequency)) - 1; }
     d0c:	20 e0       	ldi	r18, 0x00	; 0
     d0e:	30 e0       	ldi	r19, 0x00	; 0
     d10:	40 e0       	ldi	r20, 0x00	; 0
     d12:	53 e4       	ldi	r21, 0x43	; 67
     d14:	c7 01       	movw	r24, r14
     d16:	b6 01       	movw	r22, r12
     d18:	33 d3       	rcall	.+1638   	; 0x1380 <__mulsf3>
     d1a:	9b 01       	movw	r18, r22
     d1c:	ac 01       	movw	r20, r24
     d1e:	60 e0       	ldi	r22, 0x00	; 0
     d20:	74 e2       	ldi	r23, 0x24	; 36
     d22:	84 ef       	ldi	r24, 0xF4	; 244
     d24:	9a e4       	ldi	r25, 0x4A	; 74
     d26:	1a d2       	rcall	.+1076   	; 0x115c <__divsf3>
     d28:	81 d2       	rcall	.+1282   	; 0x122c <__fixsfsi>
     d2a:	61 50       	subi	r22, 0x01	; 1
     d2c:	71 09       	sbc	r23, r1
     d2e:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     d32:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>

		TCNT3 = 0; // resets counter
     d36:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
     d3a:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
		current_frequency = frequency; // Updates the current frequency
     d3e:	c0 92 6c 09 	sts	0x096C, r12	; 0x80096c <current_frequency.2121>
     d42:	d0 92 6d 09 	sts	0x096D, r13	; 0x80096d <current_frequency.2121+0x1>
     d46:	e0 92 6e 09 	sts	0x096E, r14	; 0x80096e <current_frequency.2121+0x2>
     d4a:	f0 92 6f 09 	sts	0x096F, r15	; 0x80096f <current_frequency.2121+0x3>
	}
}
     d4e:	ff 90       	pop	r15
     d50:	ef 90       	pop	r14
     d52:	df 90       	pop	r13
     d54:	cf 90       	pop	r12
     d56:	08 95       	ret

00000d58 <PWM_on>:

void PWM_on() {
	TCCR3A = (1 << COM3A0);
     d58:	80 e4       	ldi	r24, 0x40	; 64
     d5a:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	// COM3A0: Toggle PB3 on compare match between counter and OCR0A
	TCCR3B = (1 << WGM32) | (1 << CS31) | (1 << CS30);
     d5e:	8b e0       	ldi	r24, 0x0B	; 11
     d60:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
	// WGM02: When counter (TCNT0) matches OCR0A, reset counter
	// CS01 & CS30: Set a prescaler of 64
	set_PWM(0);
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	cb 01       	movw	r24, r22
     d6a:	8b cf       	rjmp	.-234    	; 0xc82 <set_PWM>
     d6c:	08 95       	ret

00000d6e <PWM_off>:
}

void PWM_off() {
	TCCR3A = 0x00;
     d6e:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	TCCR3B = 0x00;
     d72:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
     d76:	08 95       	ret

00000d78 <Note_Tick>:
    static unsigned char rest_note;
    static unsigned char note_to_hit;
    static unsigned char hitting_note;
    static bool already_hit;
    
    switch(state){
     d78:	81 30       	cpi	r24, 0x01	; 1
     d7a:	91 05       	cpc	r25, r1
     d7c:	59 f0       	breq	.+22     	; 0xd94 <Note_Tick+0x1c>
     d7e:	1c f4       	brge	.+6      	; 0xd86 <Note_Tick+0xe>
     d80:	00 97       	sbiw	r24, 0x00	; 0
     d82:	f1 f0       	breq	.+60     	; 0xdc0 <Note_Tick+0x48>
     d84:	12 c0       	rjmp	.+36     	; 0xdaa <Note_Tick+0x32>
     d86:	82 30       	cpi	r24, 0x02	; 2
     d88:	91 05       	cpc	r25, r1
     d8a:	51 f0       	breq	.+20     	; 0xda0 <Note_Tick+0x28>
     d8c:	83 30       	cpi	r24, 0x03	; 3
     d8e:	91 05       	cpc	r25, r1
     d90:	b9 f0       	breq	.+46     	; 0xdc0 <Note_Tick+0x48>
     d92:	0b c0       	rjmp	.+22     	; 0xdaa <Note_Tick+0x32>
        case Note_INIT:
            state = Note_Wait;
            break;
        case Note_Wait:
            if(playing){
     d94:	80 91 70 09 	lds	r24, 0x0970	; 0x800970 <playing>
     d98:	88 23       	and	r24, r24
     d9a:	91 f0       	breq	.+36     	; 0xdc0 <Note_Tick+0x48>
                PWM_on();
     d9c:	dd df       	rcall	.-70     	; 0xd58 <PWM_on>
                state = Note_Play_Song;
                break;
     d9e:	1b c0       	rjmp	.+54     	; 0xdd6 <Note_Tick+0x5e>
            else{
                state = Note_Wait;
                break;
            }
        case Note_Play_Song:
            if(song_finished){
     da0:	80 91 72 09 	lds	r24, 0x0972	; 0x800972 <song_finished>
     da4:	81 11       	cpse	r24, r1
     da6:	ca c0       	rjmp	.+404    	; 0xf3c <Note_Tick+0x1c4>
     da8:	16 c0       	rjmp	.+44     	; 0xdd6 <Note_Tick+0x5e>
            }
        case Note_Reset:
            state = Note_Wait;
            break;
    }
    switch(state){
     daa:	82 30       	cpi	r24, 0x02	; 2
     dac:	91 05       	cpc	r25, r1
     dae:	99 f0       	breq	.+38     	; 0xdd6 <Note_Tick+0x5e>
     db0:	83 30       	cpi	r24, 0x03	; 3
     db2:	91 05       	cpc	r25, r1
     db4:	09 f4       	brne	.+2      	; 0xdb8 <Note_Tick+0x40>
     db6:	c2 c0       	rjmp	.+388    	; 0xf3c <Note_Tick+0x1c4>
     db8:	81 30       	cpi	r24, 0x01	; 1
     dba:	91 05       	cpc	r25, r1
     dbc:	09 f0       	breq	.+2      	; 0xdc0 <Note_Tick+0x48>
     dbe:	c5 c0       	rjmp	.+394    	; 0xf4a <Note_Tick+0x1d2>
        case Note_INIT:
            break;
        case Note_Wait:
            play_note = 0;
     dc0:	10 92 68 09 	sts	0x0968, r1	; 0x800968 <play_note.2322>
            rest_note = 0;
     dc4:	10 92 67 09 	sts	0x0967, r1	; 0x800967 <rest_note.2323>
            hitting_note = 0;
     dc8:	10 92 66 09 	sts	0x0966, r1	; 0x800966 <hitting_note.2325>
            already_hit = false;
     dcc:	10 92 65 09 	sts	0x0965, r1	; 0x800965 <already_hit.2326>
            break;
     dd0:	81 e0       	ldi	r24, 0x01	; 1
     dd2:	90 e0       	ldi	r25, 0x00	; 0
     dd4:	08 95       	ret
        case Note_Play_Song:
            note_to_hit = songs[current_song_choice].hit[current_note];
     dd6:	30 91 7e 09 	lds	r19, 0x097E	; 0x80097e <current_song_choice>
     dda:	20 91 7f 09 	lds	r18, 0x097F	; 0x80097f <current_note>
     dde:	40 ed       	ldi	r20, 0xD0	; 208
     de0:	57 e0       	ldi	r21, 0x07	; 7
     de2:	34 9f       	mul	r19, r20
     de4:	c0 01       	movw	r24, r0
     de6:	35 9f       	mul	r19, r21
     de8:	90 0d       	add	r25, r0
     dea:	11 24       	eor	r1, r1
     dec:	87 51       	subi	r24, 0x17	; 23
     dee:	96 4f       	sbci	r25, 0xF6	; 246
     df0:	82 0f       	add	r24, r18
     df2:	91 1d       	adc	r25, r1
     df4:	fc 01       	movw	r30, r24
     df6:	e4 52       	subi	r30, 0x24	; 36
     df8:	fa 4f       	sbci	r31, 0xFA	; 250
     dfa:	20 81       	ld	r18, Z
     dfc:	20 93 64 09 	sts	0x0964, r18	; 0x800964 <__data_end>
            if(hitting_note < songs[current_song_choice].timing_hit[current_note] && (already_hit == false)){
     e00:	e6 50       	subi	r30, 0x06	; 6
     e02:	ff 4f       	sbci	r31, 0xFF	; 255
     e04:	90 81       	ld	r25, Z
     e06:	80 91 66 09 	lds	r24, 0x0966	; 0x800966 <hitting_note.2325>
     e0a:	89 17       	cp	r24, r25
     e0c:	c0 f4       	brcc	.+48     	; 0xe3e <Note_Tick+0xc6>
     e0e:	80 91 65 09 	lds	r24, 0x0965	; 0x800965 <already_hit.2326>
     e12:	81 11       	cpse	r24, r1
     e14:	14 c0       	rjmp	.+40     	; 0xe3e <Note_Tick+0xc6>
                if(player_button_press == note_to_hit){
     e16:	80 91 7d 09 	lds	r24, 0x097D	; 0x80097d <player_button_press>
     e1a:	28 13       	cpse	r18, r24
     e1c:	09 c0       	rjmp	.+18     	; 0xe30 <Note_Tick+0xb8>
                    current_score++;
     e1e:	80 91 7b 09 	lds	r24, 0x097B	; 0x80097b <current_score>
     e22:	8f 5f       	subi	r24, 0xFF	; 255
     e24:	80 93 7b 09 	sts	0x097B, r24	; 0x80097b <current_score>
                    score_increase = true;
     e28:	81 e0       	ldi	r24, 0x01	; 1
     e2a:	80 93 71 09 	sts	0x0971, r24	; 0x800971 <score_increase>
     e2e:	02 c0       	rjmp	.+4      	; 0xe34 <Note_Tick+0xbc>
                }
                else{
                    score_increase = false;
     e30:	10 92 71 09 	sts	0x0971, r1	; 0x800971 <score_increase>
                }
                hitting_note++;
     e34:	80 91 66 09 	lds	r24, 0x0966	; 0x800966 <hitting_note.2325>
     e38:	8f 5f       	subi	r24, 0xFF	; 255
     e3a:	80 93 66 09 	sts	0x0966, r24	; 0x800966 <hitting_note.2325>
            }
            if(play_note < songs[current_song_choice].timing[current_note]){
     e3e:	90 91 7e 09 	lds	r25, 0x097E	; 0x80097e <current_song_choice>
     e42:	80 91 7f 09 	lds	r24, 0x097F	; 0x80097f <current_note>
     e46:	20 ed       	ldi	r18, 0xD0	; 208
     e48:	37 e0       	ldi	r19, 0x07	; 7
     e4a:	92 9f       	mul	r25, r18
     e4c:	f0 01       	movw	r30, r0
     e4e:	93 9f       	mul	r25, r19
     e50:	f0 0d       	add	r31, r0
     e52:	11 24       	eor	r1, r1
     e54:	e7 51       	subi	r30, 0x17	; 23
     e56:	f6 4f       	sbci	r31, 0xF6	; 246
     e58:	e8 0f       	add	r30, r24
     e5a:	f1 1d       	adc	r31, r1
     e5c:	e8 51       	subi	r30, 0x18	; 24
     e5e:	fc 4f       	sbci	r31, 0xFC	; 252
     e60:	90 81       	ld	r25, Z
     e62:	80 91 68 09 	lds	r24, 0x0968	; 0x800968 <play_note.2322>
     e66:	89 17       	cp	r24, r25
     e68:	88 f5       	brcc	.+98     	; 0xecc <Note_Tick+0x154>
                if(player_button_press == note_to_hit){
     e6a:	90 91 7d 09 	lds	r25, 0x097D	; 0x80097d <player_button_press>
     e6e:	80 91 64 09 	lds	r24, 0x0964	; 0x800964 <__data_end>
     e72:	98 13       	cpse	r25, r24
     e74:	09 c0       	rjmp	.+18     	; 0xe88 <Note_Tick+0x110>
                    current_score++;
     e76:	80 91 7b 09 	lds	r24, 0x097B	; 0x80097b <current_score>
     e7a:	8f 5f       	subi	r24, 0xFF	; 255
     e7c:	80 93 7b 09 	sts	0x097B, r24	; 0x80097b <current_score>
                    score_increase = true;
     e80:	81 e0       	ldi	r24, 0x01	; 1
     e82:	80 93 71 09 	sts	0x0971, r24	; 0x800971 <score_increase>
     e86:	02 c0       	rjmp	.+4      	; 0xe8c <Note_Tick+0x114>
                }
                else{
                    score_increase = false;
     e88:	10 92 71 09 	sts	0x0971, r1	; 0x800971 <score_increase>
                }
                set_PWM(songs[current_song_choice].notes[current_note]);
     e8c:	90 91 7e 09 	lds	r25, 0x097E	; 0x80097e <current_song_choice>
     e90:	80 91 7f 09 	lds	r24, 0x097F	; 0x80097f <current_note>
     e94:	24 ef       	ldi	r18, 0xF4	; 244
     e96:	31 e0       	ldi	r19, 0x01	; 1
     e98:	92 9f       	mul	r25, r18
     e9a:	f0 01       	movw	r30, r0
     e9c:	93 9f       	mul	r25, r19
     e9e:	f0 0d       	add	r31, r0
     ea0:	11 24       	eor	r1, r1
     ea2:	e8 0f       	add	r30, r24
     ea4:	f1 1d       	adc	r31, r1
     ea6:	ee 0f       	add	r30, r30
     ea8:	ff 1f       	adc	r31, r31
     eaa:	ee 0f       	add	r30, r30
     eac:	ff 1f       	adc	r31, r31
     eae:	e7 51       	subi	r30, 0x17	; 23
     eb0:	f6 4f       	sbci	r31, 0xF6	; 246
     eb2:	60 81       	ld	r22, Z
     eb4:	71 81       	ldd	r23, Z+1	; 0x01
     eb6:	82 81       	ldd	r24, Z+2	; 0x02
     eb8:	93 81       	ldd	r25, Z+3	; 0x03
     eba:	e3 de       	rcall	.-570    	; 0xc82 <set_PWM>
                play_note++;
     ebc:	80 91 68 09 	lds	r24, 0x0968	; 0x800968 <play_note.2322>
     ec0:	8f 5f       	subi	r24, 0xFF	; 255
     ec2:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <play_note.2322>
                break;
     ec6:	82 e0       	ldi	r24, 0x02	; 2
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	08 95       	ret
            }
            else{
                set_PWM(0);
     ecc:	60 e0       	ldi	r22, 0x00	; 0
     ece:	70 e0       	ldi	r23, 0x00	; 0
     ed0:	cb 01       	movw	r24, r22
     ed2:	d7 de       	rcall	.-594    	; 0xc82 <set_PWM>
                if(rest_note < songs[current_song_choice].rest_timing[current_note]){
     ed4:	80 91 7f 09 	lds	r24, 0x097F	; 0x80097f <current_note>
     ed8:	90 91 67 09 	lds	r25, 0x0967	; 0x800967 <rest_note.2323>
     edc:	40 91 7e 09 	lds	r20, 0x097E	; 0x80097e <current_song_choice>
     ee0:	20 ed       	ldi	r18, 0xD0	; 208
     ee2:	37 e0       	ldi	r19, 0x07	; 7
     ee4:	42 9f       	mul	r20, r18
     ee6:	f0 01       	movw	r30, r0
     ee8:	43 9f       	mul	r20, r19
     eea:	f0 0d       	add	r31, r0
     eec:	11 24       	eor	r1, r1
     eee:	e7 51       	subi	r30, 0x17	; 23
     ef0:	f6 4f       	sbci	r31, 0xF6	; 246
     ef2:	e8 0f       	add	r30, r24
     ef4:	f1 1d       	adc	r31, r1
     ef6:	ee 51       	subi	r30, 0x1E	; 30
     ef8:	fb 4f       	sbci	r31, 0xFB	; 251
     efa:	20 81       	ld	r18, Z
     efc:	92 17       	cp	r25, r18
     efe:	30 f4       	brcc	.+12     	; 0xf0c <Note_Tick+0x194>
                    rest_note++;
     f00:	9f 5f       	subi	r25, 0xFF	; 255
     f02:	90 93 67 09 	sts	0x0967, r25	; 0x800967 <rest_note.2323>
     f06:	82 e0       	ldi	r24, 0x02	; 2
     f08:	90 e0       	ldi	r25, 0x00	; 0
     f0a:	08 95       	ret
                }
                else{
                    play_note = 0;
     f0c:	10 92 68 09 	sts	0x0968, r1	; 0x800968 <play_note.2322>
                    rest_note = 0;
     f10:	10 92 67 09 	sts	0x0967, r1	; 0x800967 <rest_note.2323>
                    hitting_note = 0;
     f14:	10 92 66 09 	sts	0x0966, r1	; 0x800966 <hitting_note.2325>
                    already_hit = false;
     f18:	10 92 65 09 	sts	0x0965, r1	; 0x800965 <already_hit.2326>
                    if(current_note < SONG_LENGTH){
     f1c:	8a 3f       	cpi	r24, 0xFA	; 250
     f1e:	30 f4       	brcc	.+12     	; 0xf2c <Note_Tick+0x1b4>
                        current_note++;
     f20:	8f 5f       	subi	r24, 0xFF	; 255
     f22:	80 93 7f 09 	sts	0x097F, r24	; 0x80097f <current_note>
     f26:	82 e0       	ldi	r24, 0x02	; 2
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	08 95       	ret
                    }
                    else{
                        playing = false;
     f2c:	10 92 70 09 	sts	0x0970, r1	; 0x800970 <playing>
                        song_finished = true;
     f30:	81 e0       	ldi	r24, 0x01	; 1
     f32:	80 93 72 09 	sts	0x0972, r24	; 0x800972 <song_finished>
                        break;
     f36:	82 e0       	ldi	r24, 0x02	; 2
     f38:	90 e0       	ldi	r25, 0x00	; 0
                    }
                }
            }
            break;
        case Note_Reset:
            PWM_off();
     f3a:	08 95       	ret
     f3c:	18 df       	rcall	.-464    	; 0xd6e <PWM_off>
            current_note = 0;
     f3e:	10 92 7f 09 	sts	0x097F, r1	; 0x80097f <current_note>
            score_increase = false;
     f42:	10 92 71 09 	sts	0x0971, r1	; 0x800971 <score_increase>
            break;
     f46:	83 e0       	ldi	r24, 0x03	; 3
     f48:	90 e0       	ldi	r25, 0x00	; 0
    }
    return state;
}
     f4a:	08 95       	ret

00000f4c <main>:


int main(void)
{
    //LCD PORTS & RGB MATRIX
    DDRD = 0xFF; PORTD = 0x00;
     f4c:	8f ef       	ldi	r24, 0xFF	; 255
     f4e:	8a b9       	out	0x0a, r24	; 10
     f50:	1b b8       	out	0x0b, r1	; 11
    DDRC = 0XFF; PORTC = 0x00; //0 & 1 are LCD Control Lines, 2,3,4 are RGB PORTS
     f52:	87 b9       	out	0x07, r24	; 7
     f54:	18 b8       	out	0x08, r1	; 8
    
    //BUTTON INPUT PORTS
    DDRA = 0x00; PORTA = 0xFF;
     f56:	11 b8       	out	0x01, r1	; 1
     f58:	82 b9       	out	0x02, r24	; 2
    
    //BUZZER PORT
    DDRB = 0x0FF; PORTB = 0x00; //PB6 is buzzer
     f5a:	84 b9       	out	0x04, r24	; 4
     f5c:	15 b8       	out	0x05, r1	; 5
    
    //Initialize LCD and Matrix
    LCD_init();
     f5e:	eb d9       	rcall	.-3114   	; 0x336 <LCD_init>
    Shift_Init();   
     f60:	57 dd       	rcall	.-1362   	; 0xa10 <Shift_Init>
    Shift_transmit_data(0);
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	6a dd       	rcall	.-1324   	; 0xa3a <Shift_transmit_data>
    Shift_transmit_data(255);
     f66:	8f ef       	ldi	r24, 0xFF	; 255
     f68:	68 dd       	rcall	.-1328   	; 0xa3a <Shift_transmit_data>
    
    high_score = (unsigned)(char)eeprom_read_byte((uint8_t*) 1);
     f6a:	81 e0       	ldi	r24, 0x01	; 1
     f6c:	90 e0       	ldi	r25, 0x00	; 0
     f6e:	74 d2       	rcall	.+1256   	; 0x1458 <eeprom_read_byte>
     f70:	80 93 7c 09 	sts	0x097C, r24	; 0x80097c <high_score>
     f74:	0f 2e       	mov	r0, r31
     f76:	f0 ef       	ldi	r31, 0xF0	; 240
     f78:	cf 2e       	mov	r12, r31
     f7a:	f4 e0       	ldi	r31, 0x04	; 4
     f7c:	df 2e       	mov	r13, r31
     f7e:	f0 2d       	mov	r31, r0
     f80:	0f 2e       	mov	r0, r31
     f82:	f9 ee       	ldi	r31, 0xE9	; 233
     f84:	ef 2e       	mov	r14, r31
     f86:	f9 e0       	ldi	r31, 0x09	; 9
     f88:	ff 2e       	mov	r15, r31
     f8a:	f0 2d       	mov	r31, r0
     f8c:	06 ef       	ldi	r16, 0xF6	; 246
     f8e:	13 e0       	ldi	r17, 0x03	; 3
     f90:	61 ed       	ldi	r22, 0xD1	; 209
     f92:	7d e0       	ldi	r23, 0x0D	; 13
     f94:	4c ef       	ldi	r20, 0xFC	; 252
     f96:	52 e0       	ldi	r21, 0x02	; 2
     f98:	2b ec       	ldi	r18, 0xCB	; 203
     f9a:	3e e0       	ldi	r19, 0x0E	; 14
     f9c:	82 e0       	ldi	r24, 0x02	; 2
     f9e:	92 e0       	ldi	r25, 0x02	; 2
     fa0:	c5 ec       	ldi	r28, 0xC5	; 197
     fa2:	df e0       	ldi	r29, 0x0F	; 15
     fa4:	a8 e0       	ldi	r26, 0x08	; 8
     fa6:	b1 e0       	ldi	r27, 0x01	; 1
     fa8:	0f 2e       	mov	r0, r31
     faa:	ff eb       	ldi	r31, 0xBF	; 191
     fac:	8f 2e       	mov	r8, r31
     fae:	f0 e1       	ldi	r31, 0x10	; 16
     fb0:	9f 2e       	mov	r9, r31
     fb2:	f0 2d       	mov	r31, r0
     fb4:	b1 2c       	mov	r11, r1
    
    for(unsigned char j = 0; j < 150; j++) {
     fb6:	f6 01       	movw	r30, r12
        songs[0].notes[j] = notes_zense[j];
     fb8:	41 90       	ld	r4, Z+
     fba:	51 90       	ld	r5, Z+
     fbc:	61 90       	ld	r6, Z+
     fbe:	71 90       	ld	r7, Z+
     fc0:	6f 01       	movw	r12, r30
     fc2:	f7 01       	movw	r30, r14
     fc4:	41 92       	st	Z+, r4
     fc6:	51 92       	st	Z+, r5
     fc8:	61 92       	st	Z+, r6
     fca:	71 92       	st	Z+, r7
     fcc:	7f 01       	movw	r14, r30
     fce:	f8 01       	movw	r30, r16
        songs[0].timing[j] = timing_zense[j];
     fd0:	a1 90       	ld	r10, Z+
     fd2:	8f 01       	movw	r16, r30
     fd4:	fb 01       	movw	r30, r22
     fd6:	a1 92       	st	Z+, r10
     fd8:	bf 01       	movw	r22, r30
     fda:	fa 01       	movw	r30, r20
        songs[0].rest_timing[j] = rests_zense[j];
     fdc:	a1 90       	ld	r10, Z+
     fde:	af 01       	movw	r20, r30
     fe0:	f9 01       	movw	r30, r18
     fe2:	a1 92       	st	Z+, r10
     fe4:	9f 01       	movw	r18, r30
     fe6:	fc 01       	movw	r30, r24
        songs[0].hit[j] = hit_zense[j];
     fe8:	a1 90       	ld	r10, Z+
     fea:	cf 01       	movw	r24, r30
     fec:	a9 92       	st	Y+, r10
     fee:	ad 90       	ld	r10, X+
        songs[0].timing_hit[j] = timing_hit_zense[j];
     ff0:	f4 01       	movw	r30, r8
     ff2:	a1 92       	st	Z+, r10
     ff4:	4f 01       	movw	r8, r30
     ff6:	b3 94       	inc	r11
    Shift_transmit_data(0);
    Shift_transmit_data(255);
    
    high_score = (unsigned)(char)eeprom_read_byte((uint8_t*) 1);
    
    for(unsigned char j = 0; j < 150; j++) {
     ff8:	f6 e9       	ldi	r31, 0x96	; 150
     ffa:	bf 12       	cpse	r11, r31
     ffc:	dc cf       	rjmp	.-72     	; 0xfb6 <main+0x6a>
     ffe:	e9 e8       	ldi	r30, 0x89	; 137
    
    
    //Task Code
    unsigned char tasks_increment = 0;
    
    tasks[tasks_increment].state = LFT_INIT;
    1000:	f9 e0       	ldi	r31, 0x09	; 9
    1002:	11 82       	std	Z+1, r1	; 0x01
    1004:	10 82       	st	Z, r1
    1006:	84 e1       	ldi	r24, 0x14	; 20
    tasks[tasks_increment].period = 20;
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	a0 e0       	ldi	r26, 0x00	; 0
    100c:	b0 e0       	ldi	r27, 0x00	; 0
    100e:	82 83       	std	Z+2, r24	; 0x02
    1010:	93 83       	std	Z+3, r25	; 0x03
    1012:	a4 83       	std	Z+4, r26	; 0x04
    1014:	b5 83       	std	Z+5, r27	; 0x05
    1016:	86 83       	std	Z+6, r24	; 0x06
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
    1018:	97 83       	std	Z+7, r25	; 0x07
    101a:	a0 87       	std	Z+8, r26	; 0x08
    101c:	b1 87       	std	Z+9, r27	; 0x09
    101e:	2d e7       	ldi	r18, 0x7D	; 125
    tasks[tasks_increment].TickFct = &Left_Tick;
    1020:	30 e0       	ldi	r19, 0x00	; 0
    1022:	33 87       	std	Z+11, r19	; 0x0b
    1024:	22 87       	std	Z+10, r18	; 0x0a
    1026:	15 86       	std	Z+13, r1	; 0x0d
    
    tasks_increment++;
    
    tasks[tasks_increment].state = RGHT_INIT;
    1028:	14 86       	std	Z+12, r1	; 0x0c
    102a:	86 87       	std	Z+14, r24	; 0x0e
    tasks[tasks_increment].period = 20;
    102c:	97 87       	std	Z+15, r25	; 0x0f
    102e:	a0 8b       	std	Z+16, r26	; 0x10
    1030:	b1 8b       	std	Z+17, r27	; 0x11
    1032:	82 8b       	std	Z+18, r24	; 0x12
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
    1034:	93 8b       	std	Z+19, r25	; 0x13
    1036:	a4 8b       	std	Z+20, r26	; 0x14
    1038:	b5 8b       	std	Z+21, r27	; 0x15
    103a:	20 e9       	ldi	r18, 0x90	; 144
    tasks[tasks_increment].TickFct = &Right_Tick;
    103c:	30 e0       	ldi	r19, 0x00	; 0
    103e:	37 8b       	std	Z+23, r19	; 0x17
    1040:	26 8b       	std	Z+22, r18	; 0x16
    1042:	11 8e       	std	Z+25, r1	; 0x19
    
    tasks_increment++;
    
    tasks[tasks_increment].state = UP_INIT;
    1044:	10 8e       	std	Z+24, r1	; 0x18
    1046:	82 8f       	std	Z+26, r24	; 0x1a
    tasks[tasks_increment].period = 20;
    1048:	93 8f       	std	Z+27, r25	; 0x1b
    104a:	a4 8f       	std	Z+28, r26	; 0x1c
    104c:	b5 8f       	std	Z+29, r27	; 0x1d
    104e:	86 8f       	std	Z+30, r24	; 0x1e
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
    1050:	97 8f       	std	Z+31, r25	; 0x1f
    1052:	a0 a3       	std	Z+32, r26	; 0x20
    1054:	b1 a3       	std	Z+33, r27	; 0x21
    1056:	23 ea       	ldi	r18, 0xA3	; 163
    tasks[tasks_increment].TickFct = &Up_Tick;
    1058:	30 e0       	ldi	r19, 0x00	; 0
    105a:	33 a3       	std	Z+35, r19	; 0x23
    105c:	22 a3       	std	Z+34, r18	; 0x22
    105e:	15 a2       	std	Z+37, r1	; 0x25
    
    
    tasks_increment++;
    
    tasks[tasks_increment].state = DOWN_INIT;
    1060:	14 a2       	std	Z+36, r1	; 0x24
    1062:	86 a3       	std	Z+38, r24	; 0x26
    tasks[tasks_increment].period = 20;
    1064:	97 a3       	std	Z+39, r25	; 0x27
    1066:	a0 a7       	std	Z+40, r26	; 0x28
    1068:	b1 a7       	std	Z+41, r27	; 0x29
    106a:	82 a7       	std	Z+42, r24	; 0x2a
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
    106c:	93 a7       	std	Z+43, r25	; 0x2b
    106e:	a4 a7       	std	Z+44, r26	; 0x2c
    1070:	b5 a7       	std	Z+45, r27	; 0x2d
    1072:	86 eb       	ldi	r24, 0xB6	; 182
    tasks[tasks_increment].TickFct = &Down_Tick;
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	97 a7       	std	Z+47, r25	; 0x2f
    1078:	86 a7       	std	Z+46, r24	; 0x2e
    107a:	11 aa       	std	Z+49, r1	; 0x31
    
    
    tasks_increment++;
    
    tasks[tasks_increment].state = RGB_INIT;
    107c:	10 aa       	std	Z+48, r1	; 0x30
    107e:	8a e0       	ldi	r24, 0x0A	; 10
    tasks[tasks_increment].period = 10;
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	a0 e0       	ldi	r26, 0x00	; 0
    1084:	b0 e0       	ldi	r27, 0x00	; 0
    1086:	82 ab       	std	Z+50, r24	; 0x32
    1088:	93 ab       	std	Z+51, r25	; 0x33
    108a:	a4 ab       	std	Z+52, r26	; 0x34
    108c:	b5 ab       	std	Z+53, r27	; 0x35
    108e:	86 ab       	std	Z+54, r24	; 0x36
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
    1090:	97 ab       	std	Z+55, r25	; 0x37
    1092:	a0 af       	std	Z+56, r26	; 0x38
    1094:	b1 af       	std	Z+57, r27	; 0x39
    1096:	2e e2       	ldi	r18, 0x2E	; 46
    tasks[tasks_increment].TickFct = &RGB_Matrix_Tick;
    1098:	35 e0       	ldi	r19, 0x05	; 5
    109a:	33 af       	std	Z+59, r19	; 0x3b
    109c:	22 af       	std	Z+58, r18	; 0x3a
    109e:	15 ae       	std	Z+61, r1	; 0x3d
    
    
    tasks_increment++;
    
    tasks[tasks_increment].state = LCD_Menu_Init;
    10a0:	14 ae       	std	Z+60, r1	; 0x3c
    10a2:	4e e1       	ldi	r20, 0x1E	; 30
    tasks[tasks_increment].period = 30;
    10a4:	50 e0       	ldi	r21, 0x00	; 0
    10a6:	60 e0       	ldi	r22, 0x00	; 0
    10a8:	70 e0       	ldi	r23, 0x00	; 0
    10aa:	40 93 c7 09 	sts	0x09C7, r20	; 0x8009c7 <tasks+0x3e>
    10ae:	50 93 c8 09 	sts	0x09C8, r21	; 0x8009c8 <tasks+0x3f>
    10b2:	60 93 c9 09 	sts	0x09C9, r22	; 0x8009c9 <tasks+0x40>
    10b6:	70 93 ca 09 	sts	0x09CA, r23	; 0x8009ca <tasks+0x41>
    10ba:	40 93 cb 09 	sts	0x09CB, r20	; 0x8009cb <tasks+0x42>
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
    10be:	50 93 cc 09 	sts	0x09CC, r21	; 0x8009cc <tasks+0x43>
    10c2:	60 93 cd 09 	sts	0x09CD, r22	; 0x8009cd <tasks+0x44>
    10c6:	70 93 ce 09 	sts	0x09CE, r23	; 0x8009ce <tasks+0x45>
    10ca:	21 ee       	ldi	r18, 0xE1	; 225
    tasks[tasks_increment].TickFct = &LCD_Menu_Tick;
    10cc:	31 e0       	ldi	r19, 0x01	; 1
    10ce:	30 93 d0 09 	sts	0x09D0, r19	; 0x8009d0 <tasks+0x47>
    10d2:	20 93 cf 09 	sts	0x09CF, r18	; 0x8009cf <tasks+0x46>
    10d6:	10 92 d2 09 	sts	0x09D2, r1	; 0x8009d2 <tasks+0x49>
    
    tasks_increment++;
    
    tasks[tasks_increment].state = Note_INIT;
    10da:	10 92 d1 09 	sts	0x09D1, r1	; 0x8009d1 <tasks+0x48>
    10de:	80 93 d3 09 	sts	0x09D3, r24	; 0x8009d3 <tasks+0x4a>
    tasks[tasks_increment].period = 10;
    10e2:	90 93 d4 09 	sts	0x09D4, r25	; 0x8009d4 <tasks+0x4b>
    10e6:	a0 93 d5 09 	sts	0x09D5, r26	; 0x8009d5 <tasks+0x4c>
    10ea:	b0 93 d6 09 	sts	0x09D6, r27	; 0x8009d6 <tasks+0x4d>
    10ee:	80 93 d7 09 	sts	0x09D7, r24	; 0x8009d7 <tasks+0x4e>
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
    10f2:	90 93 d8 09 	sts	0x09D8, r25	; 0x8009d8 <tasks+0x4f>
    10f6:	a0 93 d9 09 	sts	0x09D9, r26	; 0x8009d9 <tasks+0x50>
    10fa:	b0 93 da 09 	sts	0x09DA, r27	; 0x8009da <tasks+0x51>
    10fe:	8c eb       	ldi	r24, 0xBC	; 188
    tasks[tasks_increment].TickFct = &Note_Tick;
    1100:	96 e0       	ldi	r25, 0x06	; 6
    1102:	90 93 dc 09 	sts	0x09DC, r25	; 0x8009dc <tasks+0x53>
    1106:	80 93 db 09 	sts	0x09DB, r24	; 0x8009db <tasks+0x52>
    110a:	10 92 de 09 	sts	0x09DE, r1	; 0x8009de <tasks+0x55>
    
    tasks_increment++;
    
    tasks[tasks_increment].state = Player_Init;
    110e:	10 92 dd 09 	sts	0x09DD, r1	; 0x8009dd <tasks+0x54>
    1112:	85 e0       	ldi	r24, 0x05	; 5
    tasks[tasks_increment].period = 5;
    1114:	90 e0       	ldi	r25, 0x00	; 0
    1116:	a0 e0       	ldi	r26, 0x00	; 0
    1118:	b0 e0       	ldi	r27, 0x00	; 0
    111a:	80 93 df 09 	sts	0x09DF, r24	; 0x8009df <tasks+0x56>
    111e:	90 93 e0 09 	sts	0x09E0, r25	; 0x8009e0 <tasks+0x57>
    1122:	a0 93 e1 09 	sts	0x09E1, r26	; 0x8009e1 <tasks+0x58>
    1126:	b0 93 e2 09 	sts	0x09E2, r27	; 0x8009e2 <tasks+0x59>
    112a:	80 93 e3 09 	sts	0x09E3, r24	; 0x8009e3 <tasks+0x5a>
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
    112e:	90 93 e4 09 	sts	0x09E4, r25	; 0x8009e4 <tasks+0x5b>
    1132:	a0 93 e5 09 	sts	0x09E5, r26	; 0x8009e5 <tasks+0x5c>
    1136:	b0 93 e6 09 	sts	0x09E6, r27	; 0x8009e6 <tasks+0x5d>
    113a:	89 ec       	ldi	r24, 0xC9	; 201
    tasks[tasks_increment].TickFct = &Player_Tick;
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	90 93 e8 09 	sts	0x09E8, r25	; 0x8009e8 <tasks+0x5f>
    1142:	80 93 e7 09 	sts	0x09E7, r24	; 0x8009e7 <tasks+0x5e>
    
    //Timer
    TimerSet(tasksPeriodGCD);
    1146:	65 e0       	ldi	r22, 0x05	; 5
    1148:	70 e0       	ldi	r23, 0x00	; 0
    114a:	80 e0       	ldi	r24, 0x00	; 0
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	9c db       	rcall	.-2248   	; 0x888 <TimerSet>
    TimerOn();
    1150:	ac db       	rcall	.-2216   	; 0x8aa <TimerOn>
    1152:	ff cf       	rjmp	.-2      	; 0x1152 <main+0x206>

00001154 <__cmpsf2>:
    1154:	9c d0       	rcall	.+312    	; 0x128e <__fp_cmp>
    1156:	08 f4       	brcc	.+2      	; 0x115a <__cmpsf2+0x6>
    1158:	81 e0       	ldi	r24, 0x01	; 1
    115a:	08 95       	ret

0000115c <__divsf3>:
    115c:	0c d0       	rcall	.+24     	; 0x1176 <__divsf3x>
    115e:	d2 c0       	rjmp	.+420    	; 0x1304 <__fp_round>
    1160:	ca d0       	rcall	.+404    	; 0x12f6 <__fp_pscB>
    1162:	40 f0       	brcs	.+16     	; 0x1174 <__divsf3+0x18>
    1164:	c1 d0       	rcall	.+386    	; 0x12e8 <__fp_pscA>
    1166:	30 f0       	brcs	.+12     	; 0x1174 <__divsf3+0x18>
    1168:	21 f4       	brne	.+8      	; 0x1172 <__divsf3+0x16>
    116a:	5f 3f       	cpi	r21, 0xFF	; 255
    116c:	19 f0       	breq	.+6      	; 0x1174 <__divsf3+0x18>
    116e:	b3 c0       	rjmp	.+358    	; 0x12d6 <__fp_inf>
    1170:	51 11       	cpse	r21, r1
    1172:	fc c0       	rjmp	.+504    	; 0x136c <__fp_szero>
    1174:	b6 c0       	rjmp	.+364    	; 0x12e2 <__fp_nan>

00001176 <__divsf3x>:
    1176:	d7 d0       	rcall	.+430    	; 0x1326 <__fp_split3>
    1178:	98 f3       	brcs	.-26     	; 0x1160 <__divsf3+0x4>

0000117a <__divsf3_pse>:
    117a:	99 23       	and	r25, r25
    117c:	c9 f3       	breq	.-14     	; 0x1170 <__divsf3+0x14>
    117e:	55 23       	and	r21, r21
    1180:	b1 f3       	breq	.-20     	; 0x116e <__divsf3+0x12>
    1182:	95 1b       	sub	r25, r21
    1184:	55 0b       	sbc	r21, r21
    1186:	bb 27       	eor	r27, r27
    1188:	aa 27       	eor	r26, r26
    118a:	62 17       	cp	r22, r18
    118c:	73 07       	cpc	r23, r19
    118e:	84 07       	cpc	r24, r20
    1190:	38 f0       	brcs	.+14     	; 0x11a0 <__divsf3_pse+0x26>
    1192:	9f 5f       	subi	r25, 0xFF	; 255
    1194:	5f 4f       	sbci	r21, 0xFF	; 255
    1196:	22 0f       	add	r18, r18
    1198:	33 1f       	adc	r19, r19
    119a:	44 1f       	adc	r20, r20
    119c:	aa 1f       	adc	r26, r26
    119e:	a9 f3       	breq	.-22     	; 0x118a <__divsf3_pse+0x10>
    11a0:	33 d0       	rcall	.+102    	; 0x1208 <__divsf3_pse+0x8e>
    11a2:	0e 2e       	mov	r0, r30
    11a4:	3a f0       	brmi	.+14     	; 0x11b4 <__divsf3_pse+0x3a>
    11a6:	e0 e8       	ldi	r30, 0x80	; 128
    11a8:	30 d0       	rcall	.+96     	; 0x120a <__divsf3_pse+0x90>
    11aa:	91 50       	subi	r25, 0x01	; 1
    11ac:	50 40       	sbci	r21, 0x00	; 0
    11ae:	e6 95       	lsr	r30
    11b0:	00 1c       	adc	r0, r0
    11b2:	ca f7       	brpl	.-14     	; 0x11a6 <__divsf3_pse+0x2c>
    11b4:	29 d0       	rcall	.+82     	; 0x1208 <__divsf3_pse+0x8e>
    11b6:	fe 2f       	mov	r31, r30
    11b8:	27 d0       	rcall	.+78     	; 0x1208 <__divsf3_pse+0x8e>
    11ba:	66 0f       	add	r22, r22
    11bc:	77 1f       	adc	r23, r23
    11be:	88 1f       	adc	r24, r24
    11c0:	bb 1f       	adc	r27, r27
    11c2:	26 17       	cp	r18, r22
    11c4:	37 07       	cpc	r19, r23
    11c6:	48 07       	cpc	r20, r24
    11c8:	ab 07       	cpc	r26, r27
    11ca:	b0 e8       	ldi	r27, 0x80	; 128
    11cc:	09 f0       	breq	.+2      	; 0x11d0 <__divsf3_pse+0x56>
    11ce:	bb 0b       	sbc	r27, r27
    11d0:	80 2d       	mov	r24, r0
    11d2:	bf 01       	movw	r22, r30
    11d4:	ff 27       	eor	r31, r31
    11d6:	93 58       	subi	r25, 0x83	; 131
    11d8:	5f 4f       	sbci	r21, 0xFF	; 255
    11da:	2a f0       	brmi	.+10     	; 0x11e6 <__divsf3_pse+0x6c>
    11dc:	9e 3f       	cpi	r25, 0xFE	; 254
    11de:	51 05       	cpc	r21, r1
    11e0:	68 f0       	brcs	.+26     	; 0x11fc <__divsf3_pse+0x82>
    11e2:	79 c0       	rjmp	.+242    	; 0x12d6 <__fp_inf>
    11e4:	c3 c0       	rjmp	.+390    	; 0x136c <__fp_szero>
    11e6:	5f 3f       	cpi	r21, 0xFF	; 255
    11e8:	ec f3       	brlt	.-6      	; 0x11e4 <__divsf3_pse+0x6a>
    11ea:	98 3e       	cpi	r25, 0xE8	; 232
    11ec:	dc f3       	brlt	.-10     	; 0x11e4 <__divsf3_pse+0x6a>
    11ee:	86 95       	lsr	r24
    11f0:	77 95       	ror	r23
    11f2:	67 95       	ror	r22
    11f4:	b7 95       	ror	r27
    11f6:	f7 95       	ror	r31
    11f8:	9f 5f       	subi	r25, 0xFF	; 255
    11fa:	c9 f7       	brne	.-14     	; 0x11ee <__divsf3_pse+0x74>
    11fc:	88 0f       	add	r24, r24
    11fe:	91 1d       	adc	r25, r1
    1200:	96 95       	lsr	r25
    1202:	87 95       	ror	r24
    1204:	97 f9       	bld	r25, 7
    1206:	08 95       	ret
    1208:	e1 e0       	ldi	r30, 0x01	; 1
    120a:	66 0f       	add	r22, r22
    120c:	77 1f       	adc	r23, r23
    120e:	88 1f       	adc	r24, r24
    1210:	bb 1f       	adc	r27, r27
    1212:	62 17       	cp	r22, r18
    1214:	73 07       	cpc	r23, r19
    1216:	84 07       	cpc	r24, r20
    1218:	ba 07       	cpc	r27, r26
    121a:	20 f0       	brcs	.+8      	; 0x1224 <__divsf3_pse+0xaa>
    121c:	62 1b       	sub	r22, r18
    121e:	73 0b       	sbc	r23, r19
    1220:	84 0b       	sbc	r24, r20
    1222:	ba 0b       	sbc	r27, r26
    1224:	ee 1f       	adc	r30, r30
    1226:	88 f7       	brcc	.-30     	; 0x120a <__divsf3_pse+0x90>
    1228:	e0 95       	com	r30
    122a:	08 95       	ret

0000122c <__fixsfsi>:
    122c:	04 d0       	rcall	.+8      	; 0x1236 <__fixunssfsi>
    122e:	68 94       	set
    1230:	b1 11       	cpse	r27, r1
    1232:	9c c0       	rjmp	.+312    	; 0x136c <__fp_szero>
    1234:	08 95       	ret

00001236 <__fixunssfsi>:
    1236:	7f d0       	rcall	.+254    	; 0x1336 <__fp_splitA>
    1238:	88 f0       	brcs	.+34     	; 0x125c <__fixunssfsi+0x26>
    123a:	9f 57       	subi	r25, 0x7F	; 127
    123c:	90 f0       	brcs	.+36     	; 0x1262 <__fixunssfsi+0x2c>
    123e:	b9 2f       	mov	r27, r25
    1240:	99 27       	eor	r25, r25
    1242:	b7 51       	subi	r27, 0x17	; 23
    1244:	a0 f0       	brcs	.+40     	; 0x126e <__fixunssfsi+0x38>
    1246:	d1 f0       	breq	.+52     	; 0x127c <__fixunssfsi+0x46>
    1248:	66 0f       	add	r22, r22
    124a:	77 1f       	adc	r23, r23
    124c:	88 1f       	adc	r24, r24
    124e:	99 1f       	adc	r25, r25
    1250:	1a f0       	brmi	.+6      	; 0x1258 <__fixunssfsi+0x22>
    1252:	ba 95       	dec	r27
    1254:	c9 f7       	brne	.-14     	; 0x1248 <__fixunssfsi+0x12>
    1256:	12 c0       	rjmp	.+36     	; 0x127c <__fixunssfsi+0x46>
    1258:	b1 30       	cpi	r27, 0x01	; 1
    125a:	81 f0       	breq	.+32     	; 0x127c <__fixunssfsi+0x46>
    125c:	86 d0       	rcall	.+268    	; 0x136a <__fp_zero>
    125e:	b1 e0       	ldi	r27, 0x01	; 1
    1260:	08 95       	ret
    1262:	83 c0       	rjmp	.+262    	; 0x136a <__fp_zero>
    1264:	67 2f       	mov	r22, r23
    1266:	78 2f       	mov	r23, r24
    1268:	88 27       	eor	r24, r24
    126a:	b8 5f       	subi	r27, 0xF8	; 248
    126c:	39 f0       	breq	.+14     	; 0x127c <__fixunssfsi+0x46>
    126e:	b9 3f       	cpi	r27, 0xF9	; 249
    1270:	cc f3       	brlt	.-14     	; 0x1264 <__fixunssfsi+0x2e>
    1272:	86 95       	lsr	r24
    1274:	77 95       	ror	r23
    1276:	67 95       	ror	r22
    1278:	b3 95       	inc	r27
    127a:	d9 f7       	brne	.-10     	; 0x1272 <__fixunssfsi+0x3c>
    127c:	3e f4       	brtc	.+14     	; 0x128c <__fixunssfsi+0x56>
    127e:	90 95       	com	r25
    1280:	80 95       	com	r24
    1282:	70 95       	com	r23
    1284:	61 95       	neg	r22
    1286:	7f 4f       	sbci	r23, 0xFF	; 255
    1288:	8f 4f       	sbci	r24, 0xFF	; 255
    128a:	9f 4f       	sbci	r25, 0xFF	; 255
    128c:	08 95       	ret

0000128e <__fp_cmp>:
    128e:	99 0f       	add	r25, r25
    1290:	00 08       	sbc	r0, r0
    1292:	55 0f       	add	r21, r21
    1294:	aa 0b       	sbc	r26, r26
    1296:	e0 e8       	ldi	r30, 0x80	; 128
    1298:	fe ef       	ldi	r31, 0xFE	; 254
    129a:	16 16       	cp	r1, r22
    129c:	17 06       	cpc	r1, r23
    129e:	e8 07       	cpc	r30, r24
    12a0:	f9 07       	cpc	r31, r25
    12a2:	c0 f0       	brcs	.+48     	; 0x12d4 <__fp_cmp+0x46>
    12a4:	12 16       	cp	r1, r18
    12a6:	13 06       	cpc	r1, r19
    12a8:	e4 07       	cpc	r30, r20
    12aa:	f5 07       	cpc	r31, r21
    12ac:	98 f0       	brcs	.+38     	; 0x12d4 <__fp_cmp+0x46>
    12ae:	62 1b       	sub	r22, r18
    12b0:	73 0b       	sbc	r23, r19
    12b2:	84 0b       	sbc	r24, r20
    12b4:	95 0b       	sbc	r25, r21
    12b6:	39 f4       	brne	.+14     	; 0x12c6 <__fp_cmp+0x38>
    12b8:	0a 26       	eor	r0, r26
    12ba:	61 f0       	breq	.+24     	; 0x12d4 <__fp_cmp+0x46>
    12bc:	23 2b       	or	r18, r19
    12be:	24 2b       	or	r18, r20
    12c0:	25 2b       	or	r18, r21
    12c2:	21 f4       	brne	.+8      	; 0x12cc <__fp_cmp+0x3e>
    12c4:	08 95       	ret
    12c6:	0a 26       	eor	r0, r26
    12c8:	09 f4       	brne	.+2      	; 0x12cc <__fp_cmp+0x3e>
    12ca:	a1 40       	sbci	r26, 0x01	; 1
    12cc:	a6 95       	lsr	r26
    12ce:	8f ef       	ldi	r24, 0xFF	; 255
    12d0:	81 1d       	adc	r24, r1
    12d2:	81 1d       	adc	r24, r1
    12d4:	08 95       	ret

000012d6 <__fp_inf>:
    12d6:	97 f9       	bld	r25, 7
    12d8:	9f 67       	ori	r25, 0x7F	; 127
    12da:	80 e8       	ldi	r24, 0x80	; 128
    12dc:	70 e0       	ldi	r23, 0x00	; 0
    12de:	60 e0       	ldi	r22, 0x00	; 0
    12e0:	08 95       	ret

000012e2 <__fp_nan>:
    12e2:	9f ef       	ldi	r25, 0xFF	; 255
    12e4:	80 ec       	ldi	r24, 0xC0	; 192
    12e6:	08 95       	ret

000012e8 <__fp_pscA>:
    12e8:	00 24       	eor	r0, r0
    12ea:	0a 94       	dec	r0
    12ec:	16 16       	cp	r1, r22
    12ee:	17 06       	cpc	r1, r23
    12f0:	18 06       	cpc	r1, r24
    12f2:	09 06       	cpc	r0, r25
    12f4:	08 95       	ret

000012f6 <__fp_pscB>:
    12f6:	00 24       	eor	r0, r0
    12f8:	0a 94       	dec	r0
    12fa:	12 16       	cp	r1, r18
    12fc:	13 06       	cpc	r1, r19
    12fe:	14 06       	cpc	r1, r20
    1300:	05 06       	cpc	r0, r21
    1302:	08 95       	ret

00001304 <__fp_round>:
    1304:	09 2e       	mov	r0, r25
    1306:	03 94       	inc	r0
    1308:	00 0c       	add	r0, r0
    130a:	11 f4       	brne	.+4      	; 0x1310 <__fp_round+0xc>
    130c:	88 23       	and	r24, r24
    130e:	52 f0       	brmi	.+20     	; 0x1324 <__fp_round+0x20>
    1310:	bb 0f       	add	r27, r27
    1312:	40 f4       	brcc	.+16     	; 0x1324 <__fp_round+0x20>
    1314:	bf 2b       	or	r27, r31
    1316:	11 f4       	brne	.+4      	; 0x131c <__fp_round+0x18>
    1318:	60 ff       	sbrs	r22, 0
    131a:	04 c0       	rjmp	.+8      	; 0x1324 <__fp_round+0x20>
    131c:	6f 5f       	subi	r22, 0xFF	; 255
    131e:	7f 4f       	sbci	r23, 0xFF	; 255
    1320:	8f 4f       	sbci	r24, 0xFF	; 255
    1322:	9f 4f       	sbci	r25, 0xFF	; 255
    1324:	08 95       	ret

00001326 <__fp_split3>:
    1326:	57 fd       	sbrc	r21, 7
    1328:	90 58       	subi	r25, 0x80	; 128
    132a:	44 0f       	add	r20, r20
    132c:	55 1f       	adc	r21, r21
    132e:	59 f0       	breq	.+22     	; 0x1346 <__fp_splitA+0x10>
    1330:	5f 3f       	cpi	r21, 0xFF	; 255
    1332:	71 f0       	breq	.+28     	; 0x1350 <__fp_splitA+0x1a>
    1334:	47 95       	ror	r20

00001336 <__fp_splitA>:
    1336:	88 0f       	add	r24, r24
    1338:	97 fb       	bst	r25, 7
    133a:	99 1f       	adc	r25, r25
    133c:	61 f0       	breq	.+24     	; 0x1356 <__fp_splitA+0x20>
    133e:	9f 3f       	cpi	r25, 0xFF	; 255
    1340:	79 f0       	breq	.+30     	; 0x1360 <__fp_splitA+0x2a>
    1342:	87 95       	ror	r24
    1344:	08 95       	ret
    1346:	12 16       	cp	r1, r18
    1348:	13 06       	cpc	r1, r19
    134a:	14 06       	cpc	r1, r20
    134c:	55 1f       	adc	r21, r21
    134e:	f2 cf       	rjmp	.-28     	; 0x1334 <__fp_split3+0xe>
    1350:	46 95       	lsr	r20
    1352:	f1 df       	rcall	.-30     	; 0x1336 <__fp_splitA>
    1354:	08 c0       	rjmp	.+16     	; 0x1366 <__fp_splitA+0x30>
    1356:	16 16       	cp	r1, r22
    1358:	17 06       	cpc	r1, r23
    135a:	18 06       	cpc	r1, r24
    135c:	99 1f       	adc	r25, r25
    135e:	f1 cf       	rjmp	.-30     	; 0x1342 <__fp_splitA+0xc>
    1360:	86 95       	lsr	r24
    1362:	71 05       	cpc	r23, r1
    1364:	61 05       	cpc	r22, r1
    1366:	08 94       	sec
    1368:	08 95       	ret

0000136a <__fp_zero>:
    136a:	e8 94       	clt

0000136c <__fp_szero>:
    136c:	bb 27       	eor	r27, r27
    136e:	66 27       	eor	r22, r22
    1370:	77 27       	eor	r23, r23
    1372:	cb 01       	movw	r24, r22
    1374:	97 f9       	bld	r25, 7
    1376:	08 95       	ret

00001378 <__gesf2>:
    1378:	8a df       	rcall	.-236    	; 0x128e <__fp_cmp>
    137a:	08 f4       	brcc	.+2      	; 0x137e <__gesf2+0x6>
    137c:	8f ef       	ldi	r24, 0xFF	; 255
    137e:	08 95       	ret

00001380 <__mulsf3>:
    1380:	0b d0       	rcall	.+22     	; 0x1398 <__mulsf3x>
    1382:	c0 cf       	rjmp	.-128    	; 0x1304 <__fp_round>
    1384:	b1 df       	rcall	.-158    	; 0x12e8 <__fp_pscA>
    1386:	28 f0       	brcs	.+10     	; 0x1392 <__mulsf3+0x12>
    1388:	b6 df       	rcall	.-148    	; 0x12f6 <__fp_pscB>
    138a:	18 f0       	brcs	.+6      	; 0x1392 <__mulsf3+0x12>
    138c:	95 23       	and	r25, r21
    138e:	09 f0       	breq	.+2      	; 0x1392 <__mulsf3+0x12>
    1390:	a2 cf       	rjmp	.-188    	; 0x12d6 <__fp_inf>
    1392:	a7 cf       	rjmp	.-178    	; 0x12e2 <__fp_nan>
    1394:	11 24       	eor	r1, r1
    1396:	ea cf       	rjmp	.-44     	; 0x136c <__fp_szero>

00001398 <__mulsf3x>:
    1398:	c6 df       	rcall	.-116    	; 0x1326 <__fp_split3>
    139a:	a0 f3       	brcs	.-24     	; 0x1384 <__mulsf3+0x4>

0000139c <__mulsf3_pse>:
    139c:	95 9f       	mul	r25, r21
    139e:	d1 f3       	breq	.-12     	; 0x1394 <__mulsf3+0x14>
    13a0:	95 0f       	add	r25, r21
    13a2:	50 e0       	ldi	r21, 0x00	; 0
    13a4:	55 1f       	adc	r21, r21
    13a6:	62 9f       	mul	r22, r18
    13a8:	f0 01       	movw	r30, r0
    13aa:	72 9f       	mul	r23, r18
    13ac:	bb 27       	eor	r27, r27
    13ae:	f0 0d       	add	r31, r0
    13b0:	b1 1d       	adc	r27, r1
    13b2:	63 9f       	mul	r22, r19
    13b4:	aa 27       	eor	r26, r26
    13b6:	f0 0d       	add	r31, r0
    13b8:	b1 1d       	adc	r27, r1
    13ba:	aa 1f       	adc	r26, r26
    13bc:	64 9f       	mul	r22, r20
    13be:	66 27       	eor	r22, r22
    13c0:	b0 0d       	add	r27, r0
    13c2:	a1 1d       	adc	r26, r1
    13c4:	66 1f       	adc	r22, r22
    13c6:	82 9f       	mul	r24, r18
    13c8:	22 27       	eor	r18, r18
    13ca:	b0 0d       	add	r27, r0
    13cc:	a1 1d       	adc	r26, r1
    13ce:	62 1f       	adc	r22, r18
    13d0:	73 9f       	mul	r23, r19
    13d2:	b0 0d       	add	r27, r0
    13d4:	a1 1d       	adc	r26, r1
    13d6:	62 1f       	adc	r22, r18
    13d8:	83 9f       	mul	r24, r19
    13da:	a0 0d       	add	r26, r0
    13dc:	61 1d       	adc	r22, r1
    13de:	22 1f       	adc	r18, r18
    13e0:	74 9f       	mul	r23, r20
    13e2:	33 27       	eor	r19, r19
    13e4:	a0 0d       	add	r26, r0
    13e6:	61 1d       	adc	r22, r1
    13e8:	23 1f       	adc	r18, r19
    13ea:	84 9f       	mul	r24, r20
    13ec:	60 0d       	add	r22, r0
    13ee:	21 1d       	adc	r18, r1
    13f0:	82 2f       	mov	r24, r18
    13f2:	76 2f       	mov	r23, r22
    13f4:	6a 2f       	mov	r22, r26
    13f6:	11 24       	eor	r1, r1
    13f8:	9f 57       	subi	r25, 0x7F	; 127
    13fa:	50 40       	sbci	r21, 0x00	; 0
    13fc:	8a f0       	brmi	.+34     	; 0x1420 <__mulsf3_pse+0x84>
    13fe:	e1 f0       	breq	.+56     	; 0x1438 <__mulsf3_pse+0x9c>
    1400:	88 23       	and	r24, r24
    1402:	4a f0       	brmi	.+18     	; 0x1416 <__mulsf3_pse+0x7a>
    1404:	ee 0f       	add	r30, r30
    1406:	ff 1f       	adc	r31, r31
    1408:	bb 1f       	adc	r27, r27
    140a:	66 1f       	adc	r22, r22
    140c:	77 1f       	adc	r23, r23
    140e:	88 1f       	adc	r24, r24
    1410:	91 50       	subi	r25, 0x01	; 1
    1412:	50 40       	sbci	r21, 0x00	; 0
    1414:	a9 f7       	brne	.-22     	; 0x1400 <__mulsf3_pse+0x64>
    1416:	9e 3f       	cpi	r25, 0xFE	; 254
    1418:	51 05       	cpc	r21, r1
    141a:	70 f0       	brcs	.+28     	; 0x1438 <__mulsf3_pse+0x9c>
    141c:	5c cf       	rjmp	.-328    	; 0x12d6 <__fp_inf>
    141e:	a6 cf       	rjmp	.-180    	; 0x136c <__fp_szero>
    1420:	5f 3f       	cpi	r21, 0xFF	; 255
    1422:	ec f3       	brlt	.-6      	; 0x141e <__mulsf3_pse+0x82>
    1424:	98 3e       	cpi	r25, 0xE8	; 232
    1426:	dc f3       	brlt	.-10     	; 0x141e <__mulsf3_pse+0x82>
    1428:	86 95       	lsr	r24
    142a:	77 95       	ror	r23
    142c:	67 95       	ror	r22
    142e:	b7 95       	ror	r27
    1430:	f7 95       	ror	r31
    1432:	e7 95       	ror	r30
    1434:	9f 5f       	subi	r25, 0xFF	; 255
    1436:	c1 f7       	brne	.-16     	; 0x1428 <__mulsf3_pse+0x8c>
    1438:	fe 2b       	or	r31, r30
    143a:	88 0f       	add	r24, r24
    143c:	91 1d       	adc	r25, r1
    143e:	96 95       	lsr	r25
    1440:	87 95       	ror	r24
    1442:	97 f9       	bld	r25, 7
    1444:	08 95       	ret

00001446 <__tablejump2__>:
    1446:	ee 0f       	add	r30, r30
    1448:	ff 1f       	adc	r31, r31
    144a:	00 24       	eor	r0, r0
    144c:	00 1c       	adc	r0, r0
    144e:	0b be       	out	0x3b, r0	; 59
    1450:	07 90       	elpm	r0, Z+
    1452:	f6 91       	elpm	r31, Z
    1454:	e0 2d       	mov	r30, r0
    1456:	09 94       	ijmp

00001458 <eeprom_read_byte>:
    1458:	f9 99       	sbic	0x1f, 1	; 31
    145a:	fe cf       	rjmp	.-4      	; 0x1458 <eeprom_read_byte>
    145c:	92 bd       	out	0x22, r25	; 34
    145e:	81 bd       	out	0x21, r24	; 33
    1460:	f8 9a       	sbi	0x1f, 0	; 31
    1462:	99 27       	eor	r25, r25
    1464:	80 b5       	in	r24, 0x20	; 32
    1466:	08 95       	ret

00001468 <eeprom_update_byte>:
    1468:	26 2f       	mov	r18, r22

0000146a <eeprom_update_r18>:
    146a:	f9 99       	sbic	0x1f, 1	; 31
    146c:	fe cf       	rjmp	.-4      	; 0x146a <eeprom_update_r18>
    146e:	92 bd       	out	0x22, r25	; 34
    1470:	81 bd       	out	0x21, r24	; 33
    1472:	f8 9a       	sbi	0x1f, 0	; 31
    1474:	01 97       	sbiw	r24, 0x01	; 1
    1476:	00 b4       	in	r0, 0x20	; 32
    1478:	02 16       	cp	r0, r18
    147a:	39 f0       	breq	.+14     	; 0x148a <eeprom_update_r18+0x20>
    147c:	1f ba       	out	0x1f, r1	; 31
    147e:	20 bd       	out	0x20, r18	; 32
    1480:	0f b6       	in	r0, 0x3f	; 63
    1482:	f8 94       	cli
    1484:	fa 9a       	sbi	0x1f, 2	; 31
    1486:	f9 9a       	sbi	0x1f, 1	; 31
    1488:	0f be       	out	0x3f, r0	; 63
    148a:	08 95       	ret

0000148c <_exit>:
    148c:	f8 94       	cli

0000148e <__stop_program>:
    148e:	ff cf       	rjmp	.-2      	; 0x148e <__stop_program>
