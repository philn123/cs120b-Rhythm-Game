
Rhythm_Game_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000004ae  00800100  0000153a  000015ce  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000153a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000049f  008005ae  008005ae  00001a7c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001a7c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001aac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00001af0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001cd8  00000000  00000000  00001c68  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aed  00000000  00000000  00003940  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001287  00000000  00000000  0000442d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000035c  00000000  00000000  000056b4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000956  00000000  00000000  00005a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e46  00000000  00000000  00006366  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  000071ac  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	50 c0       	rjmp	.+160    	; 0xa2 <__ctors_end>
       2:	00 00       	nop
       4:	6c c0       	rjmp	.+216    	; 0xde <__bad_interrupt>
       6:	00 00       	nop
       8:	6a c0       	rjmp	.+212    	; 0xde <__bad_interrupt>
       a:	00 00       	nop
       c:	68 c0       	rjmp	.+208    	; 0xde <__bad_interrupt>
       e:	00 00       	nop
      10:	66 c0       	rjmp	.+204    	; 0xde <__bad_interrupt>
      12:	00 00       	nop
      14:	64 c0       	rjmp	.+200    	; 0xde <__bad_interrupt>
      16:	00 00       	nop
      18:	62 c0       	rjmp	.+196    	; 0xde <__bad_interrupt>
      1a:	00 00       	nop
      1c:	60 c0       	rjmp	.+192    	; 0xde <__bad_interrupt>
      1e:	00 00       	nop
      20:	5e c0       	rjmp	.+188    	; 0xde <__bad_interrupt>
      22:	00 00       	nop
      24:	5c c0       	rjmp	.+184    	; 0xde <__bad_interrupt>
      26:	00 00       	nop
      28:	5a c0       	rjmp	.+180    	; 0xde <__bad_interrupt>
      2a:	00 00       	nop
      2c:	58 c0       	rjmp	.+176    	; 0xde <__bad_interrupt>
      2e:	00 00       	nop
      30:	56 c0       	rjmp	.+172    	; 0xde <__bad_interrupt>
      32:	00 00       	nop
      34:	2f c5       	rjmp	.+2654   	; 0xa94 <__vector_13>
      36:	00 00       	nop
      38:	52 c0       	rjmp	.+164    	; 0xde <__bad_interrupt>
      3a:	00 00       	nop
      3c:	50 c0       	rjmp	.+160    	; 0xde <__bad_interrupt>
      3e:	00 00       	nop
      40:	4e c0       	rjmp	.+156    	; 0xde <__bad_interrupt>
      42:	00 00       	nop
      44:	4c c0       	rjmp	.+152    	; 0xde <__bad_interrupt>
      46:	00 00       	nop
      48:	4a c0       	rjmp	.+148    	; 0xde <__bad_interrupt>
      4a:	00 00       	nop
      4c:	48 c0       	rjmp	.+144    	; 0xde <__bad_interrupt>
      4e:	00 00       	nop
      50:	46 c0       	rjmp	.+140    	; 0xde <__bad_interrupt>
      52:	00 00       	nop
      54:	44 c0       	rjmp	.+136    	; 0xde <__bad_interrupt>
      56:	00 00       	nop
      58:	42 c0       	rjmp	.+132    	; 0xde <__bad_interrupt>
      5a:	00 00       	nop
      5c:	40 c0       	rjmp	.+128    	; 0xde <__bad_interrupt>
      5e:	00 00       	nop
      60:	3e c0       	rjmp	.+124    	; 0xde <__bad_interrupt>
      62:	00 00       	nop
      64:	3c c0       	rjmp	.+120    	; 0xde <__bad_interrupt>
      66:	00 00       	nop
      68:	3a c0       	rjmp	.+116    	; 0xde <__bad_interrupt>
      6a:	00 00       	nop
      6c:	38 c0       	rjmp	.+112    	; 0xde <__bad_interrupt>
      6e:	00 00       	nop
      70:	36 c0       	rjmp	.+108    	; 0xde <__bad_interrupt>
      72:	00 00       	nop
      74:	34 c0       	rjmp	.+104    	; 0xde <__bad_interrupt>
      76:	00 00       	nop
      78:	32 c0       	rjmp	.+100    	; 0xde <__bad_interrupt>
      7a:	00 00       	nop
      7c:	30 c0       	rjmp	.+96     	; 0xde <__bad_interrupt>
      7e:	00 00       	nop
      80:	2e c0       	rjmp	.+92     	; 0xde <__bad_interrupt>
      82:	00 00       	nop
      84:	2c c0       	rjmp	.+88     	; 0xde <__bad_interrupt>
      86:	00 00       	nop
      88:	2a c0       	rjmp	.+84     	; 0xde <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f0 02       	muls	r31, r16
      8e:	d6 01       	movw	r26, r12
      90:	ef 01       	movw	r28, r30
      92:	01 02       	muls	r16, r17
      94:	4d 02       	muls	r20, r29
      96:	5f 02       	muls	r21, r31
      98:	86 02       	muls	r24, r22
      9a:	99 02       	muls	r25, r25
      9c:	a7 02       	muls	r26, r23
      9e:	b1 02       	muls	r27, r17
      a0:	c9 02       	muls	r28, r25

000000a2 <__ctors_end>:
      a2:	11 24       	eor	r1, r1
      a4:	1f be       	out	0x3f, r1	; 63
      a6:	cf ef       	ldi	r28, 0xFF	; 255
      a8:	d0 e4       	ldi	r29, 0x40	; 64
      aa:	de bf       	out	0x3e, r29	; 62
      ac:	cd bf       	out	0x3d, r28	; 61

000000ae <__do_copy_data>:
      ae:	15 e0       	ldi	r17, 0x05	; 5
      b0:	a0 e0       	ldi	r26, 0x00	; 0
      b2:	b1 e0       	ldi	r27, 0x01	; 1
      b4:	ea e3       	ldi	r30, 0x3A	; 58
      b6:	f5 e1       	ldi	r31, 0x15	; 21
      b8:	00 e0       	ldi	r16, 0x00	; 0
      ba:	0b bf       	out	0x3b, r16	; 59
      bc:	02 c0       	rjmp	.+4      	; 0xc2 <__do_copy_data+0x14>
      be:	07 90       	elpm	r0, Z+
      c0:	0d 92       	st	X+, r0
      c2:	ae 3a       	cpi	r26, 0xAE	; 174
      c4:	b1 07       	cpc	r27, r17
      c6:	d9 f7       	brne	.-10     	; 0xbe <__do_copy_data+0x10>

000000c8 <__do_clear_bss>:
      c8:	2a e0       	ldi	r18, 0x0A	; 10
      ca:	ae ea       	ldi	r26, 0xAE	; 174
      cc:	b5 e0       	ldi	r27, 0x05	; 5
      ce:	01 c0       	rjmp	.+2      	; 0xd2 <.do_clear_bss_start>

000000d0 <.do_clear_bss_loop>:
      d0:	1d 92       	st	X+, r1

000000d2 <.do_clear_bss_start>:
      d2:	ad 34       	cpi	r26, 0x4D	; 77
      d4:	b2 07       	cpc	r27, r18
      d6:	e1 f7       	brne	.-8      	; 0xd0 <.do_clear_bss_loop>
      d8:	78 d7       	rcall	.+3824   	; 0xfca <main>
      da:	0c 94 9b 0a 	jmp	0x1536	; 0x1536 <_exit>

000000de <__bad_interrupt>:
      de:	90 cf       	rjmp	.-224    	; 0x0 <__vectors>

000000e0 <Left_Tick>:
unsigned char Set_Bit(unsigned char output, unsigned char in){
    return (output | (1 << in));   
}
unsigned char Clear_Bit(unsigned char output, unsigned char in){
    return (output & ~(1 << in));
} 
      e0:	82 30       	cpi	r24, 0x02	; 2
      e2:	91 05       	cpc	r25, r1
      e4:	18 f0       	brcs	.+6      	; 0xec <Left_Tick+0xc>
      e6:	81 30       	cpi	r24, 0x01	; 1
      e8:	91 05       	cpc	r25, r1
      ea:	61 f4       	brne	.+24     	; 0x104 <Left_Tick+0x24>
      ec:	03 99       	sbic	0x00, 3	; 0
      ee:	06 c0       	rjmp	.+12     	; 0xfc <Left_Tick+0x1c>
      f0:	81 e0       	ldi	r24, 0x01	; 1
      f2:	80 93 cb 05 	sts	0x05CB, r24	; 0x8005cb <LEFT>
      f6:	81 e0       	ldi	r24, 0x01	; 1
      f8:	90 e0       	ldi	r25, 0x00	; 0
      fa:	08 95       	ret
      fc:	10 92 cb 05 	sts	0x05CB, r1	; 0x8005cb <LEFT>
     100:	81 e0       	ldi	r24, 0x01	; 1
     102:	90 e0       	ldi	r25, 0x00	; 0
     104:	08 95       	ret

00000106 <Right_Tick>:
     106:	82 30       	cpi	r24, 0x02	; 2
     108:	91 05       	cpc	r25, r1
     10a:	18 f0       	brcs	.+6      	; 0x112 <Right_Tick+0xc>
     10c:	81 30       	cpi	r24, 0x01	; 1
     10e:	91 05       	cpc	r25, r1
     110:	61 f4       	brne	.+24     	; 0x12a <Right_Tick+0x24>
     112:	00 99       	sbic	0x00, 0	; 0
     114:	06 c0       	rjmp	.+12     	; 0x122 <Right_Tick+0x1c>
     116:	81 e0       	ldi	r24, 0x01	; 1
     118:	80 93 ca 05 	sts	0x05CA, r24	; 0x8005ca <RIGHT>
     11c:	81 e0       	ldi	r24, 0x01	; 1
     11e:	90 e0       	ldi	r25, 0x00	; 0
     120:	08 95       	ret
     122:	10 92 ca 05 	sts	0x05CA, r1	; 0x8005ca <RIGHT>
     126:	81 e0       	ldi	r24, 0x01	; 1
     128:	90 e0       	ldi	r25, 0x00	; 0
     12a:	08 95       	ret

0000012c <Up_Tick>:
     12c:	82 30       	cpi	r24, 0x02	; 2
     12e:	91 05       	cpc	r25, r1
     130:	18 f0       	brcs	.+6      	; 0x138 <Up_Tick+0xc>
     132:	81 30       	cpi	r24, 0x01	; 1
     134:	91 05       	cpc	r25, r1
     136:	61 f4       	brne	.+24     	; 0x150 <Up_Tick+0x24>
     138:	01 99       	sbic	0x00, 1	; 0
     13a:	06 c0       	rjmp	.+12     	; 0x148 <Up_Tick+0x1c>
     13c:	81 e0       	ldi	r24, 0x01	; 1
     13e:	80 93 c9 05 	sts	0x05C9, r24	; 0x8005c9 <UP>
     142:	81 e0       	ldi	r24, 0x01	; 1
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	08 95       	ret
     148:	10 92 c9 05 	sts	0x05C9, r1	; 0x8005c9 <UP>
     14c:	81 e0       	ldi	r24, 0x01	; 1
     14e:	90 e0       	ldi	r25, 0x00	; 0
     150:	08 95       	ret

00000152 <Down_Tick>:
     152:	82 30       	cpi	r24, 0x02	; 2
     154:	91 05       	cpc	r25, r1
     156:	18 f0       	brcs	.+6      	; 0x15e <Down_Tick+0xc>
     158:	81 30       	cpi	r24, 0x01	; 1
     15a:	91 05       	cpc	r25, r1
     15c:	61 f4       	brne	.+24     	; 0x176 <Down_Tick+0x24>
     15e:	02 99       	sbic	0x00, 2	; 0
     160:	06 c0       	rjmp	.+12     	; 0x16e <Down_Tick+0x1c>
     162:	81 e0       	ldi	r24, 0x01	; 1
     164:	80 93 c8 05 	sts	0x05C8, r24	; 0x8005c8 <DOWN>
     168:	81 e0       	ldi	r24, 0x01	; 1
     16a:	90 e0       	ldi	r25, 0x00	; 0
     16c:	08 95       	ret
     16e:	10 92 c8 05 	sts	0x05C8, r1	; 0x8005c8 <DOWN>
     172:	81 e0       	ldi	r24, 0x01	; 1
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	08 95       	ret

00000178 <Player_Tick>:
     178:	82 30       	cpi	r24, 0x02	; 2
     17a:	91 05       	cpc	r25, r1
     17c:	18 f0       	brcs	.+6      	; 0x184 <Player_Tick+0xc>
     17e:	01 97       	sbiw	r24, 0x01	; 1
     180:	09 f0       	breq	.+2      	; 0x184 <Player_Tick+0xc>
     182:	43 c0       	rjmp	.+134    	; 0x20a <Player_Tick+0x92>
     184:	80 91 cb 05 	lds	r24, 0x05CB	; 0x8005cb <LEFT>
     188:	88 23       	and	r24, r24
     18a:	81 f0       	breq	.+32     	; 0x1ac <Player_Tick+0x34>
     18c:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <RIGHT>
     190:	81 11       	cpse	r24, r1
     192:	30 c0       	rjmp	.+96     	; 0x1f4 <Player_Tick+0x7c>
     194:	80 91 c9 05 	lds	r24, 0x05C9	; 0x8005c9 <UP>
     198:	81 11       	cpse	r24, r1
     19a:	2c c0       	rjmp	.+88     	; 0x1f4 <Player_Tick+0x7c>
     19c:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <DOWN>
     1a0:	81 11       	cpse	r24, r1
     1a2:	28 c0       	rjmp	.+80     	; 0x1f4 <Player_Tick+0x7c>
     1a4:	88 e0       	ldi	r24, 0x08	; 8
     1a6:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <player_button_press>
     1aa:	2f c0       	rjmp	.+94     	; 0x20a <Player_Tick+0x92>
     1ac:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <RIGHT>
     1b0:	81 11       	cpse	r24, r1
     1b2:	28 c0       	rjmp	.+80     	; 0x204 <Player_Tick+0x8c>
     1b4:	80 91 c9 05 	lds	r24, 0x05C9	; 0x8005c9 <UP>
     1b8:	81 11       	cpse	r24, r1
     1ba:	1f c0       	rjmp	.+62     	; 0x1fa <Player_Tick+0x82>
     1bc:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <DOWN>
     1c0:	88 23       	and	r24, r24
     1c2:	d9 f0       	breq	.+54     	; 0x1fa <Player_Tick+0x82>
     1c4:	84 e0       	ldi	r24, 0x04	; 4
     1c6:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <player_button_press>
     1ca:	1f c0       	rjmp	.+62     	; 0x20a <Player_Tick+0x92>
     1cc:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <DOWN>
     1d0:	81 11       	cpse	r24, r1
     1d2:	10 c0       	rjmp	.+32     	; 0x1f4 <Player_Tick+0x7c>
     1d4:	82 e0       	ldi	r24, 0x02	; 2
     1d6:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <player_button_press>
     1da:	17 c0       	rjmp	.+46     	; 0x20a <Player_Tick+0x92>
     1dc:	80 91 c9 05 	lds	r24, 0x05C9	; 0x8005c9 <UP>
     1e0:	81 11       	cpse	r24, r1
     1e2:	08 c0       	rjmp	.+16     	; 0x1f4 <Player_Tick+0x7c>
     1e4:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <DOWN>
     1e8:	81 11       	cpse	r24, r1
     1ea:	04 c0       	rjmp	.+8      	; 0x1f4 <Player_Tick+0x7c>
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	80 93 c5 05 	sts	0x05C5, r24	; 0x8005c5 <player_button_press>
     1f2:	0b c0       	rjmp	.+22     	; 0x20a <Player_Tick+0x92>
     1f4:	10 92 c5 05 	sts	0x05C5, r1	; 0x8005c5 <player_button_press>
     1f8:	08 c0       	rjmp	.+16     	; 0x20a <Player_Tick+0x92>
     1fa:	80 91 c9 05 	lds	r24, 0x05C9	; 0x8005c9 <UP>
     1fe:	81 11       	cpse	r24, r1
     200:	e5 cf       	rjmp	.-54     	; 0x1cc <Player_Tick+0x54>
     202:	f8 cf       	rjmp	.-16     	; 0x1f4 <Player_Tick+0x7c>
     204:	81 11       	cpse	r24, r1
     206:	ea cf       	rjmp	.-44     	; 0x1dc <Player_Tick+0x64>
     208:	f5 cf       	rjmp	.-22     	; 0x1f4 <Player_Tick+0x7c>
     20a:	80 e0       	ldi	r24, 0x00	; 0
     20c:	90 e0       	ldi	r25, 0x00	; 0
     20e:	08 95       	ret

00000210 <delay_ms>:
     210:	18 16       	cp	r1, r24
     212:	19 06       	cpc	r1, r25
     214:	5c f0       	brlt	.+22     	; 0x22c <delay_ms+0x1c>
     216:	08 95       	ret
     218:	00 00       	nop
     21a:	21 50       	subi	r18, 0x01	; 1
     21c:	31 09       	sbc	r19, r1
     21e:	e1 f7       	brne	.-8      	; 0x218 <delay_ms+0x8>
     220:	4f 5f       	subi	r20, 0xFF	; 255
     222:	5f 4f       	sbci	r21, 0xFF	; 255
     224:	84 17       	cp	r24, r20
     226:	95 07       	cpc	r25, r21
     228:	19 f4       	brne	.+6      	; 0x230 <delay_ms+0x20>
     22a:	08 95       	ret
     22c:	40 e0       	ldi	r20, 0x00	; 0
     22e:	50 e0       	ldi	r21, 0x00	; 0
     230:	27 e0       	ldi	r18, 0x07	; 7
     232:	33 e0       	ldi	r19, 0x03	; 3
     234:	f1 cf       	rjmp	.-30     	; 0x218 <delay_ms+0x8>

00000236 <LCD_WriteCommand>:
     236:	28 98       	cbi	0x05, 0	; 5
     238:	8b b9       	out	0x0b, r24	; 11
     23a:	29 9a       	sbi	0x05, 1	; 5
     23c:	00 00       	nop
     23e:	29 98       	cbi	0x05, 1	; 5
     240:	82 e0       	ldi	r24, 0x02	; 2
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	e5 cf       	rjmp	.-54     	; 0x210 <delay_ms>
     246:	08 95       	ret

00000248 <LCD_ClearScreen>:
     248:	81 e0       	ldi	r24, 0x01	; 1
     24a:	f5 cf       	rjmp	.-22     	; 0x236 <LCD_WriteCommand>
     24c:	08 95       	ret

0000024e <LCD_Cursor>:
     24e:	81 31       	cpi	r24, 0x11	; 17
     250:	18 f4       	brcc	.+6      	; 0x258 <LCD_Cursor+0xa>
     252:	81 58       	subi	r24, 0x81	; 129
     254:	f0 cf       	rjmp	.-32     	; 0x236 <LCD_WriteCommand>
     256:	08 95       	ret
     258:	81 55       	subi	r24, 0x51	; 81
     25a:	ed cf       	rjmp	.-38     	; 0x236 <LCD_WriteCommand>
     25c:	08 95       	ret

0000025e <LCD_WriteData>:
     25e:	28 9a       	sbi	0x05, 0	; 5
     260:	8b b9       	out	0x0b, r24	; 11
     262:	29 9a       	sbi	0x05, 1	; 5
     264:	00 00       	nop
     266:	29 98       	cbi	0x05, 1	; 5
     268:	81 e0       	ldi	r24, 0x01	; 1
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	d1 cf       	rjmp	.-94     	; 0x210 <delay_ms>
     26e:	08 95       	ret

00000270 <LCD_DisplayString>:
     270:	0f 93       	push	r16
     272:	1f 93       	push	r17
     274:	cf 93       	push	r28
     276:	df 93       	push	r29
     278:	18 2f       	mov	r17, r24
     27a:	eb 01       	movw	r28, r22
     27c:	e5 df       	rcall	.-54     	; 0x248 <LCD_ClearScreen>
     27e:	88 81       	ld	r24, Y
     280:	88 23       	and	r24, r24
     282:	51 f0       	breq	.+20     	; 0x298 <LCD_DisplayString+0x28>
     284:	01 e0       	ldi	r16, 0x01	; 1
     286:	01 0f       	add	r16, r17
     288:	81 2f       	mov	r24, r17
     28a:	e1 df       	rcall	.-62     	; 0x24e <LCD_Cursor>
     28c:	89 91       	ld	r24, Y+
     28e:	e7 df       	rcall	.-50     	; 0x25e <LCD_WriteData>
     290:	10 2f       	mov	r17, r16
     292:	88 81       	ld	r24, Y
     294:	81 11       	cpse	r24, r1
     296:	f6 cf       	rjmp	.-20     	; 0x284 <LCD_DisplayString+0x14>
     298:	df 91       	pop	r29
     29a:	cf 91       	pop	r28
     29c:	1f 91       	pop	r17
     29e:	0f 91       	pop	r16
     2a0:	08 95       	ret

000002a2 <LCD_Write_Single_Line>:
     2a2:	1f 93       	push	r17
     2a4:	cf 93       	push	r28
     2a6:	df 93       	push	r29
     2a8:	62 30       	cpi	r22, 0x02	; 2
     2aa:	71 05       	cpc	r23, r1
     2ac:	09 f4       	brne	.+2      	; 0x2b0 <LCD_Write_Single_Line+0xe>
     2ae:	80 5f       	subi	r24, 0xF0	; 240
     2b0:	fa 01       	movw	r30, r20
     2b2:	90 81       	ld	r25, Z
     2b4:	99 23       	and	r25, r25
     2b6:	51 f0       	breq	.+20     	; 0x2cc <LCD_Write_Single_Line+0x2a>
     2b8:	ea 01       	movw	r28, r20
     2ba:	11 e0       	ldi	r17, 0x01	; 1
     2bc:	18 0f       	add	r17, r24
     2be:	c7 df       	rcall	.-114    	; 0x24e <LCD_Cursor>
     2c0:	89 91       	ld	r24, Y+
     2c2:	cd df       	rcall	.-102    	; 0x25e <LCD_WriteData>
     2c4:	81 2f       	mov	r24, r17
     2c6:	98 81       	ld	r25, Y
     2c8:	91 11       	cpse	r25, r1
     2ca:	f7 cf       	rjmp	.-18     	; 0x2ba <LCD_Write_Single_Line+0x18>
     2cc:	df 91       	pop	r29
     2ce:	cf 91       	pop	r28
     2d0:	1f 91       	pop	r17
     2d2:	08 95       	ret

000002d4 <LCD_Custom_Character>:
     2d4:	0f 93       	push	r16
     2d6:	1f 93       	push	r17
     2d8:	cf 93       	push	r28
     2da:	df 93       	push	r29
     2dc:	8b 01       	movw	r16, r22
     2de:	88 30       	cpi	r24, 0x08	; 8
     2e0:	68 f4       	brcc	.+26     	; 0x2fc <LCD_Custom_Character+0x28>
     2e2:	88 0f       	add	r24, r24
     2e4:	88 0f       	add	r24, r24
     2e6:	88 0f       	add	r24, r24
     2e8:	80 5c       	subi	r24, 0xC0	; 192
     2ea:	a5 df       	rcall	.-182    	; 0x236 <LCD_WriteCommand>
     2ec:	e8 01       	movw	r28, r16
     2ee:	08 5f       	subi	r16, 0xF8	; 248
     2f0:	1f 4f       	sbci	r17, 0xFF	; 255
     2f2:	89 91       	ld	r24, Y+
     2f4:	b4 df       	rcall	.-152    	; 0x25e <LCD_WriteData>
     2f6:	c0 17       	cp	r28, r16
     2f8:	d1 07       	cpc	r29, r17
     2fa:	d9 f7       	brne	.-10     	; 0x2f2 <LCD_Custom_Character+0x1e>
     2fc:	80 e8       	ldi	r24, 0x80	; 128
     2fe:	9b df       	rcall	.-202    	; 0x236 <LCD_WriteCommand>
     300:	df 91       	pop	r29
     302:	cf 91       	pop	r28
     304:	1f 91       	pop	r17
     306:	0f 91       	pop	r16
     308:	08 95       	ret

0000030a <LCD_init>:
     30a:	84 e6       	ldi	r24, 0x64	; 100
     30c:	90 e0       	ldi	r25, 0x00	; 0
     30e:	80 df       	rcall	.-256    	; 0x210 <delay_ms>
     310:	88 e3       	ldi	r24, 0x38	; 56
     312:	91 df       	rcall	.-222    	; 0x236 <LCD_WriteCommand>
     314:	86 e0       	ldi	r24, 0x06	; 6
     316:	8f df       	rcall	.-226    	; 0x236 <LCD_WriteCommand>
     318:	8f e0       	ldi	r24, 0x0F	; 15
     31a:	8d df       	rcall	.-230    	; 0x236 <LCD_WriteCommand>
     31c:	81 e0       	ldi	r24, 0x01	; 1
     31e:	8b df       	rcall	.-234    	; 0x236 <LCD_WriteCommand>
     320:	8a e0       	ldi	r24, 0x0A	; 10
     322:	90 e0       	ldi	r25, 0x00	; 0
     324:	75 df       	rcall	.-278    	; 0x210 <delay_ms>
     326:	6e e4       	ldi	r22, 0x4E	; 78
     328:	75 e0       	ldi	r23, 0x05	; 5
     32a:	80 e0       	ldi	r24, 0x00	; 0
     32c:	d3 df       	rcall	.-90     	; 0x2d4 <LCD_Custom_Character>
     32e:	66 e4       	ldi	r22, 0x46	; 70
     330:	75 e0       	ldi	r23, 0x05	; 5
     332:	81 e0       	ldi	r24, 0x01	; 1
     334:	cf df       	rcall	.-98     	; 0x2d4 <LCD_Custom_Character>
     336:	6e e3       	ldi	r22, 0x3E	; 62
     338:	75 e0       	ldi	r23, 0x05	; 5
     33a:	82 e0       	ldi	r24, 0x02	; 2
     33c:	cb df       	rcall	.-106    	; 0x2d4 <LCD_Custom_Character>
     33e:	66 e3       	ldi	r22, 0x36	; 54
     340:	75 e0       	ldi	r23, 0x05	; 5
     342:	84 e0       	ldi	r24, 0x04	; 4
     344:	c7 df       	rcall	.-114    	; 0x2d4 <LCD_Custom_Character>
     346:	6e e2       	ldi	r22, 0x2E	; 46
     348:	75 e0       	ldi	r23, 0x05	; 5
     34a:	85 e0       	ldi	r24, 0x05	; 5
     34c:	c3 df       	rcall	.-122    	; 0x2d4 <LCD_Custom_Character>
     34e:	66 e2       	ldi	r22, 0x26	; 38
     350:	75 e0       	ldi	r23, 0x05	; 5
     352:	86 e0       	ldi	r24, 0x06	; 6
     354:	bf cf       	rjmp	.-130    	; 0x2d4 <LCD_Custom_Character>
     356:	08 95       	ret

00000358 <LCD_Game_Menu>:
     358:	8c e0       	ldi	r24, 0x0C	; 12
     35a:	6d df       	rcall	.-294    	; 0x236 <LCD_WriteCommand>
     35c:	81 e0       	ldi	r24, 0x01	; 1
     35e:	77 df       	rcall	.-274    	; 0x24e <LCD_Cursor>
     360:	85 e0       	ldi	r24, 0x05	; 5
     362:	7d df       	rcall	.-262    	; 0x25e <LCD_WriteData>
     364:	86 e0       	ldi	r24, 0x06	; 6
     366:	73 df       	rcall	.-282    	; 0x24e <LCD_Cursor>
     368:	81 e0       	ldi	r24, 0x01	; 1
     36a:	79 df       	rcall	.-270    	; 0x25e <LCD_WriteData>
     36c:	82 e0       	ldi	r24, 0x02	; 2
     36e:	77 df       	rcall	.-274    	; 0x25e <LCD_WriteData>
     370:	84 e0       	ldi	r24, 0x04	; 4
     372:	75 df       	rcall	.-278    	; 0x25e <LCD_WriteData>
     374:	80 e0       	ldi	r24, 0x00	; 0
     376:	73 df       	rcall	.-282    	; 0x25e <LCD_WriteData>
     378:	80 e1       	ldi	r24, 0x10	; 16
     37a:	69 df       	rcall	.-302    	; 0x24e <LCD_Cursor>
     37c:	85 e0       	ldi	r24, 0x05	; 5
     37e:	6f df       	rcall	.-290    	; 0x25e <LCD_WriteData>
     380:	46 e5       	ldi	r20, 0x56	; 86
     382:	55 e0       	ldi	r21, 0x05	; 5
     384:	62 e0       	ldi	r22, 0x02	; 2
     386:	70 e0       	ldi	r23, 0x00	; 0
     388:	81 e0       	ldi	r24, 0x01	; 1
     38a:	8b df       	rcall	.-234    	; 0x2a2 <LCD_Write_Single_Line>
     38c:	87 e1       	ldi	r24, 0x17	; 23
     38e:	5f df       	rcall	.-322    	; 0x24e <LCD_Cursor>
     390:	86 e0       	ldi	r24, 0x06	; 6
     392:	65 cf       	rjmp	.-310    	; 0x25e <LCD_WriteData>
     394:	08 95       	ret

00000396 <LCD_Menu_Tick>:
     396:	cf 93       	push	r28
     398:	df 93       	push	r29
     39a:	8b 30       	cpi	r24, 0x0B	; 11
     39c:	91 05       	cpc	r25, r1
     39e:	08 f0       	brcs	.+2      	; 0x3a2 <LCD_Menu_Tick+0xc>
     3a0:	0a c1       	rjmp	.+532    	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
     3a2:	fc 01       	movw	r30, r24
     3a4:	ea 5b       	subi	r30, 0xBA	; 186
     3a6:	ff 4f       	sbci	r31, 0xFF	; 255
     3a8:	0c 94 69 0a 	jmp	0x14d2	; 0x14d2 <__tablejump2__>
     3ac:	80 91 cb 05 	lds	r24, 0x05CB	; 0x8005cb <LEFT>
     3b0:	88 23       	and	r24, r24
     3b2:	09 f4       	brne	.+2      	; 0x3b6 <LCD_Menu_Tick+0x20>
     3b4:	15 c1       	rjmp	.+554    	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
     3b6:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <RIGHT>
     3ba:	88 23       	and	r24, r24
     3bc:	09 f4       	brne	.+2      	; 0x3c0 <LCD_Menu_Tick+0x2a>
     3be:	10 c1       	rjmp	.+544    	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
     3c0:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <DOWN>
     3c4:	88 23       	and	r24, r24
     3c6:	09 f4       	brne	.+2      	; 0x3ca <LCD_Menu_Tick+0x34>
     3c8:	0b c1       	rjmp	.+534    	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
     3ca:	80 91 c9 05 	lds	r24, 0x05C9	; 0x8005c9 <UP>
     3ce:	88 23       	and	r24, r24
     3d0:	09 f4       	brne	.+2      	; 0x3d4 <LCD_Menu_Tick+0x3e>
     3d2:	06 c1       	rjmp	.+524    	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
     3d4:	10 92 c6 05 	sts	0x05C6, r1	; 0x8005c6 <current_song_choice>
     3d8:	82 e0       	ldi	r24, 0x02	; 2
     3da:	90 e0       	ldi	r25, 0x00	; 0
     3dc:	e2 c2       	rjmp	.+1476   	; 0x9a2 <__LOCK_REGION_LENGTH__+0x5a2>
     3de:	20 91 cb 05 	lds	r18, 0x05CB	; 0x8005cb <LEFT>
     3e2:	21 11       	cpse	r18, r1
     3e4:	de c2       	rjmp	.+1468   	; 0x9a2 <__LOCK_REGION_LENGTH__+0x5a2>
     3e6:	20 91 ca 05 	lds	r18, 0x05CA	; 0x8005ca <RIGHT>
     3ea:	21 11       	cpse	r18, r1
     3ec:	da c2       	rjmp	.+1460   	; 0x9a2 <__LOCK_REGION_LENGTH__+0x5a2>
     3ee:	20 91 c9 05 	lds	r18, 0x05C9	; 0x8005c9 <UP>
     3f2:	21 11       	cpse	r18, r1
     3f4:	d6 c2       	rjmp	.+1452   	; 0x9a2 <__LOCK_REGION_LENGTH__+0x5a2>
     3f6:	20 91 c8 05 	lds	r18, 0x05C8	; 0x8005c8 <DOWN>
     3fa:	21 11       	cpse	r18, r1
     3fc:	d2 c2       	rjmp	.+1444   	; 0x9a2 <__LOCK_REGION_LENGTH__+0x5a2>
     3fe:	24 df       	rcall	.-440    	; 0x248 <LCD_ClearScreen>
     400:	f3 c0       	rjmp	.+486    	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
     402:	20 91 cb 05 	lds	r18, 0x05CB	; 0x8005cb <LEFT>
     406:	22 23       	and	r18, r18
     408:	71 f0       	breq	.+28     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     40a:	30 91 ca 05 	lds	r19, 0x05CA	; 0x8005ca <RIGHT>
     40e:	31 11       	cpse	r19, r1
     410:	0a c0       	rjmp	.+20     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     412:	30 91 c9 05 	lds	r19, 0x05C9	; 0x8005c9 <UP>
     416:	31 11       	cpse	r19, r1
     418:	06 c0       	rjmp	.+12     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
     41a:	20 91 c8 05 	lds	r18, 0x05C8	; 0x8005c8 <DOWN>
     41e:	21 11       	cpse	r18, r1
     420:	ca c0       	rjmp	.+404    	; 0x5b6 <__LOCK_REGION_LENGTH__+0x1b6>
     422:	12 df       	rcall	.-476    	; 0x248 <LCD_ClearScreen>
     424:	dd c0       	rjmp	.+442    	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
     426:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <DOWN>
     42a:	88 23       	and	r24, r24
     42c:	b1 f0       	breq	.+44     	; 0x45a <__LOCK_REGION_LENGTH__+0x5a>
     42e:	80 91 c9 05 	lds	r24, 0x05C9	; 0x8005c9 <UP>
     432:	81 11       	cpse	r24, r1
     434:	d9 c0       	rjmp	.+434    	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
     436:	21 11       	cpse	r18, r1
     438:	d7 c0       	rjmp	.+430    	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
     43a:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <RIGHT>
     43e:	81 11       	cpse	r24, r1
     440:	d3 c0       	rjmp	.+422    	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
     442:	80 91 c6 05 	lds	r24, 0x05C6	; 0x8005c6 <current_song_choice>
     446:	88 23       	and	r24, r24
     448:	21 f0       	breq	.+8      	; 0x452 <__LOCK_REGION_LENGTH__+0x52>
     44a:	81 e0       	ldi	r24, 0x01	; 1
     44c:	80 93 c6 05 	sts	0x05C6, r24	; 0x8005c6 <current_song_choice>
     450:	cf c0       	rjmp	.+414    	; 0x5f0 <__LOCK_REGION_LENGTH__+0x1f0>
     452:	81 e0       	ldi	r24, 0x01	; 1
     454:	80 93 c6 05 	sts	0x05C6, r24	; 0x8005c6 <current_song_choice>
     458:	cb c0       	rjmp	.+406    	; 0x5f0 <__LOCK_REGION_LENGTH__+0x1f0>
     45a:	80 91 c9 05 	lds	r24, 0x05C9	; 0x8005c9 <UP>
     45e:	88 23       	and	r24, r24
     460:	09 f4       	brne	.+2      	; 0x464 <__LOCK_REGION_LENGTH__+0x64>
     462:	9c c2       	rjmp	.+1336   	; 0x99c <__LOCK_REGION_LENGTH__+0x59c>
     464:	21 11       	cpse	r18, r1
     466:	c0 c0       	rjmp	.+384    	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
     468:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <RIGHT>
     46c:	81 11       	cpse	r24, r1
     46e:	bc c0       	rjmp	.+376    	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
     470:	80 91 c6 05 	lds	r24, 0x05C6	; 0x8005c6 <current_song_choice>
     474:	88 23       	and	r24, r24
     476:	09 f4       	brne	.+2      	; 0x47a <__LOCK_REGION_LENGTH__+0x7a>
     478:	c2 c0       	rjmp	.+388    	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
     47a:	81 50       	subi	r24, 0x01	; 1
     47c:	80 93 c6 05 	sts	0x05C6, r24	; 0x8005c6 <current_song_choice>
     480:	b3 c0       	rjmp	.+358    	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
     482:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <RIGHT>
     486:	88 23       	and	r24, r24
     488:	09 f4       	brne	.+2      	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
     48a:	ae c0       	rjmp	.+348    	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
     48c:	80 91 c6 05 	lds	r24, 0x05C6	; 0x8005c6 <current_song_choice>
     490:	88 23       	and	r24, r24
     492:	09 f4       	brne	.+2      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     494:	80 c2       	rjmp	.+1280   	; 0x996 <__LOCK_REGION_LENGTH__+0x596>
     496:	d8 de       	rcall	.-592    	; 0x248 <LCD_ClearScreen>
     498:	a3 c0       	rjmp	.+326    	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
     49a:	20 91 cb 05 	lds	r18, 0x05CB	; 0x8005cb <LEFT>
     49e:	21 11       	cpse	r18, r1
     4a0:	80 c2       	rjmp	.+1280   	; 0x9a2 <__LOCK_REGION_LENGTH__+0x5a2>
     4a2:	20 91 ca 05 	lds	r18, 0x05CA	; 0x8005ca <RIGHT>
     4a6:	21 11       	cpse	r18, r1
     4a8:	7c c2       	rjmp	.+1272   	; 0x9a2 <__LOCK_REGION_LENGTH__+0x5a2>
     4aa:	20 91 c9 05 	lds	r18, 0x05C9	; 0x8005c9 <UP>
     4ae:	21 11       	cpse	r18, r1
     4b0:	78 c2       	rjmp	.+1264   	; 0x9a2 <__LOCK_REGION_LENGTH__+0x5a2>
     4b2:	20 91 c8 05 	lds	r18, 0x05C8	; 0x8005c8 <DOWN>
     4b6:	21 11       	cpse	r18, r1
     4b8:	74 c2       	rjmp	.+1256   	; 0x9a2 <__LOCK_REGION_LENGTH__+0x5a2>
     4ba:	c6 de       	rcall	.-628    	; 0x248 <LCD_ClearScreen>
     4bc:	b7 c0       	rjmp	.+366    	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
     4be:	80 91 cb 05 	lds	r24, 0x05CB	; 0x8005cb <LEFT>
     4c2:	88 23       	and	r24, r24
     4c4:	71 f0       	breq	.+28     	; 0x4e2 <__LOCK_REGION_LENGTH__+0xe2>
     4c6:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <RIGHT>
     4ca:	81 11       	cpse	r24, r1
     4cc:	af c0       	rjmp	.+350    	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
     4ce:	80 91 c9 05 	lds	r24, 0x05C9	; 0x8005c9 <UP>
     4d2:	81 11       	cpse	r24, r1
     4d4:	ab c0       	rjmp	.+342    	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
     4d6:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <DOWN>
     4da:	81 11       	cpse	r24, r1
     4dc:	a7 c0       	rjmp	.+334    	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
     4de:	b4 de       	rcall	.-664    	; 0x248 <LCD_ClearScreen>
     4e0:	83 c0       	rjmp	.+262    	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
     4e2:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <RIGHT>
     4e6:	88 23       	and	r24, r24
     4e8:	09 f4       	brne	.+2      	; 0x4ec <__LOCK_REGION_LENGTH__+0xec>
     4ea:	a0 c0       	rjmp	.+320    	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
     4ec:	80 91 c9 05 	lds	r24, 0x05C9	; 0x8005c9 <UP>
     4f0:	81 11       	cpse	r24, r1
     4f2:	9c c0       	rjmp	.+312    	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
     4f4:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <DOWN>
     4f8:	81 11       	cpse	r24, r1
     4fa:	98 c0       	rjmp	.+304    	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
     4fc:	a5 de       	rcall	.-694    	; 0x248 <LCD_ClearScreen>
     4fe:	6d e8       	ldi	r22, 0x8D	; 141
     500:	75 e0       	ldi	r23, 0x05	; 5
     502:	81 e0       	ldi	r24, 0x01	; 1
     504:	b5 de       	rcall	.-662    	; 0x270 <LCD_DisplayString>
     506:	86 e0       	ldi	r24, 0x06	; 6
     508:	90 e0       	ldi	r25, 0x00	; 0
     50a:	4b c2       	rjmp	.+1174   	; 0x9a2 <__LOCK_REGION_LENGTH__+0x5a2>
     50c:	20 91 cb 05 	lds	r18, 0x05CB	; 0x8005cb <LEFT>
     510:	21 11       	cpse	r18, r1
     512:	47 c2       	rjmp	.+1166   	; 0x9a2 <__LOCK_REGION_LENGTH__+0x5a2>
     514:	20 91 ca 05 	lds	r18, 0x05CA	; 0x8005ca <RIGHT>
     518:	21 11       	cpse	r18, r1
     51a:	43 c2       	rjmp	.+1158   	; 0x9a2 <__LOCK_REGION_LENGTH__+0x5a2>
     51c:	20 91 c9 05 	lds	r18, 0x05C9	; 0x8005c9 <UP>
     520:	21 11       	cpse	r18, r1
     522:	3f c2       	rjmp	.+1150   	; 0x9a2 <__LOCK_REGION_LENGTH__+0x5a2>
     524:	20 91 c8 05 	lds	r18, 0x05C8	; 0x8005c8 <DOWN>
     528:	21 11       	cpse	r18, r1
     52a:	3b c2       	rjmp	.+1142   	; 0x9a2 <__LOCK_REGION_LENGTH__+0x5a2>
     52c:	87 e0       	ldi	r24, 0x07	; 7
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	38 c2       	rjmp	.+1136   	; 0x9a2 <__LOCK_REGION_LENGTH__+0x5a2>
     532:	20 91 b3 05 	lds	r18, 0x05B3	; 0x8005b3 <count_down.2253>
     536:	29 31       	cpi	r18, 0x19	; 25
     538:	20 f4       	brcc	.+8      	; 0x542 <__LOCK_REGION_LENGTH__+0x142>
     53a:	2f 5f       	subi	r18, 0xFF	; 255
     53c:	20 93 b3 05 	sts	0x05B3, r18	; 0x8005b3 <count_down.2253>
     540:	30 c2       	rjmp	.+1120   	; 0x9a2 <__LOCK_REGION_LENGTH__+0x5a2>
     542:	10 92 b3 05 	sts	0x05B3, r1	; 0x8005b3 <count_down.2253>
     546:	81 e0       	ldi	r24, 0x01	; 1
     548:	80 93 b8 05 	sts	0x05B8, r24	; 0x8005b8 <playing>
     54c:	0c c1       	rjmp	.+536    	; 0x766 <__LOCK_REGION_LENGTH__+0x366>
     54e:	80 91 ba 05 	lds	r24, 0x05BA	; 0x8005ba <song_finished>
     552:	88 23       	and	r24, r24
     554:	09 f4       	brne	.+2      	; 0x558 <__LOCK_REGION_LENGTH__+0x158>
     556:	07 c1       	rjmp	.+526    	; 0x766 <__LOCK_REGION_LENGTH__+0x366>
     558:	80 91 b8 05 	lds	r24, 0x05B8	; 0x8005b8 <playing>
     55c:	81 11       	cpse	r24, r1
     55e:	03 c1       	rjmp	.+518    	; 0x766 <__LOCK_REGION_LENGTH__+0x366>
     560:	7b c1       	rjmp	.+758    	; 0x858 <__LOCK_REGION_LENGTH__+0x458>
     562:	80 91 cb 05 	lds	r24, 0x05CB	; 0x8005cb <LEFT>
     566:	81 11       	cpse	r24, r1
     568:	0d c0       	rjmp	.+26     	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
     56a:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <RIGHT>
     56e:	81 11       	cpse	r24, r1
     570:	09 c0       	rjmp	.+18     	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
     572:	80 91 c9 05 	lds	r24, 0x05C9	; 0x8005c9 <UP>
     576:	81 11       	cpse	r24, r1
     578:	05 c0       	rjmp	.+10     	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
     57a:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <DOWN>
     57e:	88 23       	and	r24, r24
     580:	09 f4       	brne	.+2      	; 0x584 <__LOCK_REGION_LENGTH__+0x184>
     582:	6a c1       	rjmp	.+724    	; 0x858 <__LOCK_REGION_LENGTH__+0x458>
     584:	10 92 ba 05 	sts	0x05BA, r1	; 0x8005ba <song_finished>
     588:	10 92 b9 05 	sts	0x05B9, r1	; 0x8005b9 <score_increase>
     58c:	8a e0       	ldi	r24, 0x0A	; 10
     58e:	90 e0       	ldi	r25, 0x00	; 0
     590:	08 c2       	rjmp	.+1040   	; 0x9a2 <__LOCK_REGION_LENGTH__+0x5a2>
     592:	20 91 cb 05 	lds	r18, 0x05CB	; 0x8005cb <LEFT>
     596:	21 11       	cpse	r18, r1
     598:	04 c2       	rjmp	.+1032   	; 0x9a2 <__LOCK_REGION_LENGTH__+0x5a2>
     59a:	20 91 ca 05 	lds	r18, 0x05CA	; 0x8005ca <RIGHT>
     59e:	21 11       	cpse	r18, r1
     5a0:	00 c2       	rjmp	.+1024   	; 0x9a2 <__LOCK_REGION_LENGTH__+0x5a2>
     5a2:	20 91 c9 05 	lds	r18, 0x05C9	; 0x8005c9 <UP>
     5a6:	21 11       	cpse	r18, r1
     5a8:	fc c1       	rjmp	.+1016   	; 0x9a2 <__LOCK_REGION_LENGTH__+0x5a2>
     5aa:	20 91 c8 05 	lds	r18, 0x05C8	; 0x8005c8 <DOWN>
     5ae:	21 11       	cpse	r18, r1
     5b0:	f8 c1       	rjmp	.+1008   	; 0x9a2 <__LOCK_REGION_LENGTH__+0x5a2>
     5b2:	4a de       	rcall	.-876    	; 0x248 <LCD_ClearScreen>
     5b4:	15 c0       	rjmp	.+42     	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
     5b6:	85 30       	cpi	r24, 0x05	; 5
     5b8:	91 05       	cpc	r25, r1
     5ba:	09 f4       	brne	.+2      	; 0x5be <__LOCK_REGION_LENGTH__+0x1be>
     5bc:	37 c0       	rjmp	.+110    	; 0x62c <__LOCK_REGION_LENGTH__+0x22c>
     5be:	3c f4       	brge	.+14     	; 0x5ce <__LOCK_REGION_LENGTH__+0x1ce>
     5c0:	81 30       	cpi	r24, 0x01	; 1
     5c2:	91 05       	cpc	r25, r1
     5c4:	69 f0       	breq	.+26     	; 0x5e0 <__LOCK_REGION_LENGTH__+0x1e0>
     5c6:	83 30       	cpi	r24, 0x03	; 3
     5c8:	91 05       	cpc	r25, r1
     5ca:	71 f0       	breq	.+28     	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
     5cc:	ea c1       	rjmp	.+980    	; 0x9a2 <__LOCK_REGION_LENGTH__+0x5a2>
     5ce:	88 30       	cpi	r24, 0x08	; 8
     5d0:	91 05       	cpc	r25, r1
     5d2:	09 f4       	brne	.+2      	; 0x5d6 <__LOCK_REGION_LENGTH__+0x1d6>
     5d4:	c8 c0       	rjmp	.+400    	; 0x766 <__LOCK_REGION_LENGTH__+0x366>
     5d6:	89 30       	cpi	r24, 0x09	; 9
     5d8:	91 05       	cpc	r25, r1
     5da:	09 f4       	brne	.+2      	; 0x5de <__LOCK_REGION_LENGTH__+0x1de>
     5dc:	3d c1       	rjmp	.+634    	; 0x858 <__LOCK_REGION_LENGTH__+0x458>
     5de:	e1 c1       	rjmp	.+962    	; 0x9a2 <__LOCK_REGION_LENGTH__+0x5a2>
     5e0:	bb de       	rcall	.-650    	; 0x358 <LCD_Game_Menu>
     5e2:	81 e0       	ldi	r24, 0x01	; 1
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	dd c1       	rjmp	.+954    	; 0x9a2 <__LOCK_REGION_LENGTH__+0x5a2>
     5e8:	80 91 c6 05 	lds	r24, 0x05C6	; 0x8005c6 <current_song_choice>
     5ec:	88 23       	and	r24, r24
     5ee:	39 f0       	breq	.+14     	; 0x5fe <__LOCK_REGION_LENGTH__+0x1fe>
     5f0:	81 e0       	ldi	r24, 0x01	; 1
     5f2:	2d de       	rcall	.-934    	; 0x24e <LCD_Cursor>
     5f4:	80 e2       	ldi	r24, 0x20	; 32
     5f6:	33 de       	rcall	.-922    	; 0x25e <LCD_WriteData>
     5f8:	81 e1       	ldi	r24, 0x11	; 17
     5fa:	29 de       	rcall	.-942    	; 0x24e <LCD_Cursor>
     5fc:	06 c0       	rjmp	.+12     	; 0x60a <__LOCK_REGION_LENGTH__+0x20a>
     5fe:	81 e1       	ldi	r24, 0x11	; 17
     600:	26 de       	rcall	.-948    	; 0x24e <LCD_Cursor>
     602:	80 e2       	ldi	r24, 0x20	; 32
     604:	2c de       	rcall	.-936    	; 0x25e <LCD_WriteData>
     606:	81 e0       	ldi	r24, 0x01	; 1
     608:	22 de       	rcall	.-956    	; 0x24e <LCD_Cursor>
     60a:	85 ea       	ldi	r24, 0xA5	; 165
     60c:	28 de       	rcall	.-944    	; 0x25e <LCD_WriteData>
     60e:	47 e6       	ldi	r20, 0x67	; 103
     610:	55 e0       	ldi	r21, 0x05	; 5
     612:	61 e0       	ldi	r22, 0x01	; 1
     614:	70 e0       	ldi	r23, 0x00	; 0
     616:	82 e0       	ldi	r24, 0x02	; 2
     618:	44 de       	rcall	.-888    	; 0x2a2 <LCD_Write_Single_Line>
     61a:	45 e7       	ldi	r20, 0x75	; 117
     61c:	55 e0       	ldi	r21, 0x05	; 5
     61e:	62 e0       	ldi	r22, 0x02	; 2
     620:	70 e0       	ldi	r23, 0x00	; 0
     622:	82 e0       	ldi	r24, 0x02	; 2
     624:	3e de       	rcall	.-900    	; 0x2a2 <LCD_Write_Single_Line>
     626:	83 e0       	ldi	r24, 0x03	; 3
     628:	90 e0       	ldi	r25, 0x00	; 0
     62a:	bb c1       	rjmp	.+886    	; 0x9a2 <__LOCK_REGION_LENGTH__+0x5a2>
     62c:	48 e7       	ldi	r20, 0x78	; 120
     62e:	55 e0       	ldi	r21, 0x05	; 5
     630:	61 e0       	ldi	r22, 0x01	; 1
     632:	70 e0       	ldi	r23, 0x00	; 0
     634:	81 e0       	ldi	r24, 0x01	; 1
     636:	35 de       	rcall	.-918    	; 0x2a2 <LCD_Write_Single_Line>
     638:	87 e0       	ldi	r24, 0x07	; 7
     63a:	09 de       	rcall	.-1006   	; 0x24e <LCD_Cursor>
     63c:	80 e0       	ldi	r24, 0x00	; 0
     63e:	0f de       	rcall	.-994    	; 0x25e <LCD_WriteData>
     640:	48 e8       	ldi	r20, 0x88	; 136
     642:	55 e0       	ldi	r21, 0x05	; 5
     644:	62 e0       	ldi	r22, 0x02	; 2
     646:	70 e0       	ldi	r23, 0x00	; 0
     648:	81 e0       	ldi	r24, 0x01	; 1
     64a:	2b de       	rcall	.-938    	; 0x2a2 <LCD_Write_Single_Line>
     64c:	8c e1       	ldi	r24, 0x1C	; 28
     64e:	ff dd       	rcall	.-1026   	; 0x24e <LCD_Cursor>
     650:	80 91 c6 05 	lds	r24, 0x05C6	; 0x8005c6 <current_song_choice>
     654:	cc e1       	ldi	r28, 0x1C	; 28
     656:	d4 e0       	ldi	r29, 0x04	; 4
     658:	8c 9f       	mul	r24, r28
     65a:	f0 01       	movw	r30, r0
     65c:	8d 9f       	mul	r24, r29
     65e:	f0 0d       	add	r31, r0
     660:	11 24       	eor	r1, r1
     662:	e5 5b       	subi	r30, 0xB5	; 181
     664:	f5 4f       	sbci	r31, 0xF5	; 245
     666:	20 81       	ld	r18, Z
     668:	31 81       	ldd	r19, Z+1	; 0x01
     66a:	36 95       	lsr	r19
     66c:	27 95       	ror	r18
     66e:	36 95       	lsr	r19
     670:	27 95       	ror	r18
     672:	ab e7       	ldi	r26, 0x7B	; 123
     674:	b4 e1       	ldi	r27, 0x14	; 20
     676:	36 d7       	rcall	.+3692   	; 0x14e4 <__umulhisi3>
     678:	ac 01       	movw	r20, r24
     67a:	56 95       	lsr	r21
     67c:	47 95       	ror	r20
     67e:	9a 01       	movw	r18, r20
     680:	ad ec       	ldi	r26, 0xCD	; 205
     682:	bc ec       	ldi	r27, 0xCC	; 204
     684:	2f d7       	rcall	.+3678   	; 0x14e4 <__umulhisi3>
     686:	96 95       	lsr	r25
     688:	87 95       	ror	r24
     68a:	96 95       	lsr	r25
     68c:	87 95       	ror	r24
     68e:	96 95       	lsr	r25
     690:	87 95       	ror	r24
     692:	9c 01       	movw	r18, r24
     694:	22 0f       	add	r18, r18
     696:	33 1f       	adc	r19, r19
     698:	88 0f       	add	r24, r24
     69a:	99 1f       	adc	r25, r25
     69c:	88 0f       	add	r24, r24
     69e:	99 1f       	adc	r25, r25
     6a0:	88 0f       	add	r24, r24
     6a2:	99 1f       	adc	r25, r25
     6a4:	82 0f       	add	r24, r18
     6a6:	93 1f       	adc	r25, r19
     6a8:	9a 01       	movw	r18, r20
     6aa:	28 1b       	sub	r18, r24
     6ac:	39 0b       	sbc	r19, r25
     6ae:	c9 01       	movw	r24, r18
     6b0:	80 5d       	subi	r24, 0xD0	; 208
     6b2:	d5 dd       	rcall	.-1110   	; 0x25e <LCD_WriteData>
     6b4:	80 91 c6 05 	lds	r24, 0x05C6	; 0x8005c6 <current_song_choice>
     6b8:	8c 9f       	mul	r24, r28
     6ba:	f0 01       	movw	r30, r0
     6bc:	8d 9f       	mul	r24, r29
     6be:	f0 0d       	add	r31, r0
     6c0:	11 24       	eor	r1, r1
     6c2:	e5 5b       	subi	r30, 0xB5	; 181
     6c4:	f5 4f       	sbci	r31, 0xF5	; 245
     6c6:	20 81       	ld	r18, Z
     6c8:	31 81       	ldd	r19, Z+1	; 0x01
     6ca:	ad ec       	ldi	r26, 0xCD	; 205
     6cc:	bc ec       	ldi	r27, 0xCC	; 204
     6ce:	0a d7       	rcall	.+3604   	; 0x14e4 <__umulhisi3>
     6d0:	ac 01       	movw	r20, r24
     6d2:	56 95       	lsr	r21
     6d4:	47 95       	ror	r20
     6d6:	56 95       	lsr	r21
     6d8:	47 95       	ror	r20
     6da:	56 95       	lsr	r21
     6dc:	47 95       	ror	r20
     6de:	9a 01       	movw	r18, r20
     6e0:	01 d7       	rcall	.+3586   	; 0x14e4 <__umulhisi3>
     6e2:	96 95       	lsr	r25
     6e4:	87 95       	ror	r24
     6e6:	96 95       	lsr	r25
     6e8:	87 95       	ror	r24
     6ea:	96 95       	lsr	r25
     6ec:	87 95       	ror	r24
     6ee:	9c 01       	movw	r18, r24
     6f0:	22 0f       	add	r18, r18
     6f2:	33 1f       	adc	r19, r19
     6f4:	88 0f       	add	r24, r24
     6f6:	99 1f       	adc	r25, r25
     6f8:	88 0f       	add	r24, r24
     6fa:	99 1f       	adc	r25, r25
     6fc:	88 0f       	add	r24, r24
     6fe:	99 1f       	adc	r25, r25
     700:	82 0f       	add	r24, r18
     702:	93 1f       	adc	r25, r19
     704:	9a 01       	movw	r18, r20
     706:	28 1b       	sub	r18, r24
     708:	39 0b       	sbc	r19, r25
     70a:	c9 01       	movw	r24, r18
     70c:	80 5d       	subi	r24, 0xD0	; 208
     70e:	a7 dd       	rcall	.-1202   	; 0x25e <LCD_WriteData>
     710:	80 91 c6 05 	lds	r24, 0x05C6	; 0x8005c6 <current_song_choice>
     714:	8c 9f       	mul	r24, r28
     716:	f0 01       	movw	r30, r0
     718:	8d 9f       	mul	r24, r29
     71a:	f0 0d       	add	r31, r0
     71c:	11 24       	eor	r1, r1
     71e:	e5 5b       	subi	r30, 0xB5	; 181
     720:	f5 4f       	sbci	r31, 0xF5	; 245
     722:	40 81       	ld	r20, Z
     724:	51 81       	ldd	r21, Z+1	; 0x01
     726:	9a 01       	movw	r18, r20
     728:	ad ec       	ldi	r26, 0xCD	; 205
     72a:	bc ec       	ldi	r27, 0xCC	; 204
     72c:	db d6       	rcall	.+3510   	; 0x14e4 <__umulhisi3>
     72e:	96 95       	lsr	r25
     730:	87 95       	ror	r24
     732:	96 95       	lsr	r25
     734:	87 95       	ror	r24
     736:	96 95       	lsr	r25
     738:	87 95       	ror	r24
     73a:	9c 01       	movw	r18, r24
     73c:	22 0f       	add	r18, r18
     73e:	33 1f       	adc	r19, r19
     740:	88 0f       	add	r24, r24
     742:	99 1f       	adc	r25, r25
     744:	88 0f       	add	r24, r24
     746:	99 1f       	adc	r25, r25
     748:	88 0f       	add	r24, r24
     74a:	99 1f       	adc	r25, r25
     74c:	82 0f       	add	r24, r18
     74e:	93 1f       	adc	r25, r19
     750:	9a 01       	movw	r18, r20
     752:	28 1b       	sub	r18, r24
     754:	39 0b       	sbc	r19, r25
     756:	c9 01       	movw	r24, r18
     758:	80 5d       	subi	r24, 0xD0	; 208
     75a:	81 dd       	rcall	.-1278   	; 0x25e <LCD_WriteData>
     75c:	81 e2       	ldi	r24, 0x21	; 33
     75e:	77 dd       	rcall	.-1298   	; 0x24e <LCD_Cursor>
     760:	85 e0       	ldi	r24, 0x05	; 5
     762:	90 e0       	ldi	r25, 0x00	; 0
     764:	1e c1       	rjmp	.+572    	; 0x9a2 <__LOCK_REGION_LENGTH__+0x5a2>
     766:	80 91 b9 05 	lds	r24, 0x05B9	; 0x8005b9 <score_increase>
     76a:	88 23       	and	r24, r24
     76c:	09 f4       	brne	.+2      	; 0x770 <__LOCK_REGION_LENGTH__+0x370>
     76e:	10 c1       	rjmp	.+544    	; 0x990 <__LOCK_REGION_LENGTH__+0x590>
     770:	89 e0       	ldi	r24, 0x09	; 9
     772:	6d dd       	rcall	.-1318   	; 0x24e <LCD_Cursor>
     774:	20 91 c3 05 	lds	r18, 0x05C3	; 0x8005c3 <current_score>
     778:	30 91 c4 05 	lds	r19, 0x05C4	; 0x8005c4 <current_score+0x1>
     77c:	36 95       	lsr	r19
     77e:	27 95       	ror	r18
     780:	36 95       	lsr	r19
     782:	27 95       	ror	r18
     784:	ab e7       	ldi	r26, 0x7B	; 123
     786:	b4 e1       	ldi	r27, 0x14	; 20
     788:	ad d6       	rcall	.+3418   	; 0x14e4 <__umulhisi3>
     78a:	ac 01       	movw	r20, r24
     78c:	56 95       	lsr	r21
     78e:	47 95       	ror	r20
     790:	9a 01       	movw	r18, r20
     792:	ad ec       	ldi	r26, 0xCD	; 205
     794:	bc ec       	ldi	r27, 0xCC	; 204
     796:	a6 d6       	rcall	.+3404   	; 0x14e4 <__umulhisi3>
     798:	96 95       	lsr	r25
     79a:	87 95       	ror	r24
     79c:	96 95       	lsr	r25
     79e:	87 95       	ror	r24
     7a0:	96 95       	lsr	r25
     7a2:	87 95       	ror	r24
     7a4:	9c 01       	movw	r18, r24
     7a6:	22 0f       	add	r18, r18
     7a8:	33 1f       	adc	r19, r19
     7aa:	88 0f       	add	r24, r24
     7ac:	99 1f       	adc	r25, r25
     7ae:	88 0f       	add	r24, r24
     7b0:	99 1f       	adc	r25, r25
     7b2:	88 0f       	add	r24, r24
     7b4:	99 1f       	adc	r25, r25
     7b6:	82 0f       	add	r24, r18
     7b8:	93 1f       	adc	r25, r19
     7ba:	9a 01       	movw	r18, r20
     7bc:	28 1b       	sub	r18, r24
     7be:	39 0b       	sbc	r19, r25
     7c0:	c9 01       	movw	r24, r18
     7c2:	80 5d       	subi	r24, 0xD0	; 208
     7c4:	4c dd       	rcall	.-1384   	; 0x25e <LCD_WriteData>
     7c6:	20 91 c3 05 	lds	r18, 0x05C3	; 0x8005c3 <current_score>
     7ca:	30 91 c4 05 	lds	r19, 0x05C4	; 0x8005c4 <current_score+0x1>
     7ce:	ad ec       	ldi	r26, 0xCD	; 205
     7d0:	bc ec       	ldi	r27, 0xCC	; 204
     7d2:	88 d6       	rcall	.+3344   	; 0x14e4 <__umulhisi3>
     7d4:	ac 01       	movw	r20, r24
     7d6:	56 95       	lsr	r21
     7d8:	47 95       	ror	r20
     7da:	56 95       	lsr	r21
     7dc:	47 95       	ror	r20
     7de:	56 95       	lsr	r21
     7e0:	47 95       	ror	r20
     7e2:	9a 01       	movw	r18, r20
     7e4:	7f d6       	rcall	.+3326   	; 0x14e4 <__umulhisi3>
     7e6:	96 95       	lsr	r25
     7e8:	87 95       	ror	r24
     7ea:	96 95       	lsr	r25
     7ec:	87 95       	ror	r24
     7ee:	96 95       	lsr	r25
     7f0:	87 95       	ror	r24
     7f2:	9c 01       	movw	r18, r24
     7f4:	22 0f       	add	r18, r18
     7f6:	33 1f       	adc	r19, r19
     7f8:	88 0f       	add	r24, r24
     7fa:	99 1f       	adc	r25, r25
     7fc:	88 0f       	add	r24, r24
     7fe:	99 1f       	adc	r25, r25
     800:	88 0f       	add	r24, r24
     802:	99 1f       	adc	r25, r25
     804:	82 0f       	add	r24, r18
     806:	93 1f       	adc	r25, r19
     808:	9a 01       	movw	r18, r20
     80a:	28 1b       	sub	r18, r24
     80c:	39 0b       	sbc	r19, r25
     80e:	c9 01       	movw	r24, r18
     810:	80 5d       	subi	r24, 0xD0	; 208
     812:	25 dd       	rcall	.-1462   	; 0x25e <LCD_WriteData>
     814:	40 91 c3 05 	lds	r20, 0x05C3	; 0x8005c3 <current_score>
     818:	50 91 c4 05 	lds	r21, 0x05C4	; 0x8005c4 <current_score+0x1>
     81c:	9a 01       	movw	r18, r20
     81e:	ad ec       	ldi	r26, 0xCD	; 205
     820:	bc ec       	ldi	r27, 0xCC	; 204
     822:	60 d6       	rcall	.+3264   	; 0x14e4 <__umulhisi3>
     824:	96 95       	lsr	r25
     826:	87 95       	ror	r24
     828:	96 95       	lsr	r25
     82a:	87 95       	ror	r24
     82c:	96 95       	lsr	r25
     82e:	87 95       	ror	r24
     830:	9c 01       	movw	r18, r24
     832:	22 0f       	add	r18, r18
     834:	33 1f       	adc	r19, r19
     836:	88 0f       	add	r24, r24
     838:	99 1f       	adc	r25, r25
     83a:	88 0f       	add	r24, r24
     83c:	99 1f       	adc	r25, r25
     83e:	88 0f       	add	r24, r24
     840:	99 1f       	adc	r25, r25
     842:	82 0f       	add	r24, r18
     844:	93 1f       	adc	r25, r19
     846:	9a 01       	movw	r18, r20
     848:	28 1b       	sub	r18, r24
     84a:	39 0b       	sbc	r19, r25
     84c:	c9 01       	movw	r24, r18
     84e:	80 5d       	subi	r24, 0xD0	; 208
     850:	06 dd       	rcall	.-1524   	; 0x25e <LCD_WriteData>
     852:	88 e0       	ldi	r24, 0x08	; 8
     854:	90 e0       	ldi	r25, 0x00	; 0
     856:	a5 c0       	rjmp	.+330    	; 0x9a2 <__LOCK_REGION_LENGTH__+0x5a2>
     858:	20 91 c6 05 	lds	r18, 0x05C6	; 0x8005c6 <current_song_choice>
     85c:	8c e1       	ldi	r24, 0x1C	; 28
     85e:	94 e0       	ldi	r25, 0x04	; 4
     860:	28 9f       	mul	r18, r24
     862:	f0 01       	movw	r30, r0
     864:	29 9f       	mul	r18, r25
     866:	f0 0d       	add	r31, r0
     868:	11 24       	eor	r1, r1
     86a:	e5 5b       	subi	r30, 0xB5	; 181
     86c:	f5 4f       	sbci	r31, 0xF5	; 245
     86e:	20 81       	ld	r18, Z
     870:	31 81       	ldd	r19, Z+1	; 0x01
     872:	80 91 c3 05 	lds	r24, 0x05C3	; 0x8005c3 <current_score>
     876:	90 91 c4 05 	lds	r25, 0x05C4	; 0x8005c4 <current_score+0x1>
     87a:	28 17       	cp	r18, r24
     87c:	39 07       	cpc	r19, r25
     87e:	08 f0       	brcs	.+2      	; 0x882 <__LOCK_REGION_LENGTH__+0x482>
     880:	7e c0       	rjmp	.+252    	; 0x97e <__LOCK_REGION_LENGTH__+0x57e>
     882:	e2 dc       	rcall	.-1596   	; 0x248 <LCD_ClearScreen>
     884:	64 e9       	ldi	r22, 0x94	; 148
     886:	75 e0       	ldi	r23, 0x05	; 5
     888:	81 e0       	ldi	r24, 0x01	; 1
     88a:	f2 dc       	rcall	.-1564   	; 0x270 <LCD_DisplayString>
     88c:	8c e0       	ldi	r24, 0x0C	; 12
     88e:	df dc       	rcall	.-1602   	; 0x24e <LCD_Cursor>
     890:	20 91 c3 05 	lds	r18, 0x05C3	; 0x8005c3 <current_score>
     894:	30 91 c4 05 	lds	r19, 0x05C4	; 0x8005c4 <current_score+0x1>
     898:	36 95       	lsr	r19
     89a:	27 95       	ror	r18
     89c:	36 95       	lsr	r19
     89e:	27 95       	ror	r18
     8a0:	ab e7       	ldi	r26, 0x7B	; 123
     8a2:	b4 e1       	ldi	r27, 0x14	; 20
     8a4:	1f d6       	rcall	.+3134   	; 0x14e4 <__umulhisi3>
     8a6:	ac 01       	movw	r20, r24
     8a8:	56 95       	lsr	r21
     8aa:	47 95       	ror	r20
     8ac:	9a 01       	movw	r18, r20
     8ae:	ad ec       	ldi	r26, 0xCD	; 205
     8b0:	bc ec       	ldi	r27, 0xCC	; 204
     8b2:	18 d6       	rcall	.+3120   	; 0x14e4 <__umulhisi3>
     8b4:	96 95       	lsr	r25
     8b6:	87 95       	ror	r24
     8b8:	96 95       	lsr	r25
     8ba:	87 95       	ror	r24
     8bc:	96 95       	lsr	r25
     8be:	87 95       	ror	r24
     8c0:	9c 01       	movw	r18, r24
     8c2:	22 0f       	add	r18, r18
     8c4:	33 1f       	adc	r19, r19
     8c6:	88 0f       	add	r24, r24
     8c8:	99 1f       	adc	r25, r25
     8ca:	88 0f       	add	r24, r24
     8cc:	99 1f       	adc	r25, r25
     8ce:	88 0f       	add	r24, r24
     8d0:	99 1f       	adc	r25, r25
     8d2:	82 0f       	add	r24, r18
     8d4:	93 1f       	adc	r25, r19
     8d6:	9a 01       	movw	r18, r20
     8d8:	28 1b       	sub	r18, r24
     8da:	39 0b       	sbc	r19, r25
     8dc:	c9 01       	movw	r24, r18
     8de:	80 5d       	subi	r24, 0xD0	; 208
     8e0:	be dc       	rcall	.-1668   	; 0x25e <LCD_WriteData>
     8e2:	20 91 c3 05 	lds	r18, 0x05C3	; 0x8005c3 <current_score>
     8e6:	30 91 c4 05 	lds	r19, 0x05C4	; 0x8005c4 <current_score+0x1>
     8ea:	ad ec       	ldi	r26, 0xCD	; 205
     8ec:	bc ec       	ldi	r27, 0xCC	; 204
     8ee:	fa d5       	rcall	.+3060   	; 0x14e4 <__umulhisi3>
     8f0:	ac 01       	movw	r20, r24
     8f2:	56 95       	lsr	r21
     8f4:	47 95       	ror	r20
     8f6:	56 95       	lsr	r21
     8f8:	47 95       	ror	r20
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	9a 01       	movw	r18, r20
     900:	f1 d5       	rcall	.+3042   	; 0x14e4 <__umulhisi3>
     902:	96 95       	lsr	r25
     904:	87 95       	ror	r24
     906:	96 95       	lsr	r25
     908:	87 95       	ror	r24
     90a:	96 95       	lsr	r25
     90c:	87 95       	ror	r24
     90e:	9c 01       	movw	r18, r24
     910:	22 0f       	add	r18, r18
     912:	33 1f       	adc	r19, r19
     914:	88 0f       	add	r24, r24
     916:	99 1f       	adc	r25, r25
     918:	88 0f       	add	r24, r24
     91a:	99 1f       	adc	r25, r25
     91c:	88 0f       	add	r24, r24
     91e:	99 1f       	adc	r25, r25
     920:	82 0f       	add	r24, r18
     922:	93 1f       	adc	r25, r19
     924:	9a 01       	movw	r18, r20
     926:	28 1b       	sub	r18, r24
     928:	39 0b       	sbc	r19, r25
     92a:	c9 01       	movw	r24, r18
     92c:	80 5d       	subi	r24, 0xD0	; 208
     92e:	97 dc       	rcall	.-1746   	; 0x25e <LCD_WriteData>
     930:	40 91 c3 05 	lds	r20, 0x05C3	; 0x8005c3 <current_score>
     934:	50 91 c4 05 	lds	r21, 0x05C4	; 0x8005c4 <current_score+0x1>
     938:	9a 01       	movw	r18, r20
     93a:	ad ec       	ldi	r26, 0xCD	; 205
     93c:	bc ec       	ldi	r27, 0xCC	; 204
     93e:	d2 d5       	rcall	.+2980   	; 0x14e4 <__umulhisi3>
     940:	96 95       	lsr	r25
     942:	87 95       	ror	r24
     944:	96 95       	lsr	r25
     946:	87 95       	ror	r24
     948:	96 95       	lsr	r25
     94a:	87 95       	ror	r24
     94c:	9c 01       	movw	r18, r24
     94e:	22 0f       	add	r18, r18
     950:	33 1f       	adc	r19, r19
     952:	88 0f       	add	r24, r24
     954:	99 1f       	adc	r25, r25
     956:	88 0f       	add	r24, r24
     958:	99 1f       	adc	r25, r25
     95a:	88 0f       	add	r24, r24
     95c:	99 1f       	adc	r25, r25
     95e:	82 0f       	add	r24, r18
     960:	93 1f       	adc	r25, r19
     962:	9a 01       	movw	r18, r20
     964:	28 1b       	sub	r18, r24
     966:	39 0b       	sbc	r19, r25
     968:	c9 01       	movw	r24, r18
     96a:	80 5d       	subi	r24, 0xD0	; 208
     96c:	78 dc       	rcall	.-1808   	; 0x25e <LCD_WriteData>
     96e:	60 91 c3 05 	lds	r22, 0x05C3	; 0x8005c3 <current_score>
     972:	81 e0       	ldi	r24, 0x01	; 1
     974:	90 e0       	ldi	r25, 0x00	; 0
     976:	cd d5       	rcall	.+2970   	; 0x1512 <eeprom_update_byte>
     978:	89 e0       	ldi	r24, 0x09	; 9
     97a:	90 e0       	ldi	r25, 0x00	; 0
     97c:	12 c0       	rjmp	.+36     	; 0x9a2 <__LOCK_REGION_LENGTH__+0x5a2>
     97e:	40 ea       	ldi	r20, 0xA0	; 160
     980:	55 e0       	ldi	r21, 0x05	; 5
     982:	62 e0       	ldi	r22, 0x02	; 2
     984:	70 e0       	ldi	r23, 0x00	; 0
     986:	81 e0       	ldi	r24, 0x01	; 1
     988:	8c dc       	rcall	.-1768   	; 0x2a2 <LCD_Write_Single_Line>
     98a:	89 e0       	ldi	r24, 0x09	; 9
     98c:	90 e0       	ldi	r25, 0x00	; 0
     98e:	09 c0       	rjmp	.+18     	; 0x9a2 <__LOCK_REGION_LENGTH__+0x5a2>
     990:	88 e0       	ldi	r24, 0x08	; 8
     992:	90 e0       	ldi	r25, 0x00	; 0
     994:	06 c0       	rjmp	.+12     	; 0x9a2 <__LOCK_REGION_LENGTH__+0x5a2>
     996:	84 e0       	ldi	r24, 0x04	; 4
     998:	90 e0       	ldi	r25, 0x00	; 0
     99a:	03 c0       	rjmp	.+6      	; 0x9a2 <__LOCK_REGION_LENGTH__+0x5a2>
     99c:	21 11       	cpse	r18, r1
     99e:	24 ce       	rjmp	.-952    	; 0x5e8 <__LOCK_REGION_LENGTH__+0x1e8>
     9a0:	70 cd       	rjmp	.-1312   	; 0x482 <__LOCK_REGION_LENGTH__+0x82>
     9a2:	df 91       	pop	r29
     9a4:	cf 91       	pop	r28
     9a6:	08 95       	ret

000009a8 <TimerSet>:
     9a8:	60 93 22 05 	sts	0x0522, r22	; 0x800522 <_avr_timer_M>
     9ac:	70 93 23 05 	sts	0x0523, r23	; 0x800523 <_avr_timer_M+0x1>
     9b0:	80 93 24 05 	sts	0x0524, r24	; 0x800524 <_avr_timer_M+0x2>
     9b4:	90 93 25 05 	sts	0x0525, r25	; 0x800525 <_avr_timer_M+0x3>
     9b8:	60 93 cc 05 	sts	0x05CC, r22	; 0x8005cc <_avr_timer_cntcurr>
     9bc:	70 93 cd 05 	sts	0x05CD, r23	; 0x8005cd <_avr_timer_cntcurr+0x1>
     9c0:	80 93 ce 05 	sts	0x05CE, r24	; 0x8005ce <_avr_timer_cntcurr+0x2>
     9c4:	90 93 cf 05 	sts	0x05CF, r25	; 0x8005cf <_avr_timer_cntcurr+0x3>
     9c8:	08 95       	ret

000009ca <TimerOn>:
     9ca:	8b e0       	ldi	r24, 0x0B	; 11
     9cc:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     9d0:	8d e7       	ldi	r24, 0x7D	; 125
     9d2:	90 e0       	ldi	r25, 0x00	; 0
     9d4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     9d8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     9dc:	82 e0       	ldi	r24, 0x02	; 2
     9de:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     9e2:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     9e6:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     9ea:	80 91 22 05 	lds	r24, 0x0522	; 0x800522 <_avr_timer_M>
     9ee:	90 91 23 05 	lds	r25, 0x0523	; 0x800523 <_avr_timer_M+0x1>
     9f2:	a0 91 24 05 	lds	r26, 0x0524	; 0x800524 <_avr_timer_M+0x2>
     9f6:	b0 91 25 05 	lds	r27, 0x0525	; 0x800525 <_avr_timer_M+0x3>
     9fa:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <_avr_timer_cntcurr>
     9fe:	90 93 cd 05 	sts	0x05CD, r25	; 0x8005cd <_avr_timer_cntcurr+0x1>
     a02:	a0 93 ce 05 	sts	0x05CE, r26	; 0x8005ce <_avr_timer_cntcurr+0x2>
     a06:	b0 93 cf 05 	sts	0x05CF, r27	; 0x8005cf <_avr_timer_cntcurr+0x3>
     a0a:	8f b7       	in	r24, 0x3f	; 63
     a0c:	80 68       	ori	r24, 0x80	; 128
     a0e:	8f bf       	out	0x3f, r24	; 63
     a10:	08 95       	ret

00000a12 <TimerISR>:
     a12:	ef 92       	push	r14
     a14:	ff 92       	push	r15
     a16:	0f 93       	push	r16
     a18:	1f 93       	push	r17
     a1a:	cf 93       	push	r28
     a1c:	df 93       	push	r29
     a1e:	81 e0       	ldi	r24, 0x01	; 1
     a20:	80 93 d0 05 	sts	0x05D0, r24	; 0x8005d0 <TimerFlag>
     a24:	c1 ed       	ldi	r28, 0xD1	; 209
     a26:	d5 e0       	ldi	r29, 0x05	; 5
     a28:	0f 2e       	mov	r0, r31
     a2a:	f1 e3       	ldi	r31, 0x31	; 49
     a2c:	ef 2e       	mov	r14, r31
     a2e:	f6 e0       	ldi	r31, 0x06	; 6
     a30:	ff 2e       	mov	r15, r31
     a32:	f0 2d       	mov	r31, r0
     a34:	8e 01       	movw	r16, r28
     a36:	4e 81       	ldd	r20, Y+6	; 0x06
     a38:	5f 81       	ldd	r21, Y+7	; 0x07
     a3a:	68 85       	ldd	r22, Y+8	; 0x08
     a3c:	79 85       	ldd	r23, Y+9	; 0x09
     a3e:	8a 81       	ldd	r24, Y+2	; 0x02
     a40:	9b 81       	ldd	r25, Y+3	; 0x03
     a42:	ac 81       	ldd	r26, Y+4	; 0x04
     a44:	bd 81       	ldd	r27, Y+5	; 0x05
     a46:	48 17       	cp	r20, r24
     a48:	59 07       	cpc	r21, r25
     a4a:	6a 07       	cpc	r22, r26
     a4c:	7b 07       	cpc	r23, r27
     a4e:	58 f0       	brcs	.+22     	; 0xa66 <TimerISR+0x54>
     a50:	ea 85       	ldd	r30, Y+10	; 0x0a
     a52:	fb 85       	ldd	r31, Y+11	; 0x0b
     a54:	88 81       	ld	r24, Y
     a56:	99 81       	ldd	r25, Y+1	; 0x01
     a58:	09 95       	icall
     a5a:	99 83       	std	Y+1, r25	; 0x01
     a5c:	88 83       	st	Y, r24
     a5e:	1e 82       	std	Y+6, r1	; 0x06
     a60:	1f 82       	std	Y+7, r1	; 0x07
     a62:	18 86       	std	Y+8, r1	; 0x08
     a64:	19 86       	std	Y+9, r1	; 0x09
     a66:	f8 01       	movw	r30, r16
     a68:	86 81       	ldd	r24, Z+6	; 0x06
     a6a:	97 81       	ldd	r25, Z+7	; 0x07
     a6c:	a0 85       	ldd	r26, Z+8	; 0x08
     a6e:	b1 85       	ldd	r27, Z+9	; 0x09
     a70:	05 96       	adiw	r24, 0x05	; 5
     a72:	a1 1d       	adc	r26, r1
     a74:	b1 1d       	adc	r27, r1
     a76:	86 83       	std	Z+6, r24	; 0x06
     a78:	97 83       	std	Z+7, r25	; 0x07
     a7a:	a0 87       	std	Z+8, r26	; 0x08
     a7c:	b1 87       	std	Z+9, r27	; 0x09
     a7e:	2c 96       	adiw	r28, 0x0c	; 12
     a80:	ce 15       	cp	r28, r14
     a82:	df 05       	cpc	r29, r15
     a84:	b9 f6       	brne	.-82     	; 0xa34 <TimerISR+0x22>
     a86:	df 91       	pop	r29
     a88:	cf 91       	pop	r28
     a8a:	1f 91       	pop	r17
     a8c:	0f 91       	pop	r16
     a8e:	ff 90       	pop	r15
     a90:	ef 90       	pop	r14
     a92:	08 95       	ret

00000a94 <__vector_13>:
     a94:	1f 92       	push	r1
     a96:	0f 92       	push	r0
     a98:	0f b6       	in	r0, 0x3f	; 63
     a9a:	0f 92       	push	r0
     a9c:	11 24       	eor	r1, r1
     a9e:	0b b6       	in	r0, 0x3b	; 59
     aa0:	0f 92       	push	r0
     aa2:	2f 93       	push	r18
     aa4:	3f 93       	push	r19
     aa6:	4f 93       	push	r20
     aa8:	5f 93       	push	r21
     aaa:	6f 93       	push	r22
     aac:	7f 93       	push	r23
     aae:	8f 93       	push	r24
     ab0:	9f 93       	push	r25
     ab2:	af 93       	push	r26
     ab4:	bf 93       	push	r27
     ab6:	ef 93       	push	r30
     ab8:	ff 93       	push	r31
     aba:	80 91 cc 05 	lds	r24, 0x05CC	; 0x8005cc <_avr_timer_cntcurr>
     abe:	90 91 cd 05 	lds	r25, 0x05CD	; 0x8005cd <_avr_timer_cntcurr+0x1>
     ac2:	a0 91 ce 05 	lds	r26, 0x05CE	; 0x8005ce <_avr_timer_cntcurr+0x2>
     ac6:	b0 91 cf 05 	lds	r27, 0x05CF	; 0x8005cf <_avr_timer_cntcurr+0x3>
     aca:	01 97       	sbiw	r24, 0x01	; 1
     acc:	a1 09       	sbc	r26, r1
     ace:	b1 09       	sbc	r27, r1
     ad0:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <_avr_timer_cntcurr>
     ad4:	90 93 cd 05 	sts	0x05CD, r25	; 0x8005cd <_avr_timer_cntcurr+0x1>
     ad8:	a0 93 ce 05 	sts	0x05CE, r26	; 0x8005ce <_avr_timer_cntcurr+0x2>
     adc:	b0 93 cf 05 	sts	0x05CF, r27	; 0x8005cf <_avr_timer_cntcurr+0x3>
     ae0:	89 2b       	or	r24, r25
     ae2:	8a 2b       	or	r24, r26
     ae4:	8b 2b       	or	r24, r27
     ae6:	89 f4       	brne	.+34     	; 0xb0a <__vector_13+0x76>
     ae8:	94 df       	rcall	.-216    	; 0xa12 <TimerISR>
     aea:	80 91 22 05 	lds	r24, 0x0522	; 0x800522 <_avr_timer_M>
     aee:	90 91 23 05 	lds	r25, 0x0523	; 0x800523 <_avr_timer_M+0x1>
     af2:	a0 91 24 05 	lds	r26, 0x0524	; 0x800524 <_avr_timer_M+0x2>
     af6:	b0 91 25 05 	lds	r27, 0x0525	; 0x800525 <_avr_timer_M+0x3>
     afa:	80 93 cc 05 	sts	0x05CC, r24	; 0x8005cc <_avr_timer_cntcurr>
     afe:	90 93 cd 05 	sts	0x05CD, r25	; 0x8005cd <_avr_timer_cntcurr+0x1>
     b02:	a0 93 ce 05 	sts	0x05CE, r26	; 0x8005ce <_avr_timer_cntcurr+0x2>
     b06:	b0 93 cf 05 	sts	0x05CF, r27	; 0x8005cf <_avr_timer_cntcurr+0x3>
     b0a:	ff 91       	pop	r31
     b0c:	ef 91       	pop	r30
     b0e:	bf 91       	pop	r27
     b10:	af 91       	pop	r26
     b12:	9f 91       	pop	r25
     b14:	8f 91       	pop	r24
     b16:	7f 91       	pop	r23
     b18:	6f 91       	pop	r22
     b1a:	5f 91       	pop	r21
     b1c:	4f 91       	pop	r20
     b1e:	3f 91       	pop	r19
     b20:	2f 91       	pop	r18
     b22:	0f 90       	pop	r0
     b24:	0b be       	out	0x3b, r0	; 59
     b26:	0f 90       	pop	r0
     b28:	0f be       	out	0x3f, r0	; 63
     b2a:	0f 90       	pop	r0
     b2c:	1f 90       	pop	r1
     b2e:	18 95       	reti

00000b30 <Shift_Init>:

void Shift_Init() {
    DDRC = Set_Bit(DDRC, DATA);
     b30:	3a 9a       	sbi	0x07, 2	; 7
    DDRC = Set_Bit(DDRC, SHIFT);
     b32:	3b 9a       	sbi	0x07, 3	; 7
    DDRC = Set_Bit(DDRC, STORE);
     b34:	3c 9a       	sbi	0x07, 4	; 7
     b36:	08 95       	ret

00000b38 <Shift_Data_High>:
}

//Set Data line high
void Shift_Data_High() {
    PORTC = Set_Bit(PORTC, DATA);
     b38:	42 9a       	sbi	0x08, 2	; 8
     b3a:	08 95       	ret

00000b3c <Shift_Data_Low>:
}

//Set Data line low
void Shift_Data_Low() {
    PORTC = Clear_Bit(PORTC, DATA);
     b3c:	42 98       	cbi	0x08, 2	; 8
     b3e:	08 95       	ret

00000b40 <Shift_Pulse>:
}

//Pulse Shift Clock
void Shift_Pulse() {
    PORTC = Set_Bit(PORTC, SHIFT);
     b40:	43 9a       	sbi	0x08, 3	; 8
    PORTC = Clear_Bit(PORTC, SHIFT);
     b42:	43 98       	cbi	0x08, 3	; 8
     b44:	08 95       	ret

00000b46 <Shift_Store>:
}

//Pulse Store Clock
void Shift_Store() {
    PORTC = Set_Bit(PORTC, STORE);
     b46:	44 9a       	sbi	0x08, 4	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     b48:	81 e0       	ldi	r24, 0x01	; 1
     b4a:	90 e0       	ldi	r25, 0x00	; 0
     b4c:	fc 01       	movw	r30, r24
     b4e:	31 97       	sbiw	r30, 0x01	; 1
     b50:	f1 f7       	brne	.-4      	; 0xb4e <Shift_Store+0x8>
    //SET_BIT(SHIFT_PORT,STORE_LINE);
    _delay_loop_2(1);

    //CLR_BIT(SHIFT_PORT,STORE_LINE);
    PORTC = Clear_Bit(PORTC, STORE);
     b52:	44 98       	cbi	0x08, 4	; 8
     b54:	01 97       	sbiw	r24, 0x01	; 1
     b56:	f1 f7       	brne	.-4      	; 0xb54 <Shift_Store+0xe>
     b58:	08 95       	ret

00000b5a <Shift_transmit_data>:
    _delay_loop_2(1);
}


void Shift_transmit_data(unsigned char data) {
     b5a:	cf 93       	push	r28
     b5c:	df 93       	push	r29
     b5e:	d8 2f       	mov	r29, r24
     b60:	c8 e0       	ldi	r28, 0x08	; 8
    for(unsigned char i=0;i<8;i++) {
        if(data & 0x80) {
     b62:	dd 23       	and	r29, r29
     b64:	14 f4       	brge	.+4      	; 0xb6a <Shift_transmit_data+0x10>
            Shift_Data_High();
     b66:	e8 df       	rcall	.-48     	; 0xb38 <Shift_Data_High>
     b68:	01 c0       	rjmp	.+2      	; 0xb6c <Shift_transmit_data+0x12>
            } else {
            Shift_Data_Low();
     b6a:	e8 df       	rcall	.-48     	; 0xb3c <Shift_Data_Low>
        }

        Shift_Pulse();
     b6c:	e9 df       	rcall	.-46     	; 0xb40 <Shift_Pulse>
     b6e:	dd 0f       	add	r29, r29
        data=data << 1;
     b70:	c1 50       	subi	r28, 0x01	; 1
    _delay_loop_2(1);
}


void Shift_transmit_data(unsigned char data) {
    for(unsigned char i=0;i<8;i++) {
     b72:	b9 f7       	brne	.-18     	; 0xb62 <Shift_transmit_data+0x8>

        Shift_Pulse();
        data=data << 1;
    }

    Shift_Store();
     b74:	e8 df       	rcall	.-48     	; 0xb46 <Shift_Store>
     b76:	df 91       	pop	r29
     b78:	cf 91       	pop	r28
     b7a:	08 95       	ret

00000b7c <RGB_Matrix_Tick>:
     b7c:	ef 92       	push	r14
    }

    return state;
}

int RGB_Matrix_Tick(int state){
     b7e:	ff 92       	push	r15
     b80:	0f 93       	push	r16
     b82:	1f 93       	push	r17
     b84:	cf 93       	push	r28
     b86:	df 93       	push	r29
    static unsigned char play_note;
    static unsigned char rest_note;
    static unsigned char note_to_hit;
    switch(state){
     b88:	81 30       	cpi	r24, 0x01	; 1
     b8a:	91 05       	cpc	r25, r1
     b8c:	31 f0       	breq	.+12     	; 0xb9a <RGB_Matrix_Tick+0x1e>
     b8e:	82 30       	cpi	r24, 0x02	; 2
     b90:	91 05       	cpc	r25, r1
     b92:	61 f0       	breq	.+24     	; 0xbac <RGB_Matrix_Tick+0x30>
     b94:	00 97       	sbiw	r24, 0x00	; 0
     b96:	79 f4       	brne	.+30     	; 0xbb6 <RGB_Matrix_Tick+0x3a>
     b98:	1b c0       	rjmp	.+54     	; 0xbd0 <RGB_Matrix_Tick+0x54>
        case RGB_INIT:
            state = RGB_MENU;
            break;
        case RGB_MENU:
            if(playing){
     b9a:	80 91 b8 05 	lds	r24, 0x05B8	; 0x8005b8 <playing>
     b9e:	88 23       	and	r24, r24
     ba0:	b9 f0       	breq	.+46     	; 0xbd0 <RGB_Matrix_Tick+0x54>
                play_note = 0;
     ba2:	10 92 b2 05 	sts	0x05B2, r1	; 0x8005b2 <play_note.2281>
                rest_note = 0;
     ba6:	10 92 b1 05 	sts	0x05B1, r1	; 0x8005b1 <rest_note.2282>
                state = RGB_SONG;
                break;
     baa:	0c c0       	rjmp	.+24     	; 0xbc4 <RGB_Matrix_Tick+0x48>
            else{
                state = RGB_MENU;
                break;
            }    
        case RGB_SONG:
            if(song_finished){
     bac:	80 91 ba 05 	lds	r24, 0x05BA	; 0x8005ba <song_finished>
     bb0:	88 23       	and	r24, r24
     bb2:	41 f0       	breq	.+16     	; 0xbc4 <RGB_Matrix_Tick+0x48>
     bb4:	0d c0       	rjmp	.+26     	; 0xbd0 <RGB_Matrix_Tick+0x54>
            else{
                state = RGB_SONG;
                break;
            }
    }
    switch(state){
     bb6:	81 30       	cpi	r24, 0x01	; 1
     bb8:	91 05       	cpc	r25, r1
     bba:	51 f0       	breq	.+20     	; 0xbd0 <RGB_Matrix_Tick+0x54>
     bbc:	82 30       	cpi	r24, 0x02	; 2
     bbe:	91 05       	cpc	r25, r1
     bc0:	09 f0       	breq	.+2      	; 0xbc4 <RGB_Matrix_Tick+0x48>
     bc2:	cf c0       	rjmp	.+414    	; 0xd62 <RGB_Matrix_Tick+0x1e6>
     bc4:	0b eb       	ldi	r16, 0xBB	; 187
     bc6:	15 e0       	ldi	r17, 0x05	; 5
     bc8:	23 ec       	ldi	r18, 0xC3	; 195
     bca:	35 e0       	ldi	r19, 0x05	; 5
    }

    return state;
}

int RGB_Matrix_Tick(int state){
     bcc:	f8 01       	movw	r30, r16
     bce:	35 c0       	rjmp	.+106    	; 0xc3a <RGB_Matrix_Tick+0xbe>
    }
    switch(state){
        case RGB_INIT:
            break;
        case RGB_MENU:
            if(LEFT || RIGHT || UP || DOWN){
     bd0:	80 91 cb 05 	lds	r24, 0x05CB	; 0x8005cb <LEFT>
     bd4:	88 23       	and	r24, r24
     bd6:	49 f0       	breq	.+18     	; 0xbea <RGB_Matrix_Tick+0x6e>
     bd8:	00 e0       	ldi	r16, 0x00	; 0
     bda:	11 e0       	ldi	r17, 0x01	; 1
    }

    return state;
}

int RGB_Matrix_Tick(int state){
     bdc:	c0 e0       	ldi	r28, 0x00	; 0
     bde:	d0 e0       	ldi	r29, 0x00	; 0
        case RGB_INIT:
            break;
        case RGB_MENU:
            if(LEFT || RIGHT || UP || DOWN){
                for(unsigned char i = 0; i < 8; i++){
                    Shift_transmit_data(128 >> i);
     be0:	68 94       	set
     be2:	ee 24       	eor	r14, r14
     be4:	e7 f8       	bld	r14, 7
     be6:	f1 2c       	mov	r15, r1
     be8:	0d c0       	rjmp	.+26     	; 0xc04 <RGB_Matrix_Tick+0x88>
    }
    switch(state){
        case RGB_INIT:
            break;
        case RGB_MENU:
            if(LEFT || RIGHT || UP || DOWN){
     bea:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <RIGHT>
     bee:	81 11       	cpse	r24, r1
     bf0:	f3 cf       	rjmp	.-26     	; 0xbd8 <RGB_Matrix_Tick+0x5c>
     bf2:	80 91 c9 05 	lds	r24, 0x05C9	; 0x8005c9 <UP>
     bf6:	81 11       	cpse	r24, r1
     bf8:	ef cf       	rjmp	.-34     	; 0xbd8 <RGB_Matrix_Tick+0x5c>
     bfa:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <DOWN>
     bfe:	81 11       	cpse	r24, r1
     c00:	eb cf       	rjmp	.-42     	; 0xbd8 <RGB_Matrix_Tick+0x5c>
     c02:	14 c0       	rjmp	.+40     	; 0xc2c <RGB_Matrix_Tick+0xb0>
                for(unsigned char i = 0; i < 8; i++){
                    Shift_transmit_data(128 >> i);
     c04:	c7 01       	movw	r24, r14
     c06:	0c 2e       	mov	r0, r28
     c08:	02 c0       	rjmp	.+4      	; 0xc0e <RGB_Matrix_Tick+0x92>
     c0a:	95 95       	asr	r25
     c0c:	87 95       	ror	r24
     c0e:	0a 94       	dec	r0
     c10:	e2 f7       	brpl	.-8      	; 0xc0a <RGB_Matrix_Tick+0x8e>
     c12:	a3 df       	rcall	.-186    	; 0xb5a <Shift_transmit_data>
                    Shift_transmit_data(~pic[i]);
     c14:	f8 01       	movw	r30, r16
     c16:	81 91       	ld	r24, Z+
     c18:	8f 01       	movw	r16, r30
     c1a:	80 95       	com	r24
     c1c:	9e df       	rcall	.-196    	; 0xb5a <Shift_transmit_data>
                    delay_ms(3);
     c1e:	83 e0       	ldi	r24, 0x03	; 3
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	f6 da       	rcall	.-2580   	; 0x210 <delay_ms>
     c24:	21 96       	adiw	r28, 0x01	; 1
    switch(state){
        case RGB_INIT:
            break;
        case RGB_MENU:
            if(LEFT || RIGHT || UP || DOWN){
                for(unsigned char i = 0; i < 8; i++){
     c26:	c8 30       	cpi	r28, 0x08	; 8
     c28:	d1 05       	cpc	r29, r1
                    Shift_transmit_data(128 >> i);
                    Shift_transmit_data(~pic[i]);
                    delay_ms(3);
                }
            }
            Shift_transmit_data(0);
     c2a:	61 f7       	brne	.-40     	; 0xc04 <RGB_Matrix_Tick+0x88>
     c2c:	80 e0       	ldi	r24, 0x00	; 0
            Shift_transmit_data(0);
     c2e:	95 df       	rcall	.-214    	; 0xb5a <Shift_transmit_data>
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	93 df       	rcall	.-218    	; 0xb5a <Shift_transmit_data>
            
            break;
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	90 e0       	ldi	r25, 0x00	; 0
     c38:	94 c0       	rjmp	.+296    	; 0xd62 <RGB_Matrix_Tick+0x1e6>
        case RGB_SONG:
            for(unsigned j = 0; j < 8; j++){
                RGB_DISPLAY_NOTES[j] <<= 1;
     c3a:	80 81       	ld	r24, Z
     c3c:	88 0f       	add	r24, r24
     c3e:	81 93       	st	Z+, r24
            Shift_transmit_data(0);
            Shift_transmit_data(0);
            
            break;
        case RGB_SONG:
            for(unsigned j = 0; j < 8; j++){
     c40:	2e 17       	cp	r18, r30
     c42:	3f 07       	cpc	r19, r31
     c44:	d1 f7       	brne	.-12     	; 0xc3a <RGB_Matrix_Tick+0xbe>
                RGB_DISPLAY_NOTES[j] <<= 1;
            }
            if(play_note < songs[current_song_choice].timing[current_note]){
     c46:	20 91 c6 05 	lds	r18, 0x05C6	; 0x8005c6 <current_song_choice>
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	80 91 c7 05 	lds	r24, 0x05C7	; 0x8005c7 <current_note>
     c50:	90 e0       	ldi	r25, 0x00	; 0
     c52:	40 91 b2 05 	lds	r20, 0x05B2	; 0x8005b2 <play_note.2281>
     c56:	6c e1       	ldi	r22, 0x1C	; 28
     c58:	74 e0       	ldi	r23, 0x04	; 4
     c5a:	26 9f       	mul	r18, r22
     c5c:	f0 01       	movw	r30, r0
     c5e:	27 9f       	mul	r18, r23
     c60:	f0 0d       	add	r31, r0
     c62:	36 9f       	mul	r19, r22
     c64:	f0 0d       	add	r31, r0
     c66:	11 24       	eor	r1, r1
     c68:	e8 0f       	add	r30, r24
     c6a:	f9 1f       	adc	r31, r25
     c6c:	e7 57       	subi	r30, 0x77	; 119
     c6e:	f7 4f       	sbci	r31, 0xF7	; 247
     c70:	50 81       	ld	r21, Z
     c72:	45 17       	cp	r20, r21
     c74:	e0 f5       	brcc	.+120    	; 0xcee <RGB_Matrix_Tick+0x172>
                note_to_hit = songs[current_song_choice].hit[current_note];
     c76:	26 9f       	mul	r18, r22
     c78:	f0 01       	movw	r30, r0
     c7a:	27 9f       	mul	r18, r23
     c7c:	f0 0d       	add	r31, r0
     c7e:	36 9f       	mul	r19, r22
     c80:	f0 0d       	add	r31, r0
     c82:	11 24       	eor	r1, r1
     c84:	8e 0f       	add	r24, r30
     c86:	9f 1f       	adc	r25, r31
     c88:	fc 01       	movw	r30, r24
     c8a:	eb 54       	subi	r30, 0x4B	; 75
     c8c:	f6 4f       	sbci	r31, 0xF6	; 246
     c8e:	80 81       	ld	r24, Z
                
                if(note_to_hit == 1){
     c90:	81 30       	cpi	r24, 0x01	; 1
     c92:	49 f4       	brne	.+18     	; 0xca6 <RGB_Matrix_Tick+0x12a>
                    RGB_DISPLAY_NOTES[0] |= 1;
     c94:	eb eb       	ldi	r30, 0xBB	; 187
     c96:	f5 e0       	ldi	r31, 0x05	; 5
     c98:	80 81       	ld	r24, Z
     c9a:	81 60       	ori	r24, 0x01	; 1
     c9c:	80 83       	st	Z, r24
                    RGB_DISPLAY_NOTES[1] |= 1;
     c9e:	81 81       	ldd	r24, Z+1	; 0x01
     ca0:	81 60       	ori	r24, 0x01	; 1
     ca2:	81 83       	std	Z+1, r24	; 0x01
     ca4:	20 c0       	rjmp	.+64     	; 0xce6 <RGB_Matrix_Tick+0x16a>
                }
                else if(note_to_hit == 2){
     ca6:	82 30       	cpi	r24, 0x02	; 2
     ca8:	49 f4       	brne	.+18     	; 0xcbc <RGB_Matrix_Tick+0x140>
                    RGB_DISPLAY_NOTES[2] |= 1;
     caa:	eb eb       	ldi	r30, 0xBB	; 187
     cac:	f5 e0       	ldi	r31, 0x05	; 5
     cae:	82 81       	ldd	r24, Z+2	; 0x02
     cb0:	81 60       	ori	r24, 0x01	; 1
     cb2:	82 83       	std	Z+2, r24	; 0x02
                    RGB_DISPLAY_NOTES[3] |= 1;
     cb4:	83 81       	ldd	r24, Z+3	; 0x03
     cb6:	81 60       	ori	r24, 0x01	; 1
     cb8:	83 83       	std	Z+3, r24	; 0x03
     cba:	15 c0       	rjmp	.+42     	; 0xce6 <RGB_Matrix_Tick+0x16a>
                }
                else if(note_to_hit == 4){
     cbc:	84 30       	cpi	r24, 0x04	; 4
     cbe:	49 f4       	brne	.+18     	; 0xcd2 <RGB_Matrix_Tick+0x156>
                    RGB_DISPLAY_NOTES[4] |= 1;
     cc0:	eb eb       	ldi	r30, 0xBB	; 187
     cc2:	f5 e0       	ldi	r31, 0x05	; 5
     cc4:	84 81       	ldd	r24, Z+4	; 0x04
     cc6:	81 60       	ori	r24, 0x01	; 1
     cc8:	84 83       	std	Z+4, r24	; 0x04
                    RGB_DISPLAY_NOTES[5] |= 1;
     cca:	85 81       	ldd	r24, Z+5	; 0x05
     ccc:	81 60       	ori	r24, 0x01	; 1
     cce:	85 83       	std	Z+5, r24	; 0x05
     cd0:	0a c0       	rjmp	.+20     	; 0xce6 <RGB_Matrix_Tick+0x16a>
                }    
                else if(note_to_hit == 8){
     cd2:	88 30       	cpi	r24, 0x08	; 8
     cd4:	41 f4       	brne	.+16     	; 0xce6 <RGB_Matrix_Tick+0x16a>
                    RGB_DISPLAY_NOTES[6] |= 1;
     cd6:	eb eb       	ldi	r30, 0xBB	; 187
     cd8:	f5 e0       	ldi	r31, 0x05	; 5
     cda:	86 81       	ldd	r24, Z+6	; 0x06
     cdc:	81 60       	ori	r24, 0x01	; 1
     cde:	86 83       	std	Z+6, r24	; 0x06
                    RGB_DISPLAY_NOTES[7] |= 1;
     ce0:	87 81       	ldd	r24, Z+7	; 0x07
     ce2:	81 60       	ori	r24, 0x01	; 1
     ce4:	87 83       	std	Z+7, r24	; 0x07
                }    
                play_note++;        
     ce6:	4f 5f       	subi	r20, 0xFF	; 255
     ce8:	40 93 b2 05 	sts	0x05B2, r20	; 0x8005b2 <play_note.2281>
     cec:	33 c0       	rjmp	.+102    	; 0xd54 <RGB_Matrix_Tick+0x1d8>
            }
            else{
                note_to_hit = 0;
                if(rest_note < songs[current_song_choice].rest_timing[current_note]){
     cee:	40 91 b1 05 	lds	r20, 0x05B1	; 0x8005b1 <rest_note.2282>
     cf2:	6c e1       	ldi	r22, 0x1C	; 28
     cf4:	74 e0       	ldi	r23, 0x04	; 4
     cf6:	26 9f       	mul	r18, r22
     cf8:	f0 01       	movw	r30, r0
     cfa:	27 9f       	mul	r18, r23
     cfc:	f0 0d       	add	r31, r0
     cfe:	36 9f       	mul	r19, r22
     d00:	f0 0d       	add	r31, r0
     d02:	11 24       	eor	r1, r1
     d04:	8e 0f       	add	r24, r30
     d06:	9f 1f       	adc	r25, r31
     d08:	fc 01       	movw	r30, r24
     d0a:	e1 5e       	subi	r30, 0xE1	; 225
     d0c:	f6 4f       	sbci	r31, 0xF6	; 246
     d0e:	80 81       	ld	r24, Z
     d10:	48 17       	cp	r20, r24
     d12:	20 f4       	brcc	.+8      	; 0xd1c <RGB_Matrix_Tick+0x1a0>
                    rest_note++;
     d14:	4f 5f       	subi	r20, 0xFF	; 255
     d16:	40 93 b1 05 	sts	0x05B1, r20	; 0x8005b1 <rest_note.2282>
     d1a:	1c c0       	rjmp	.+56     	; 0xd54 <RGB_Matrix_Tick+0x1d8>
                }
                else{
                    play_note = 0;
     d1c:	10 92 b2 05 	sts	0x05B2, r1	; 0x8005b2 <play_note.2281>
                    rest_note = 0;   
     d20:	10 92 b1 05 	sts	0x05B1, r1	; 0x8005b1 <rest_note.2282>
     d24:	17 c0       	rjmp	.+46     	; 0xd54 <RGB_Matrix_Tick+0x1d8>
                }     
            }                   
            for(unsigned char i = 0; i < 8; i++){
                Shift_transmit_data(128 >> i);
     d26:	c7 01       	movw	r24, r14
     d28:	0c 2e       	mov	r0, r28
     d2a:	02 c0       	rjmp	.+4      	; 0xd30 <RGB_Matrix_Tick+0x1b4>
     d2c:	95 95       	asr	r25
     d2e:	87 95       	ror	r24
     d30:	0a 94       	dec	r0
     d32:	e2 f7       	brpl	.-8      	; 0xd2c <RGB_Matrix_Tick+0x1b0>
                Shift_transmit_data(~RGB_DISPLAY_NOTES[i]);
     d34:	12 df       	rcall	.-476    	; 0xb5a <Shift_transmit_data>
     d36:	f8 01       	movw	r30, r16
     d38:	81 91       	ld	r24, Z+
     d3a:	8f 01       	movw	r16, r30
     d3c:	80 95       	com	r24
                delay_ms(5);
     d3e:	0d df       	rcall	.-486    	; 0xb5a <Shift_transmit_data>
     d40:	85 e0       	ldi	r24, 0x05	; 5
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	65 da       	rcall	.-2870   	; 0x210 <delay_ms>
     d46:	21 96       	adiw	r28, 0x01	; 1
                else{
                    play_note = 0;
                    rest_note = 0;   
                }     
            }                   
            for(unsigned char i = 0; i < 8; i++){
     d48:	c8 30       	cpi	r28, 0x08	; 8
     d4a:	d1 05       	cpc	r29, r1
     d4c:	61 f7       	brne	.-40     	; 0xd26 <RGB_Matrix_Tick+0x1aa>
     d4e:	82 e0       	ldi	r24, 0x02	; 2
     d50:	90 e0       	ldi	r25, 0x00	; 0
            
            }
            break;
    }
    
    return state;
     d52:	07 c0       	rjmp	.+14     	; 0xd62 <RGB_Matrix_Tick+0x1e6>
    }

    return state;
}

int RGB_Matrix_Tick(int state){
     d54:	c0 e0       	ldi	r28, 0x00	; 0
     d56:	d0 e0       	ldi	r29, 0x00	; 0
                    play_note = 0;
                    rest_note = 0;   
                }     
            }                   
            for(unsigned char i = 0; i < 8; i++){
                Shift_transmit_data(128 >> i);
     d58:	68 94       	set
     d5a:	ee 24       	eor	r14, r14
     d5c:	e7 f8       	bld	r14, 7
     d5e:	f1 2c       	mov	r15, r1
     d60:	e2 cf       	rjmp	.-60     	; 0xd26 <RGB_Matrix_Tick+0x1aa>
            }
            break;
    }
    
    return state;
}
     d62:	df 91       	pop	r29
     d64:	cf 91       	pop	r28
     d66:	1f 91       	pop	r17
     d68:	0f 91       	pop	r16
     d6a:	ff 90       	pop	r15
     d6c:	ef 90       	pop	r14
     d6e:	08 95       	ret

00000d70 <set_PWM>:

// 0.954 hz is lowest frequency possible with this function,
// based on settings in PWM_on()
// Passing in 0 as the frequency will stop the speaker from generating sound
void set_PWM(double frequency) {
     d70:	cf 92       	push	r12
     d72:	df 92       	push	r13
     d74:	ef 92       	push	r14
     d76:	ff 92       	push	r15
     d78:	6b 01       	movw	r12, r22
     d7a:	7c 01       	movw	r14, r24
	static double current_frequency; // Keeps track of the currently set frequency
	// Will only update the registers when the frequency changes, otherwise allows
	// music to play uninterrupted.
	if (frequency != current_frequency) {
     d7c:	9b 01       	movw	r18, r22
     d7e:	ac 01       	movw	r20, r24
     d80:	60 91 b4 05 	lds	r22, 0x05B4	; 0x8005b4 <current_frequency.2121>
     d84:	70 91 b5 05 	lds	r23, 0x05B5	; 0x8005b5 <current_frequency.2121+0x1>
     d88:	80 91 b6 05 	lds	r24, 0x05B6	; 0x8005b6 <current_frequency.2121+0x2>
     d8c:	90 91 b7 05 	lds	r25, 0x05B7	; 0x8005b7 <current_frequency.2121+0x3>
     d90:	27 d2       	rcall	.+1102   	; 0x11e0 <__cmpsf2>
     d92:	88 23       	and	r24, r24
     d94:	09 f4       	brne	.+2      	; 0xd98 <set_PWM+0x28>
     d96:	52 c0       	rjmp	.+164    	; 0xe3c <set_PWM+0xcc>
		if (!frequency) { TCCR3B &= 0x08; } //stops timer/counter
     d98:	20 e0       	ldi	r18, 0x00	; 0
     d9a:	30 e0       	ldi	r19, 0x00	; 0
     d9c:	a9 01       	movw	r20, r18
     d9e:	c7 01       	movw	r24, r14
     da0:	b6 01       	movw	r22, r12
     da2:	1e d2       	rcall	.+1084   	; 0x11e0 <__cmpsf2>
     da4:	81 11       	cpse	r24, r1
     da6:	06 c0       	rjmp	.+12     	; 0xdb4 <set_PWM+0x44>
     da8:	e1 e9       	ldi	r30, 0x91	; 145
     daa:	f0 e0       	ldi	r31, 0x00	; 0
     dac:	80 81       	ld	r24, Z
     dae:	88 70       	andi	r24, 0x08	; 8
     db0:	80 83       	st	Z, r24
     db2:	05 c0       	rjmp	.+10     	; 0xdbe <set_PWM+0x4e>
		else { TCCR3B |= 0x03; } // resumes/continues timer/counter
     db4:	e1 e9       	ldi	r30, 0x91	; 145
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	80 81       	ld	r24, Z
     dba:	83 60       	ori	r24, 0x03	; 3
     dbc:	80 83       	st	Z, r24
		
		// prevents OCR3A from overflowing, using prescaler 64
		// 0.954 is smallest frequency that will not result in overflow
		if (frequency < 0.954) { OCR3A = 0xFFFF; }
     dbe:	28 e5       	ldi	r18, 0x58	; 88
     dc0:	39 e3       	ldi	r19, 0x39	; 57
     dc2:	44 e7       	ldi	r20, 0x74	; 116
     dc4:	5f e3       	ldi	r21, 0x3F	; 63
     dc6:	c7 01       	movw	r24, r14
     dc8:	b6 01       	movw	r22, r12
     dca:	0a d2       	rcall	.+1044   	; 0x11e0 <__cmpsf2>
     dcc:	88 23       	and	r24, r24
     dce:	3c f4       	brge	.+14     	; 0xdde <set_PWM+0x6e>
     dd0:	8f ef       	ldi	r24, 0xFF	; 255
     dd2:	9f ef       	ldi	r25, 0xFF	; 255
     dd4:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     dd8:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
     ddc:	23 c0       	rjmp	.+70     	; 0xe24 <set_PWM+0xb4>
		
		// prevents OCR0A from underflowing, using prescaler 64					
		// 31250 is largest frequency that will not result in underflow
		else if (frequency > 31250) { OCR3A = 0x0000; }
     dde:	20 e0       	ldi	r18, 0x00	; 0
     de0:	34 e2       	ldi	r19, 0x24	; 36
     de2:	44 ef       	ldi	r20, 0xF4	; 244
     de4:	56 e4       	ldi	r21, 0x46	; 70
     de6:	c7 01       	movw	r24, r14
     de8:	b6 01       	movw	r22, r12
     dea:	0c d3       	rcall	.+1560   	; 0x1404 <__gesf2>
     dec:	18 16       	cp	r1, r24
     dee:	2c f4       	brge	.+10     	; 0xdfa <set_PWM+0x8a>
     df0:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     df4:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
     df8:	15 c0       	rjmp	.+42     	; 0xe24 <set_PWM+0xb4>
		
		// set OCR3A based on desired frequency
		else { OCR3A = (short)(8000000 / (128 * frequency)) - 1; }
     dfa:	20 e0       	ldi	r18, 0x00	; 0
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	40 e0       	ldi	r20, 0x00	; 0
     e00:	53 e4       	ldi	r21, 0x43	; 67
     e02:	c7 01       	movw	r24, r14
     e04:	b6 01       	movw	r22, r12
     e06:	02 d3       	rcall	.+1540   	; 0x140c <__mulsf3>
     e08:	9b 01       	movw	r18, r22
     e0a:	ac 01       	movw	r20, r24
     e0c:	60 e0       	ldi	r22, 0x00	; 0
     e0e:	74 e2       	ldi	r23, 0x24	; 36
     e10:	84 ef       	ldi	r24, 0xF4	; 244
     e12:	9a e4       	ldi	r25, 0x4A	; 74
     e14:	e9 d1       	rcall	.+978    	; 0x11e8 <__divsf3>
     e16:	50 d2       	rcall	.+1184   	; 0x12b8 <__fixsfsi>
     e18:	61 50       	subi	r22, 0x01	; 1
     e1a:	71 09       	sbc	r23, r1
     e1c:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     e20:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>

		TCNT3 = 0; // resets counter
     e24:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
     e28:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
		current_frequency = frequency; // Updates the current frequency
     e2c:	c0 92 b4 05 	sts	0x05B4, r12	; 0x8005b4 <current_frequency.2121>
     e30:	d0 92 b5 05 	sts	0x05B5, r13	; 0x8005b5 <current_frequency.2121+0x1>
     e34:	e0 92 b6 05 	sts	0x05B6, r14	; 0x8005b6 <current_frequency.2121+0x2>
     e38:	f0 92 b7 05 	sts	0x05B7, r15	; 0x8005b7 <current_frequency.2121+0x3>
	}
}
     e3c:	ff 90       	pop	r15
     e3e:	ef 90       	pop	r14
     e40:	df 90       	pop	r13
     e42:	cf 90       	pop	r12
     e44:	08 95       	ret

00000e46 <PWM_on>:

void PWM_on() {
	TCCR3A = (1 << COM3A0);
     e46:	80 e4       	ldi	r24, 0x40	; 64
     e48:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	// COM3A0: Toggle PB3 on compare match between counter and OCR0A
	TCCR3B = (1 << WGM32) | (1 << CS31) | (1 << CS30);
     e4c:	8b e0       	ldi	r24, 0x0B	; 11
     e4e:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
	// WGM02: When counter (TCNT0) matches OCR0A, reset counter
	// CS01 & CS30: Set a prescaler of 64
	set_PWM(0);
     e52:	60 e0       	ldi	r22, 0x00	; 0
     e54:	70 e0       	ldi	r23, 0x00	; 0
     e56:	cb 01       	movw	r24, r22
     e58:	8b cf       	rjmp	.-234    	; 0xd70 <set_PWM>
     e5a:	08 95       	ret

00000e5c <PWM_off>:
}

void PWM_off() {
	TCCR3A = 0x00;
     e5c:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	TCCR3B = 0x00;
     e60:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
     e64:	08 95       	ret

00000e66 <Note_Tick>:

int Note_Tick(int state){
     e66:	cf 93       	push	r28
    static unsigned char play_note;
    static unsigned char rest_note;
    static unsigned char note_to_hit;
    
    switch(state){
     e68:	81 30       	cpi	r24, 0x01	; 1
     e6a:	91 05       	cpc	r25, r1
     e6c:	31 f0       	breq	.+12     	; 0xe7a <Note_Tick+0x14>
     e6e:	82 30       	cpi	r24, 0x02	; 2
     e70:	91 05       	cpc	r25, r1
     e72:	49 f0       	breq	.+18     	; 0xe86 <Note_Tick+0x20>
     e74:	00 97       	sbiw	r24, 0x00	; 0
     e76:	69 f4       	brne	.+26     	; 0xe92 <Note_Tick+0x2c>
     e78:	14 c0       	rjmp	.+40     	; 0xea2 <Note_Tick+0x3c>
        case Note_INIT:
            state = Note_Wait;
            break;
        case Note_Wait:
            if(playing){
     e7a:	80 91 b8 05 	lds	r24, 0x05B8	; 0x8005b8 <playing>
     e7e:	88 23       	and	r24, r24
     e80:	81 f0       	breq	.+32     	; 0xea2 <Note_Tick+0x3c>
                PWM_on();
     e82:	e1 df       	rcall	.-62     	; 0xe46 <PWM_on>
                state = Note_Play_Song;
                break;
     e84:	15 c0       	rjmp	.+42     	; 0xeb0 <Note_Tick+0x4a>
            else{
                state = Note_Wait;
                break;
            }
        case Note_Play_Song:
            if(song_finished){
     e86:	80 91 ba 05 	lds	r24, 0x05BA	; 0x8005ba <song_finished>
     e8a:	88 23       	and	r24, r24
                PWM_off();
     e8c:	89 f0       	breq	.+34     	; 0xeb0 <Note_Tick+0x4a>
     e8e:	e6 df       	rcall	.-52     	; 0xe5c <PWM_off>
                state = Note_Wait;
                break;
     e90:	08 c0       	rjmp	.+16     	; 0xea2 <Note_Tick+0x3c>
            else{
                state = Note_Play_Song;
                break;
            }
    }
    switch(state){
     e92:	81 30       	cpi	r24, 0x01	; 1
     e94:	91 05       	cpc	r25, r1
     e96:	29 f0       	breq	.+10     	; 0xea2 <Note_Tick+0x3c>
     e98:	82 30       	cpi	r24, 0x02	; 2
     e9a:	91 05       	cpc	r25, r1
     e9c:	09 f0       	breq	.+2      	; 0xea0 <Note_Tick+0x3a>
     e9e:	93 c0       	rjmp	.+294    	; 0xfc6 <Note_Tick+0x160>
     ea0:	07 c0       	rjmp	.+14     	; 0xeb0 <Note_Tick+0x4a>
        case Note_INIT:
            break;
        case Note_Wait:
            play_note = 0;
     ea2:	10 92 b0 05 	sts	0x05B0, r1	; 0x8005b0 <play_note.2307>
            rest_note = 0;
     ea6:	10 92 af 05 	sts	0x05AF, r1	; 0x8005af <rest_note.2308>
            break;
     eaa:	81 e0       	ldi	r24, 0x01	; 1
     eac:	90 e0       	ldi	r25, 0x00	; 0
     eae:	8b c0       	rjmp	.+278    	; 0xfc6 <Note_Tick+0x160>
        case Note_Play_Song:
            if(play_note < songs[current_song_choice].timing[current_note]){
     eb0:	80 91 c6 05 	lds	r24, 0x05C6	; 0x8005c6 <current_song_choice>
     eb4:	90 e0       	ldi	r25, 0x00	; 0
     eb6:	60 91 c7 05 	lds	r22, 0x05C7	; 0x8005c7 <current_note>
     eba:	46 2f       	mov	r20, r22
     ebc:	50 e0       	ldi	r21, 0x00	; 0
     ebe:	2c e1       	ldi	r18, 0x1C	; 28
     ec0:	34 e0       	ldi	r19, 0x04	; 4
     ec2:	82 9f       	mul	r24, r18
     ec4:	f0 01       	movw	r30, r0
     ec6:	83 9f       	mul	r24, r19
     ec8:	f0 0d       	add	r31, r0
     eca:	92 9f       	mul	r25, r18
     ecc:	f0 0d       	add	r31, r0
     ece:	11 24       	eor	r1, r1
     ed0:	e4 0f       	add	r30, r20
     ed2:	f5 1f       	adc	r31, r21
     ed4:	e7 57       	subi	r30, 0x77	; 119
     ed6:	f7 4f       	sbci	r31, 0xF7	; 247
     ed8:	30 81       	ld	r19, Z
     eda:	20 91 b0 05 	lds	r18, 0x05B0	; 0x8005b0 <play_note.2307>
     ede:	23 17       	cp	r18, r19
     ee0:	08 f0       	brcs	.+2      	; 0xee4 <Note_Tick+0x7e>
     ee2:	41 c0       	rjmp	.+130    	; 0xf66 <Note_Tick+0x100>
                note_to_hit = songs[current_song_choice].hit[current_note];
     ee4:	2c e1       	ldi	r18, 0x1C	; 28
     ee6:	34 e0       	ldi	r19, 0x04	; 4
     ee8:	82 9f       	mul	r24, r18
     eea:	f0 01       	movw	r30, r0
     eec:	83 9f       	mul	r24, r19
     eee:	f0 0d       	add	r31, r0
     ef0:	92 9f       	mul	r25, r18
     ef2:	f0 0d       	add	r31, r0
     ef4:	11 24       	eor	r1, r1
     ef6:	e4 0f       	add	r30, r20
     ef8:	f5 1f       	adc	r31, r21
     efa:	eb 54       	subi	r30, 0x4B	; 75
     efc:	f6 4f       	sbci	r31, 0xF6	; 246
     efe:	c0 81       	ld	r28, Z
     f00:	c0 93 ae 05 	sts	0x05AE, r28	; 0x8005ae <__data_end>
                set_PWM(songs[current_song_choice].notes[current_note]);
     f04:	27 e0       	ldi	r18, 0x07	; 7
     f06:	31 e0       	ldi	r19, 0x01	; 1
     f08:	82 9f       	mul	r24, r18
     f0a:	f0 01       	movw	r30, r0
     f0c:	83 9f       	mul	r24, r19
     f0e:	f0 0d       	add	r31, r0
     f10:	92 9f       	mul	r25, r18
     f12:	f0 0d       	add	r31, r0
     f14:	11 24       	eor	r1, r1
     f16:	e4 0f       	add	r30, r20
     f18:	f5 1f       	adc	r31, r21
     f1a:	ee 0f       	add	r30, r30
     f1c:	ff 1f       	adc	r31, r31
     f1e:	ee 0f       	add	r30, r30
     f20:	ff 1f       	adc	r31, r31
     f22:	ef 5c       	subi	r30, 0xCF	; 207
     f24:	f9 4f       	sbci	r31, 0xF9	; 249
     f26:	60 81       	ld	r22, Z
     f28:	71 81       	ldd	r23, Z+1	; 0x01
     f2a:	82 81       	ldd	r24, Z+2	; 0x02
     f2c:	93 81       	ldd	r25, Z+3	; 0x03
     f2e:	20 df       	rcall	.-448    	; 0xd70 <set_PWM>
                
                if(player_button_press == note_to_hit){
     f30:	80 91 c5 05 	lds	r24, 0x05C5	; 0x8005c5 <player_button_press>
     f34:	c8 13       	cpse	r28, r24
     f36:	0d c0       	rjmp	.+26     	; 0xf52 <Note_Tick+0xec>
                    current_score++;
     f38:	80 91 c3 05 	lds	r24, 0x05C3	; 0x8005c3 <current_score>
     f3c:	90 91 c4 05 	lds	r25, 0x05C4	; 0x8005c4 <current_score+0x1>
     f40:	01 96       	adiw	r24, 0x01	; 1
     f42:	90 93 c4 05 	sts	0x05C4, r25	; 0x8005c4 <current_score+0x1>
     f46:	80 93 c3 05 	sts	0x05C3, r24	; 0x8005c3 <current_score>
                    score_increase = true;
     f4a:	81 e0       	ldi	r24, 0x01	; 1
     f4c:	80 93 b9 05 	sts	0x05B9, r24	; 0x8005b9 <score_increase>
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <Note_Tick+0xf0>
                }
                else{
                    score_increase = false;
     f52:	10 92 b9 05 	sts	0x05B9, r1	; 0x8005b9 <score_increase>
                }
                play_note++;
     f56:	80 91 b0 05 	lds	r24, 0x05B0	; 0x8005b0 <play_note.2307>
     f5a:	8f 5f       	subi	r24, 0xFF	; 255
     f5c:	80 93 b0 05 	sts	0x05B0, r24	; 0x8005b0 <play_note.2307>
                break;
     f60:	82 e0       	ldi	r24, 0x02	; 2
     f62:	90 e0       	ldi	r25, 0x00	; 0
     f64:	30 c0       	rjmp	.+96     	; 0xfc6 <Note_Tick+0x160>
            }
            else{
                if(rest_note < songs[current_song_choice].rest_timing[current_note]){
     f66:	c0 91 af 05 	lds	r28, 0x05AF	; 0x8005af <rest_note.2308>
     f6a:	ec e1       	ldi	r30, 0x1C	; 28
     f6c:	f4 e0       	ldi	r31, 0x04	; 4
     f6e:	8e 9f       	mul	r24, r30
     f70:	90 01       	movw	r18, r0
     f72:	8f 9f       	mul	r24, r31
     f74:	30 0d       	add	r19, r0
     f76:	9e 9f       	mul	r25, r30
     f78:	30 0d       	add	r19, r0
     f7a:	11 24       	eor	r1, r1
     f7c:	fa 01       	movw	r30, r20
     f7e:	e2 0f       	add	r30, r18
     f80:	f3 1f       	adc	r31, r19
     f82:	e1 5e       	subi	r30, 0xE1	; 225
     f84:	f6 4f       	sbci	r31, 0xF6	; 246
     f86:	80 81       	ld	r24, Z
     f88:	c8 17       	cp	r28, r24
     f8a:	50 f4       	brcc	.+20     	; 0xfa0 <Note_Tick+0x13a>
                    set_PWM(0);
     f8c:	60 e0       	ldi	r22, 0x00	; 0
     f8e:	70 e0       	ldi	r23, 0x00	; 0
     f90:	cb 01       	movw	r24, r22
     f92:	ee de       	rcall	.-548    	; 0xd70 <set_PWM>
                    rest_note++;
     f94:	cf 5f       	subi	r28, 0xFF	; 255
     f96:	c0 93 af 05 	sts	0x05AF, r28	; 0x8005af <rest_note.2308>
     f9a:	82 e0       	ldi	r24, 0x02	; 2
     f9c:	90 e0       	ldi	r25, 0x00	; 0
     f9e:	13 c0       	rjmp	.+38     	; 0xfc6 <Note_Tick+0x160>
                }
                else{
                    play_note = 0;
     fa0:	10 92 b0 05 	sts	0x05B0, r1	; 0x8005b0 <play_note.2307>
                    rest_note = 0;
     fa4:	10 92 af 05 	sts	0x05AF, r1	; 0x8005af <rest_note.2308>
                    if(current_note < SONG_LENGTH){
     fa8:	66 39       	cpi	r22, 0x96	; 150
     faa:	30 f4       	brcc	.+12     	; 0xfb8 <Note_Tick+0x152>
                        current_note++;
     fac:	6f 5f       	subi	r22, 0xFF	; 255
     fae:	60 93 c7 05 	sts	0x05C7, r22	; 0x8005c7 <current_note>
     fb2:	82 e0       	ldi	r24, 0x02	; 2
     fb4:	90 e0       	ldi	r25, 0x00	; 0
     fb6:	07 c0       	rjmp	.+14     	; 0xfc6 <Note_Tick+0x160>
                    }
                    else{
                        playing = false;
     fb8:	10 92 b8 05 	sts	0x05B8, r1	; 0x8005b8 <playing>
                        song_finished = true;
     fbc:	81 e0       	ldi	r24, 0x01	; 1
     fbe:	80 93 ba 05 	sts	0x05BA, r24	; 0x8005ba <song_finished>
                        break;
     fc2:	82 e0       	ldi	r24, 0x02	; 2
     fc4:	90 e0       	ldi	r25, 0x00	; 0
                }
            }
            break;
    }
    return state;
}
     fc6:	cf 91       	pop	r28
     fc8:	08 95       	ret

00000fca <main>:


int main(void)
{
    //LCD PORTS & RGB MATRIX
    DDRD = 0xFF; PORTD = 0x00;
     fca:	8f ef       	ldi	r24, 0xFF	; 255
     fcc:	8a b9       	out	0x0a, r24	; 10
     fce:	1b b8       	out	0x0b, r1	; 11
    DDRC = 0XFF; PORTC = 0x00; //0 & 1 are LCD Control Lines, 2,3,4 are RGB PORTS
     fd0:	87 b9       	out	0x07, r24	; 7
     fd2:	18 b8       	out	0x08, r1	; 8
    
    //BUTTON INPUT PORTS
    DDRA = 0x00; PORTA = 0xFF;
     fd4:	11 b8       	out	0x01, r1	; 1
     fd6:	82 b9       	out	0x02, r24	; 2
    
    //BUZZER PORT
    DDRB = 0x0FF; PORTB = 0x00; //PB6 is buzzer
     fd8:	84 b9       	out	0x04, r24	; 4
     fda:	15 b8       	out	0x05, r1	; 5
    
    //Initialize LCD and Matrix
    LCD_init();
     fdc:	96 d9       	rcall	.-3284   	; 0x30a <LCD_init>
    
    Shift_Init();   
     fde:	a8 dd       	rcall	.-1200   	; 0xb30 <Shift_Init>
    Shift_transmit_data(0);
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	bb dd       	rcall	.-1162   	; 0xb5a <Shift_transmit_data>
    Shift_transmit_data(255);
     fe4:	8f ef       	ldi	r24, 0xFF	; 255
     fe6:	b9 dd       	rcall	.-1166   	; 0xb5a <Shift_transmit_data>
     fe8:	0f 2e       	mov	r0, r31
     fea:	fa ec       	ldi	r31, 0xCA	; 202
     fec:	af 2e       	mov	r10, r31
     fee:	f2 e0       	ldi	r31, 0x02	; 2
     ff0:	bf 2e       	mov	r11, r31
     ff2:	f0 2d       	mov	r31, r0
     ff4:	0f 2e       	mov	r0, r31
     ff6:	f1 e3       	ldi	r31, 0x31	; 49
     ff8:	cf 2e       	mov	r12, r31
     ffa:	f6 e0       	ldi	r31, 0x06	; 6
     ffc:	df 2e       	mov	r13, r31
     ffe:	f0 2d       	mov	r31, r0
    1000:	0f 2e       	mov	r0, r31
    1002:	f4 e3       	ldi	r31, 0x34	; 52
    1004:	ef 2e       	mov	r14, r31
    1006:	f2 e0       	ldi	r31, 0x02	; 2
    1008:	ff 2e       	mov	r15, r31
    100a:	f0 2d       	mov	r31, r0
    100c:	09 e8       	ldi	r16, 0x89	; 137
    100e:	18 e0       	ldi	r17, 0x08	; 8
    1010:	ce e9       	ldi	r28, 0x9E	; 158
    1012:	d1 e0       	ldi	r29, 0x01	; 1
    1014:	0f 2e       	mov	r0, r31
    1016:	ff e1       	ldi	r31, 0x1F	; 31
    1018:	8f 2e       	mov	r8, r31
    101a:	f9 e0       	ldi	r31, 0x09	; 9
    101c:	9f 2e       	mov	r9, r31
    101e:	f0 2d       	mov	r31, r0
    1020:	0f 2e       	mov	r0, r31
    1022:	f8 e0       	ldi	r31, 0x08	; 8
    1024:	6f 2e       	mov	r6, r31
    1026:	f1 e0       	ldi	r31, 0x01	; 1
    1028:	7f 2e       	mov	r7, r31
    102a:	f0 2d       	mov	r31, r0
    102c:	0f 2e       	mov	r0, r31
    102e:	f5 eb       	ldi	r31, 0xB5	; 181
    1030:	4f 2e       	mov	r4, r31
    1032:	f9 e0       	ldi	r31, 0x09	; 9
    1034:	5f 2e       	mov	r5, r31
    1036:	f0 2d       	mov	r31, r0
    1038:	31 2c       	mov	r3, r1
        
    //song creation
    for(unsigned char j = 0; j < 73; j++) {
    103a:	f5 01       	movw	r30, r10
        songs[0].notes[j] = notesDIV[j];
    103c:	81 91       	ld	r24, Z+
    103e:	91 91       	ld	r25, Z+
    1040:	a1 91       	ld	r26, Z+
    1042:	b1 91       	ld	r27, Z+
    1044:	5f 01       	movw	r10, r30
    1046:	f6 01       	movw	r30, r12
    1048:	81 93       	st	Z+, r24
    104a:	91 93       	st	Z+, r25
    104c:	a1 93       	st	Z+, r26
    104e:	b1 93       	st	Z+, r27
    1050:	6f 01       	movw	r12, r30
    1052:	f7 01       	movw	r30, r14
        songs[0].timing[j] = timesDIV[j];
    1054:	81 91       	ld	r24, Z+
    1056:	7f 01       	movw	r14, r30
    1058:	f8 01       	movw	r30, r16
    105a:	81 93       	st	Z+, r24
    105c:	8f 01       	movw	r16, r30
    105e:	89 91       	ld	r24, Y+
        songs[0].rest_timing[j] = restsDIV[j];
    1060:	f4 01       	movw	r30, r8
    1062:	81 93       	st	Z+, r24
    1064:	4f 01       	movw	r8, r30
    1066:	f3 01       	movw	r30, r6
        songs[0].hit[j] = pressDIV[j];
    1068:	81 91       	ld	r24, Z+
    106a:	3f 01       	movw	r6, r30
    106c:	f2 01       	movw	r30, r4
    106e:	81 93       	st	Z+, r24
    1070:	2f 01       	movw	r4, r30
        songs[0].high_score = eeprom_read_byte((uint8_t*) 1);
    1072:	81 e0       	ldi	r24, 0x01	; 1
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	45 d2       	rcall	.+1162   	; 0x1502 <eeprom_read_byte>
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	eb e4       	ldi	r30, 0x4B	; 75
    107c:	fa e0       	ldi	r31, 0x0A	; 10
    107e:	91 83       	std	Z+1, r25	; 0x01
    1080:	80 83       	st	Z, r24
    1082:	33 94       	inc	r3
    Shift_Init();   
    Shift_transmit_data(0);
    Shift_transmit_data(255);
        
    //song creation
    for(unsigned char j = 0; j < 73; j++) {
    1084:	f9 e4       	ldi	r31, 0x49	; 73
    1086:	3f 12       	cpse	r3, r31
    1088:	d8 cf       	rjmp	.-80     	; 0x103a <main+0x70>
    108a:	e1 ed       	ldi	r30, 0xD1	; 209
    }
    
    //Task Code
    unsigned char tasks_increment = 0;
    
    tasks[tasks_increment].state = LFT_INIT;
    108c:	f5 e0       	ldi	r31, 0x05	; 5
    108e:	11 82       	std	Z+1, r1	; 0x01
    1090:	10 82       	st	Z, r1
    1092:	82 e3       	ldi	r24, 0x32	; 50
    tasks[tasks_increment].period = 50;
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	a0 e0       	ldi	r26, 0x00	; 0
    1098:	b0 e0       	ldi	r27, 0x00	; 0
    109a:	82 83       	std	Z+2, r24	; 0x02
    109c:	93 83       	std	Z+3, r25	; 0x03
    109e:	a4 83       	std	Z+4, r26	; 0x04
    10a0:	b5 83       	std	Z+5, r27	; 0x05
    10a2:	86 83       	std	Z+6, r24	; 0x06
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
    10a4:	97 83       	std	Z+7, r25	; 0x07
    10a6:	a0 87       	std	Z+8, r26	; 0x08
    10a8:	b1 87       	std	Z+9, r27	; 0x09
    10aa:	20 e7       	ldi	r18, 0x70	; 112
    tasks[tasks_increment].TickFct = &Left_Tick;
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	33 87       	std	Z+11, r19	; 0x0b
    10b0:	22 87       	std	Z+10, r18	; 0x0a
    10b2:	15 86       	std	Z+13, r1	; 0x0d
    
    tasks_increment++;
    
    tasks[tasks_increment].state = RGHT_INIT;
    10b4:	14 86       	std	Z+12, r1	; 0x0c
    10b6:	86 87       	std	Z+14, r24	; 0x0e
    tasks[tasks_increment].period = 50;
    10b8:	97 87       	std	Z+15, r25	; 0x0f
    10ba:	a0 8b       	std	Z+16, r26	; 0x10
    10bc:	b1 8b       	std	Z+17, r27	; 0x11
    10be:	82 8b       	std	Z+18, r24	; 0x12
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
    10c0:	93 8b       	std	Z+19, r25	; 0x13
    10c2:	a4 8b       	std	Z+20, r26	; 0x14
    10c4:	b5 8b       	std	Z+21, r27	; 0x15
    10c6:	23 e8       	ldi	r18, 0x83	; 131
    tasks[tasks_increment].TickFct = &Right_Tick;
    10c8:	30 e0       	ldi	r19, 0x00	; 0
    10ca:	37 8b       	std	Z+23, r19	; 0x17
    10cc:	26 8b       	std	Z+22, r18	; 0x16
    10ce:	11 8e       	std	Z+25, r1	; 0x19
    
    tasks_increment++;
    
    tasks[tasks_increment].state = UP_INIT;
    10d0:	10 8e       	std	Z+24, r1	; 0x18
    10d2:	82 8f       	std	Z+26, r24	; 0x1a
    tasks[tasks_increment].period = 50;
    10d4:	93 8f       	std	Z+27, r25	; 0x1b
    10d6:	a4 8f       	std	Z+28, r26	; 0x1c
    10d8:	b5 8f       	std	Z+29, r27	; 0x1d
    10da:	86 8f       	std	Z+30, r24	; 0x1e
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
    10dc:	97 8f       	std	Z+31, r25	; 0x1f
    10de:	a0 a3       	std	Z+32, r26	; 0x20
    10e0:	b1 a3       	std	Z+33, r27	; 0x21
    10e2:	26 e9       	ldi	r18, 0x96	; 150
    tasks[tasks_increment].TickFct = &Up_Tick;
    10e4:	30 e0       	ldi	r19, 0x00	; 0
    10e6:	33 a3       	std	Z+35, r19	; 0x23
    10e8:	22 a3       	std	Z+34, r18	; 0x22
    10ea:	15 a2       	std	Z+37, r1	; 0x25
    
    
    tasks_increment++;
    
    tasks[tasks_increment].state = DOWN_INIT;
    10ec:	14 a2       	std	Z+36, r1	; 0x24
    10ee:	86 a3       	std	Z+38, r24	; 0x26
    tasks[tasks_increment].period = 50;
    10f0:	97 a3       	std	Z+39, r25	; 0x27
    10f2:	a0 a7       	std	Z+40, r26	; 0x28
    10f4:	b1 a7       	std	Z+41, r27	; 0x29
    10f6:	82 a7       	std	Z+42, r24	; 0x2a
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
    10f8:	93 a7       	std	Z+43, r25	; 0x2b
    10fa:	a4 a7       	std	Z+44, r26	; 0x2c
    10fc:	b5 a7       	std	Z+45, r27	; 0x2d
    10fe:	89 ea       	ldi	r24, 0xA9	; 169
    tasks[tasks_increment].TickFct = &Down_Tick;
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	97 a7       	std	Z+47, r25	; 0x2f
    1104:	86 a7       	std	Z+46, r24	; 0x2e
    1106:	11 aa       	std	Z+49, r1	; 0x31
    
    
    tasks_increment++;
    
    tasks[tasks_increment].state = RGB_INIT;
    1108:	10 aa       	std	Z+48, r1	; 0x30
    110a:	8a e0       	ldi	r24, 0x0A	; 10
    tasks[tasks_increment].period = 10;
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	a0 e0       	ldi	r26, 0x00	; 0
    1110:	b0 e0       	ldi	r27, 0x00	; 0
    1112:	82 ab       	std	Z+50, r24	; 0x32
    1114:	93 ab       	std	Z+51, r25	; 0x33
    1116:	a4 ab       	std	Z+52, r26	; 0x34
    1118:	b5 ab       	std	Z+53, r27	; 0x35
    111a:	86 ab       	std	Z+54, r24	; 0x36
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
    111c:	97 ab       	std	Z+55, r25	; 0x37
    111e:	a0 af       	std	Z+56, r26	; 0x38
    1120:	b1 af       	std	Z+57, r27	; 0x39
    1122:	8e eb       	ldi	r24, 0xBE	; 190
    tasks[tasks_increment].TickFct = &RGB_Matrix_Tick;
    1124:	95 e0       	ldi	r25, 0x05	; 5
    1126:	93 af       	std	Z+59, r25	; 0x3b
    1128:	82 af       	std	Z+58, r24	; 0x3a
    112a:	15 ae       	std	Z+61, r1	; 0x3d
    
    
    tasks_increment++;
    
    tasks[tasks_increment].state = LCD_Menu_Init;
    112c:	14 ae       	std	Z+60, r1	; 0x3c
    112e:	8e e1       	ldi	r24, 0x1E	; 30
    tasks[tasks_increment].period = 30;
    1130:	90 e0       	ldi	r25, 0x00	; 0
    1132:	a0 e0       	ldi	r26, 0x00	; 0
    1134:	b0 e0       	ldi	r27, 0x00	; 0
    1136:	80 93 0f 06 	sts	0x060F, r24	; 0x80060f <tasks+0x3e>
    113a:	90 93 10 06 	sts	0x0610, r25	; 0x800610 <tasks+0x3f>
    113e:	a0 93 11 06 	sts	0x0611, r26	; 0x800611 <tasks+0x40>
    1142:	b0 93 12 06 	sts	0x0612, r27	; 0x800612 <tasks+0x41>
    1146:	80 93 13 06 	sts	0x0613, r24	; 0x800613 <tasks+0x42>
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
    114a:	90 93 14 06 	sts	0x0614, r25	; 0x800614 <tasks+0x43>
    114e:	a0 93 15 06 	sts	0x0615, r26	; 0x800615 <tasks+0x44>
    1152:	b0 93 16 06 	sts	0x0616, r27	; 0x800616 <tasks+0x45>
    1156:	8b ec       	ldi	r24, 0xCB	; 203
    tasks[tasks_increment].TickFct = &LCD_Menu_Tick;
    1158:	91 e0       	ldi	r25, 0x01	; 1
    115a:	90 93 18 06 	sts	0x0618, r25	; 0x800618 <tasks+0x47>
    115e:	80 93 17 06 	sts	0x0617, r24	; 0x800617 <tasks+0x46>
    1162:	10 92 1a 06 	sts	0x061A, r1	; 0x80061a <tasks+0x49>
    
    tasks_increment++;
    
    tasks[tasks_increment].state = Note_INIT;
    1166:	10 92 19 06 	sts	0x0619, r1	; 0x800619 <tasks+0x48>
    116a:	8f e0       	ldi	r24, 0x0F	; 15
    tasks[tasks_increment].period = 15;
    116c:	90 e0       	ldi	r25, 0x00	; 0
    116e:	a0 e0       	ldi	r26, 0x00	; 0
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	80 93 1b 06 	sts	0x061B, r24	; 0x80061b <tasks+0x4a>
    1176:	90 93 1c 06 	sts	0x061C, r25	; 0x80061c <tasks+0x4b>
    117a:	a0 93 1d 06 	sts	0x061D, r26	; 0x80061d <tasks+0x4c>
    117e:	b0 93 1e 06 	sts	0x061E, r27	; 0x80061e <tasks+0x4d>
    1182:	80 93 1f 06 	sts	0x061F, r24	; 0x80061f <tasks+0x4e>
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
    1186:	90 93 20 06 	sts	0x0620, r25	; 0x800620 <tasks+0x4f>
    118a:	a0 93 21 06 	sts	0x0621, r26	; 0x800621 <tasks+0x50>
    118e:	b0 93 22 06 	sts	0x0622, r27	; 0x800622 <tasks+0x51>
    1192:	23 e3       	ldi	r18, 0x33	; 51
    tasks[tasks_increment].TickFct = &Note_Tick;
    1194:	37 e0       	ldi	r19, 0x07	; 7
    1196:	30 93 24 06 	sts	0x0624, r19	; 0x800624 <tasks+0x53>
    119a:	20 93 23 06 	sts	0x0623, r18	; 0x800623 <tasks+0x52>
    119e:	10 92 26 06 	sts	0x0626, r1	; 0x800626 <tasks+0x55>
    
    tasks_increment++;
    
    tasks[tasks_increment].state = Player_Init;
    11a2:	10 92 25 06 	sts	0x0625, r1	; 0x800625 <tasks+0x54>
    11a6:	80 93 27 06 	sts	0x0627, r24	; 0x800627 <tasks+0x56>
    tasks[tasks_increment].period = 15;
    11aa:	90 93 28 06 	sts	0x0628, r25	; 0x800628 <tasks+0x57>
    11ae:	a0 93 29 06 	sts	0x0629, r26	; 0x800629 <tasks+0x58>
    11b2:	b0 93 2a 06 	sts	0x062A, r27	; 0x80062a <tasks+0x59>
    11b6:	80 93 2b 06 	sts	0x062B, r24	; 0x80062b <tasks+0x5a>
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
    11ba:	90 93 2c 06 	sts	0x062C, r25	; 0x80062c <tasks+0x5b>
    11be:	a0 93 2d 06 	sts	0x062D, r26	; 0x80062d <tasks+0x5c>
    11c2:	b0 93 2e 06 	sts	0x062E, r27	; 0x80062e <tasks+0x5d>
    11c6:	8c eb       	ldi	r24, 0xBC	; 188
    tasks[tasks_increment].TickFct = &Player_Tick;
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	90 93 30 06 	sts	0x0630, r25	; 0x800630 <tasks+0x5f>
    11ce:	80 93 2f 06 	sts	0x062F, r24	; 0x80062f <tasks+0x5e>
    
    //Timer
    TimerSet(tasksPeriodGCD);
    11d2:	65 e0       	ldi	r22, 0x05	; 5
    11d4:	70 e0       	ldi	r23, 0x00	; 0
    11d6:	80 e0       	ldi	r24, 0x00	; 0
    11d8:	90 e0       	ldi	r25, 0x00	; 0
    11da:	e6 db       	rcall	.-2100   	; 0x9a8 <TimerSet>
    TimerOn();
    11dc:	f6 db       	rcall	.-2068   	; 0x9ca <TimerOn>
    11de:	ff cf       	rjmp	.-2      	; 0x11de <main+0x214>

000011e0 <__cmpsf2>:
    11e0:	9c d0       	rcall	.+312    	; 0x131a <__fp_cmp>
    11e2:	08 f4       	brcc	.+2      	; 0x11e6 <__cmpsf2+0x6>
    11e4:	81 e0       	ldi	r24, 0x01	; 1
    11e6:	08 95       	ret

000011e8 <__divsf3>:
    11e8:	0c d0       	rcall	.+24     	; 0x1202 <__divsf3x>
    11ea:	d2 c0       	rjmp	.+420    	; 0x1390 <__fp_round>
    11ec:	ca d0       	rcall	.+404    	; 0x1382 <__fp_pscB>
    11ee:	40 f0       	brcs	.+16     	; 0x1200 <__divsf3+0x18>
    11f0:	c1 d0       	rcall	.+386    	; 0x1374 <__fp_pscA>
    11f2:	30 f0       	brcs	.+12     	; 0x1200 <__divsf3+0x18>
    11f4:	21 f4       	brne	.+8      	; 0x11fe <__divsf3+0x16>
    11f6:	5f 3f       	cpi	r21, 0xFF	; 255
    11f8:	19 f0       	breq	.+6      	; 0x1200 <__divsf3+0x18>
    11fa:	b3 c0       	rjmp	.+358    	; 0x1362 <__fp_inf>
    11fc:	51 11       	cpse	r21, r1
    11fe:	fc c0       	rjmp	.+504    	; 0x13f8 <__fp_szero>
    1200:	b6 c0       	rjmp	.+364    	; 0x136e <__fp_nan>

00001202 <__divsf3x>:
    1202:	d7 d0       	rcall	.+430    	; 0x13b2 <__fp_split3>
    1204:	98 f3       	brcs	.-26     	; 0x11ec <__divsf3+0x4>

00001206 <__divsf3_pse>:
    1206:	99 23       	and	r25, r25
    1208:	c9 f3       	breq	.-14     	; 0x11fc <__divsf3+0x14>
    120a:	55 23       	and	r21, r21
    120c:	b1 f3       	breq	.-20     	; 0x11fa <__divsf3+0x12>
    120e:	95 1b       	sub	r25, r21
    1210:	55 0b       	sbc	r21, r21
    1212:	bb 27       	eor	r27, r27
    1214:	aa 27       	eor	r26, r26
    1216:	62 17       	cp	r22, r18
    1218:	73 07       	cpc	r23, r19
    121a:	84 07       	cpc	r24, r20
    121c:	38 f0       	brcs	.+14     	; 0x122c <__divsf3_pse+0x26>
    121e:	9f 5f       	subi	r25, 0xFF	; 255
    1220:	5f 4f       	sbci	r21, 0xFF	; 255
    1222:	22 0f       	add	r18, r18
    1224:	33 1f       	adc	r19, r19
    1226:	44 1f       	adc	r20, r20
    1228:	aa 1f       	adc	r26, r26
    122a:	a9 f3       	breq	.-22     	; 0x1216 <__divsf3_pse+0x10>
    122c:	33 d0       	rcall	.+102    	; 0x1294 <__divsf3_pse+0x8e>
    122e:	0e 2e       	mov	r0, r30
    1230:	3a f0       	brmi	.+14     	; 0x1240 <__divsf3_pse+0x3a>
    1232:	e0 e8       	ldi	r30, 0x80	; 128
    1234:	30 d0       	rcall	.+96     	; 0x1296 <__divsf3_pse+0x90>
    1236:	91 50       	subi	r25, 0x01	; 1
    1238:	50 40       	sbci	r21, 0x00	; 0
    123a:	e6 95       	lsr	r30
    123c:	00 1c       	adc	r0, r0
    123e:	ca f7       	brpl	.-14     	; 0x1232 <__divsf3_pse+0x2c>
    1240:	29 d0       	rcall	.+82     	; 0x1294 <__divsf3_pse+0x8e>
    1242:	fe 2f       	mov	r31, r30
    1244:	27 d0       	rcall	.+78     	; 0x1294 <__divsf3_pse+0x8e>
    1246:	66 0f       	add	r22, r22
    1248:	77 1f       	adc	r23, r23
    124a:	88 1f       	adc	r24, r24
    124c:	bb 1f       	adc	r27, r27
    124e:	26 17       	cp	r18, r22
    1250:	37 07       	cpc	r19, r23
    1252:	48 07       	cpc	r20, r24
    1254:	ab 07       	cpc	r26, r27
    1256:	b0 e8       	ldi	r27, 0x80	; 128
    1258:	09 f0       	breq	.+2      	; 0x125c <__divsf3_pse+0x56>
    125a:	bb 0b       	sbc	r27, r27
    125c:	80 2d       	mov	r24, r0
    125e:	bf 01       	movw	r22, r30
    1260:	ff 27       	eor	r31, r31
    1262:	93 58       	subi	r25, 0x83	; 131
    1264:	5f 4f       	sbci	r21, 0xFF	; 255
    1266:	2a f0       	brmi	.+10     	; 0x1272 <__divsf3_pse+0x6c>
    1268:	9e 3f       	cpi	r25, 0xFE	; 254
    126a:	51 05       	cpc	r21, r1
    126c:	68 f0       	brcs	.+26     	; 0x1288 <__divsf3_pse+0x82>
    126e:	79 c0       	rjmp	.+242    	; 0x1362 <__fp_inf>
    1270:	c3 c0       	rjmp	.+390    	; 0x13f8 <__fp_szero>
    1272:	5f 3f       	cpi	r21, 0xFF	; 255
    1274:	ec f3       	brlt	.-6      	; 0x1270 <__divsf3_pse+0x6a>
    1276:	98 3e       	cpi	r25, 0xE8	; 232
    1278:	dc f3       	brlt	.-10     	; 0x1270 <__divsf3_pse+0x6a>
    127a:	86 95       	lsr	r24
    127c:	77 95       	ror	r23
    127e:	67 95       	ror	r22
    1280:	b7 95       	ror	r27
    1282:	f7 95       	ror	r31
    1284:	9f 5f       	subi	r25, 0xFF	; 255
    1286:	c9 f7       	brne	.-14     	; 0x127a <__divsf3_pse+0x74>
    1288:	88 0f       	add	r24, r24
    128a:	91 1d       	adc	r25, r1
    128c:	96 95       	lsr	r25
    128e:	87 95       	ror	r24
    1290:	97 f9       	bld	r25, 7
    1292:	08 95       	ret
    1294:	e1 e0       	ldi	r30, 0x01	; 1
    1296:	66 0f       	add	r22, r22
    1298:	77 1f       	adc	r23, r23
    129a:	88 1f       	adc	r24, r24
    129c:	bb 1f       	adc	r27, r27
    129e:	62 17       	cp	r22, r18
    12a0:	73 07       	cpc	r23, r19
    12a2:	84 07       	cpc	r24, r20
    12a4:	ba 07       	cpc	r27, r26
    12a6:	20 f0       	brcs	.+8      	; 0x12b0 <__divsf3_pse+0xaa>
    12a8:	62 1b       	sub	r22, r18
    12aa:	73 0b       	sbc	r23, r19
    12ac:	84 0b       	sbc	r24, r20
    12ae:	ba 0b       	sbc	r27, r26
    12b0:	ee 1f       	adc	r30, r30
    12b2:	88 f7       	brcc	.-30     	; 0x1296 <__divsf3_pse+0x90>
    12b4:	e0 95       	com	r30
    12b6:	08 95       	ret

000012b8 <__fixsfsi>:
    12b8:	04 d0       	rcall	.+8      	; 0x12c2 <__fixunssfsi>
    12ba:	68 94       	set
    12bc:	b1 11       	cpse	r27, r1
    12be:	9c c0       	rjmp	.+312    	; 0x13f8 <__fp_szero>
    12c0:	08 95       	ret

000012c2 <__fixunssfsi>:
    12c2:	7f d0       	rcall	.+254    	; 0x13c2 <__fp_splitA>
    12c4:	88 f0       	brcs	.+34     	; 0x12e8 <__fixunssfsi+0x26>
    12c6:	9f 57       	subi	r25, 0x7F	; 127
    12c8:	90 f0       	brcs	.+36     	; 0x12ee <__fixunssfsi+0x2c>
    12ca:	b9 2f       	mov	r27, r25
    12cc:	99 27       	eor	r25, r25
    12ce:	b7 51       	subi	r27, 0x17	; 23
    12d0:	a0 f0       	brcs	.+40     	; 0x12fa <__fixunssfsi+0x38>
    12d2:	d1 f0       	breq	.+52     	; 0x1308 <__fixunssfsi+0x46>
    12d4:	66 0f       	add	r22, r22
    12d6:	77 1f       	adc	r23, r23
    12d8:	88 1f       	adc	r24, r24
    12da:	99 1f       	adc	r25, r25
    12dc:	1a f0       	brmi	.+6      	; 0x12e4 <__fixunssfsi+0x22>
    12de:	ba 95       	dec	r27
    12e0:	c9 f7       	brne	.-14     	; 0x12d4 <__fixunssfsi+0x12>
    12e2:	12 c0       	rjmp	.+36     	; 0x1308 <__fixunssfsi+0x46>
    12e4:	b1 30       	cpi	r27, 0x01	; 1
    12e6:	81 f0       	breq	.+32     	; 0x1308 <__fixunssfsi+0x46>
    12e8:	86 d0       	rcall	.+268    	; 0x13f6 <__fp_zero>
    12ea:	b1 e0       	ldi	r27, 0x01	; 1
    12ec:	08 95       	ret
    12ee:	83 c0       	rjmp	.+262    	; 0x13f6 <__fp_zero>
    12f0:	67 2f       	mov	r22, r23
    12f2:	78 2f       	mov	r23, r24
    12f4:	88 27       	eor	r24, r24
    12f6:	b8 5f       	subi	r27, 0xF8	; 248
    12f8:	39 f0       	breq	.+14     	; 0x1308 <__fixunssfsi+0x46>
    12fa:	b9 3f       	cpi	r27, 0xF9	; 249
    12fc:	cc f3       	brlt	.-14     	; 0x12f0 <__fixunssfsi+0x2e>
    12fe:	86 95       	lsr	r24
    1300:	77 95       	ror	r23
    1302:	67 95       	ror	r22
    1304:	b3 95       	inc	r27
    1306:	d9 f7       	brne	.-10     	; 0x12fe <__fixunssfsi+0x3c>
    1308:	3e f4       	brtc	.+14     	; 0x1318 <__fixunssfsi+0x56>
    130a:	90 95       	com	r25
    130c:	80 95       	com	r24
    130e:	70 95       	com	r23
    1310:	61 95       	neg	r22
    1312:	7f 4f       	sbci	r23, 0xFF	; 255
    1314:	8f 4f       	sbci	r24, 0xFF	; 255
    1316:	9f 4f       	sbci	r25, 0xFF	; 255
    1318:	08 95       	ret

0000131a <__fp_cmp>:
    131a:	99 0f       	add	r25, r25
    131c:	00 08       	sbc	r0, r0
    131e:	55 0f       	add	r21, r21
    1320:	aa 0b       	sbc	r26, r26
    1322:	e0 e8       	ldi	r30, 0x80	; 128
    1324:	fe ef       	ldi	r31, 0xFE	; 254
    1326:	16 16       	cp	r1, r22
    1328:	17 06       	cpc	r1, r23
    132a:	e8 07       	cpc	r30, r24
    132c:	f9 07       	cpc	r31, r25
    132e:	c0 f0       	brcs	.+48     	; 0x1360 <__fp_cmp+0x46>
    1330:	12 16       	cp	r1, r18
    1332:	13 06       	cpc	r1, r19
    1334:	e4 07       	cpc	r30, r20
    1336:	f5 07       	cpc	r31, r21
    1338:	98 f0       	brcs	.+38     	; 0x1360 <__fp_cmp+0x46>
    133a:	62 1b       	sub	r22, r18
    133c:	73 0b       	sbc	r23, r19
    133e:	84 0b       	sbc	r24, r20
    1340:	95 0b       	sbc	r25, r21
    1342:	39 f4       	brne	.+14     	; 0x1352 <__fp_cmp+0x38>
    1344:	0a 26       	eor	r0, r26
    1346:	61 f0       	breq	.+24     	; 0x1360 <__fp_cmp+0x46>
    1348:	23 2b       	or	r18, r19
    134a:	24 2b       	or	r18, r20
    134c:	25 2b       	or	r18, r21
    134e:	21 f4       	brne	.+8      	; 0x1358 <__fp_cmp+0x3e>
    1350:	08 95       	ret
    1352:	0a 26       	eor	r0, r26
    1354:	09 f4       	brne	.+2      	; 0x1358 <__fp_cmp+0x3e>
    1356:	a1 40       	sbci	r26, 0x01	; 1
    1358:	a6 95       	lsr	r26
    135a:	8f ef       	ldi	r24, 0xFF	; 255
    135c:	81 1d       	adc	r24, r1
    135e:	81 1d       	adc	r24, r1
    1360:	08 95       	ret

00001362 <__fp_inf>:
    1362:	97 f9       	bld	r25, 7
    1364:	9f 67       	ori	r25, 0x7F	; 127
    1366:	80 e8       	ldi	r24, 0x80	; 128
    1368:	70 e0       	ldi	r23, 0x00	; 0
    136a:	60 e0       	ldi	r22, 0x00	; 0
    136c:	08 95       	ret

0000136e <__fp_nan>:
    136e:	9f ef       	ldi	r25, 0xFF	; 255
    1370:	80 ec       	ldi	r24, 0xC0	; 192
    1372:	08 95       	ret

00001374 <__fp_pscA>:
    1374:	00 24       	eor	r0, r0
    1376:	0a 94       	dec	r0
    1378:	16 16       	cp	r1, r22
    137a:	17 06       	cpc	r1, r23
    137c:	18 06       	cpc	r1, r24
    137e:	09 06       	cpc	r0, r25
    1380:	08 95       	ret

00001382 <__fp_pscB>:
    1382:	00 24       	eor	r0, r0
    1384:	0a 94       	dec	r0
    1386:	12 16       	cp	r1, r18
    1388:	13 06       	cpc	r1, r19
    138a:	14 06       	cpc	r1, r20
    138c:	05 06       	cpc	r0, r21
    138e:	08 95       	ret

00001390 <__fp_round>:
    1390:	09 2e       	mov	r0, r25
    1392:	03 94       	inc	r0
    1394:	00 0c       	add	r0, r0
    1396:	11 f4       	brne	.+4      	; 0x139c <__fp_round+0xc>
    1398:	88 23       	and	r24, r24
    139a:	52 f0       	brmi	.+20     	; 0x13b0 <__fp_round+0x20>
    139c:	bb 0f       	add	r27, r27
    139e:	40 f4       	brcc	.+16     	; 0x13b0 <__fp_round+0x20>
    13a0:	bf 2b       	or	r27, r31
    13a2:	11 f4       	brne	.+4      	; 0x13a8 <__fp_round+0x18>
    13a4:	60 ff       	sbrs	r22, 0
    13a6:	04 c0       	rjmp	.+8      	; 0x13b0 <__fp_round+0x20>
    13a8:	6f 5f       	subi	r22, 0xFF	; 255
    13aa:	7f 4f       	sbci	r23, 0xFF	; 255
    13ac:	8f 4f       	sbci	r24, 0xFF	; 255
    13ae:	9f 4f       	sbci	r25, 0xFF	; 255
    13b0:	08 95       	ret

000013b2 <__fp_split3>:
    13b2:	57 fd       	sbrc	r21, 7
    13b4:	90 58       	subi	r25, 0x80	; 128
    13b6:	44 0f       	add	r20, r20
    13b8:	55 1f       	adc	r21, r21
    13ba:	59 f0       	breq	.+22     	; 0x13d2 <__fp_splitA+0x10>
    13bc:	5f 3f       	cpi	r21, 0xFF	; 255
    13be:	71 f0       	breq	.+28     	; 0x13dc <__fp_splitA+0x1a>
    13c0:	47 95       	ror	r20

000013c2 <__fp_splitA>:
    13c2:	88 0f       	add	r24, r24
    13c4:	97 fb       	bst	r25, 7
    13c6:	99 1f       	adc	r25, r25
    13c8:	61 f0       	breq	.+24     	; 0x13e2 <__fp_splitA+0x20>
    13ca:	9f 3f       	cpi	r25, 0xFF	; 255
    13cc:	79 f0       	breq	.+30     	; 0x13ec <__fp_splitA+0x2a>
    13ce:	87 95       	ror	r24
    13d0:	08 95       	ret
    13d2:	12 16       	cp	r1, r18
    13d4:	13 06       	cpc	r1, r19
    13d6:	14 06       	cpc	r1, r20
    13d8:	55 1f       	adc	r21, r21
    13da:	f2 cf       	rjmp	.-28     	; 0x13c0 <__fp_split3+0xe>
    13dc:	46 95       	lsr	r20
    13de:	f1 df       	rcall	.-30     	; 0x13c2 <__fp_splitA>
    13e0:	08 c0       	rjmp	.+16     	; 0x13f2 <__fp_splitA+0x30>
    13e2:	16 16       	cp	r1, r22
    13e4:	17 06       	cpc	r1, r23
    13e6:	18 06       	cpc	r1, r24
    13e8:	99 1f       	adc	r25, r25
    13ea:	f1 cf       	rjmp	.-30     	; 0x13ce <__fp_splitA+0xc>
    13ec:	86 95       	lsr	r24
    13ee:	71 05       	cpc	r23, r1
    13f0:	61 05       	cpc	r22, r1
    13f2:	08 94       	sec
    13f4:	08 95       	ret

000013f6 <__fp_zero>:
    13f6:	e8 94       	clt

000013f8 <__fp_szero>:
    13f8:	bb 27       	eor	r27, r27
    13fa:	66 27       	eor	r22, r22
    13fc:	77 27       	eor	r23, r23
    13fe:	cb 01       	movw	r24, r22
    1400:	97 f9       	bld	r25, 7
    1402:	08 95       	ret

00001404 <__gesf2>:
    1404:	8a df       	rcall	.-236    	; 0x131a <__fp_cmp>
    1406:	08 f4       	brcc	.+2      	; 0x140a <__gesf2+0x6>
    1408:	8f ef       	ldi	r24, 0xFF	; 255
    140a:	08 95       	ret

0000140c <__mulsf3>:
    140c:	0b d0       	rcall	.+22     	; 0x1424 <__mulsf3x>
    140e:	c0 cf       	rjmp	.-128    	; 0x1390 <__fp_round>
    1410:	b1 df       	rcall	.-158    	; 0x1374 <__fp_pscA>
    1412:	28 f0       	brcs	.+10     	; 0x141e <__mulsf3+0x12>
    1414:	b6 df       	rcall	.-148    	; 0x1382 <__fp_pscB>
    1416:	18 f0       	brcs	.+6      	; 0x141e <__mulsf3+0x12>
    1418:	95 23       	and	r25, r21
    141a:	09 f0       	breq	.+2      	; 0x141e <__mulsf3+0x12>
    141c:	a2 cf       	rjmp	.-188    	; 0x1362 <__fp_inf>
    141e:	a7 cf       	rjmp	.-178    	; 0x136e <__fp_nan>
    1420:	11 24       	eor	r1, r1
    1422:	ea cf       	rjmp	.-44     	; 0x13f8 <__fp_szero>

00001424 <__mulsf3x>:
    1424:	c6 df       	rcall	.-116    	; 0x13b2 <__fp_split3>
    1426:	a0 f3       	brcs	.-24     	; 0x1410 <__mulsf3+0x4>

00001428 <__mulsf3_pse>:
    1428:	95 9f       	mul	r25, r21
    142a:	d1 f3       	breq	.-12     	; 0x1420 <__mulsf3+0x14>
    142c:	95 0f       	add	r25, r21
    142e:	50 e0       	ldi	r21, 0x00	; 0
    1430:	55 1f       	adc	r21, r21
    1432:	62 9f       	mul	r22, r18
    1434:	f0 01       	movw	r30, r0
    1436:	72 9f       	mul	r23, r18
    1438:	bb 27       	eor	r27, r27
    143a:	f0 0d       	add	r31, r0
    143c:	b1 1d       	adc	r27, r1
    143e:	63 9f       	mul	r22, r19
    1440:	aa 27       	eor	r26, r26
    1442:	f0 0d       	add	r31, r0
    1444:	b1 1d       	adc	r27, r1
    1446:	aa 1f       	adc	r26, r26
    1448:	64 9f       	mul	r22, r20
    144a:	66 27       	eor	r22, r22
    144c:	b0 0d       	add	r27, r0
    144e:	a1 1d       	adc	r26, r1
    1450:	66 1f       	adc	r22, r22
    1452:	82 9f       	mul	r24, r18
    1454:	22 27       	eor	r18, r18
    1456:	b0 0d       	add	r27, r0
    1458:	a1 1d       	adc	r26, r1
    145a:	62 1f       	adc	r22, r18
    145c:	73 9f       	mul	r23, r19
    145e:	b0 0d       	add	r27, r0
    1460:	a1 1d       	adc	r26, r1
    1462:	62 1f       	adc	r22, r18
    1464:	83 9f       	mul	r24, r19
    1466:	a0 0d       	add	r26, r0
    1468:	61 1d       	adc	r22, r1
    146a:	22 1f       	adc	r18, r18
    146c:	74 9f       	mul	r23, r20
    146e:	33 27       	eor	r19, r19
    1470:	a0 0d       	add	r26, r0
    1472:	61 1d       	adc	r22, r1
    1474:	23 1f       	adc	r18, r19
    1476:	84 9f       	mul	r24, r20
    1478:	60 0d       	add	r22, r0
    147a:	21 1d       	adc	r18, r1
    147c:	82 2f       	mov	r24, r18
    147e:	76 2f       	mov	r23, r22
    1480:	6a 2f       	mov	r22, r26
    1482:	11 24       	eor	r1, r1
    1484:	9f 57       	subi	r25, 0x7F	; 127
    1486:	50 40       	sbci	r21, 0x00	; 0
    1488:	8a f0       	brmi	.+34     	; 0x14ac <__mulsf3_pse+0x84>
    148a:	e1 f0       	breq	.+56     	; 0x14c4 <__mulsf3_pse+0x9c>
    148c:	88 23       	and	r24, r24
    148e:	4a f0       	brmi	.+18     	; 0x14a2 <__mulsf3_pse+0x7a>
    1490:	ee 0f       	add	r30, r30
    1492:	ff 1f       	adc	r31, r31
    1494:	bb 1f       	adc	r27, r27
    1496:	66 1f       	adc	r22, r22
    1498:	77 1f       	adc	r23, r23
    149a:	88 1f       	adc	r24, r24
    149c:	91 50       	subi	r25, 0x01	; 1
    149e:	50 40       	sbci	r21, 0x00	; 0
    14a0:	a9 f7       	brne	.-22     	; 0x148c <__mulsf3_pse+0x64>
    14a2:	9e 3f       	cpi	r25, 0xFE	; 254
    14a4:	51 05       	cpc	r21, r1
    14a6:	70 f0       	brcs	.+28     	; 0x14c4 <__mulsf3_pse+0x9c>
    14a8:	5c cf       	rjmp	.-328    	; 0x1362 <__fp_inf>
    14aa:	a6 cf       	rjmp	.-180    	; 0x13f8 <__fp_szero>
    14ac:	5f 3f       	cpi	r21, 0xFF	; 255
    14ae:	ec f3       	brlt	.-6      	; 0x14aa <__mulsf3_pse+0x82>
    14b0:	98 3e       	cpi	r25, 0xE8	; 232
    14b2:	dc f3       	brlt	.-10     	; 0x14aa <__mulsf3_pse+0x82>
    14b4:	86 95       	lsr	r24
    14b6:	77 95       	ror	r23
    14b8:	67 95       	ror	r22
    14ba:	b7 95       	ror	r27
    14bc:	f7 95       	ror	r31
    14be:	e7 95       	ror	r30
    14c0:	9f 5f       	subi	r25, 0xFF	; 255
    14c2:	c1 f7       	brne	.-16     	; 0x14b4 <__mulsf3_pse+0x8c>
    14c4:	fe 2b       	or	r31, r30
    14c6:	88 0f       	add	r24, r24
    14c8:	91 1d       	adc	r25, r1
    14ca:	96 95       	lsr	r25
    14cc:	87 95       	ror	r24
    14ce:	97 f9       	bld	r25, 7
    14d0:	08 95       	ret

000014d2 <__tablejump2__>:
    14d2:	ee 0f       	add	r30, r30
    14d4:	ff 1f       	adc	r31, r31
    14d6:	00 24       	eor	r0, r0
    14d8:	00 1c       	adc	r0, r0
    14da:	0b be       	out	0x3b, r0	; 59
    14dc:	07 90       	elpm	r0, Z+
    14de:	f6 91       	elpm	r31, Z
    14e0:	e0 2d       	mov	r30, r0
    14e2:	09 94       	ijmp

000014e4 <__umulhisi3>:
    14e4:	a2 9f       	mul	r26, r18
    14e6:	b0 01       	movw	r22, r0
    14e8:	b3 9f       	mul	r27, r19
    14ea:	c0 01       	movw	r24, r0
    14ec:	a3 9f       	mul	r26, r19
    14ee:	70 0d       	add	r23, r0
    14f0:	81 1d       	adc	r24, r1
    14f2:	11 24       	eor	r1, r1
    14f4:	91 1d       	adc	r25, r1
    14f6:	b2 9f       	mul	r27, r18
    14f8:	70 0d       	add	r23, r0
    14fa:	81 1d       	adc	r24, r1
    14fc:	11 24       	eor	r1, r1
    14fe:	91 1d       	adc	r25, r1
    1500:	08 95       	ret

00001502 <eeprom_read_byte>:
    1502:	f9 99       	sbic	0x1f, 1	; 31
    1504:	fe cf       	rjmp	.-4      	; 0x1502 <eeprom_read_byte>
    1506:	92 bd       	out	0x22, r25	; 34
    1508:	81 bd       	out	0x21, r24	; 33
    150a:	f8 9a       	sbi	0x1f, 0	; 31
    150c:	99 27       	eor	r25, r25
    150e:	80 b5       	in	r24, 0x20	; 32
    1510:	08 95       	ret

00001512 <eeprom_update_byte>:
    1512:	26 2f       	mov	r18, r22

00001514 <eeprom_update_r18>:
    1514:	f9 99       	sbic	0x1f, 1	; 31
    1516:	fe cf       	rjmp	.-4      	; 0x1514 <eeprom_update_r18>
    1518:	92 bd       	out	0x22, r25	; 34
    151a:	81 bd       	out	0x21, r24	; 33
    151c:	f8 9a       	sbi	0x1f, 0	; 31
    151e:	01 97       	sbiw	r24, 0x01	; 1
    1520:	00 b4       	in	r0, 0x20	; 32
    1522:	02 16       	cp	r0, r18
    1524:	39 f0       	breq	.+14     	; 0x1534 <eeprom_update_r18+0x20>
    1526:	1f ba       	out	0x1f, r1	; 31
    1528:	20 bd       	out	0x20, r18	; 32
    152a:	0f b6       	in	r0, 0x3f	; 63
    152c:	f8 94       	cli
    152e:	fa 9a       	sbi	0x1f, 2	; 31
    1530:	f9 9a       	sbi	0x1f, 1	; 31
    1532:	0f be       	out	0x3f, r0	; 63
    1534:	08 95       	ret

00001536 <_exit>:
    1536:	f8 94       	cli

00001538 <__stop_program>:
    1538:	ff cf       	rjmp	.-2      	; 0x1538 <__stop_program>
