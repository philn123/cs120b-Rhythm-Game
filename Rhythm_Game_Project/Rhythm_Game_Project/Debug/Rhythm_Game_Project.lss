
Rhythm_Game_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000544  00800100  00001686  0000171a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001686  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000537  00800644  00800644  00001c5e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001c5e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001c90  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00001cd0  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d7d  00000000  00000000  00001e48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000aed  00000000  00000000  00003bc5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001349  00000000  00000000  000046b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000036c  00000000  00000000  000059fc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009bd  00000000  00000000  00005d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ee1  00000000  00000000  00006725  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00007606  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	51 c0       	rjmp	.+162    	; 0xa4 <__ctors_end>
       2:	00 00       	nop
       4:	6d c0       	rjmp	.+218    	; 0xe0 <__bad_interrupt>
       6:	00 00       	nop
       8:	6b c0       	rjmp	.+214    	; 0xe0 <__bad_interrupt>
       a:	00 00       	nop
       c:	69 c0       	rjmp	.+210    	; 0xe0 <__bad_interrupt>
       e:	00 00       	nop
      10:	67 c0       	rjmp	.+206    	; 0xe0 <__bad_interrupt>
      12:	00 00       	nop
      14:	65 c0       	rjmp	.+202    	; 0xe0 <__bad_interrupt>
      16:	00 00       	nop
      18:	63 c0       	rjmp	.+198    	; 0xe0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	61 c0       	rjmp	.+194    	; 0xe0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	5f c0       	rjmp	.+190    	; 0xe0 <__bad_interrupt>
      22:	00 00       	nop
      24:	5d c0       	rjmp	.+186    	; 0xe0 <__bad_interrupt>
      26:	00 00       	nop
      28:	5b c0       	rjmp	.+182    	; 0xe0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	59 c0       	rjmp	.+178    	; 0xe0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	57 c0       	rjmp	.+174    	; 0xe0 <__bad_interrupt>
      32:	00 00       	nop
      34:	55 c5       	rjmp	.+2730   	; 0xae0 <__vector_13>
      36:	00 00       	nop
      38:	53 c0       	rjmp	.+166    	; 0xe0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	51 c0       	rjmp	.+162    	; 0xe0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	4f c0       	rjmp	.+158    	; 0xe0 <__bad_interrupt>
      42:	00 00       	nop
      44:	4d c0       	rjmp	.+154    	; 0xe0 <__bad_interrupt>
      46:	00 00       	nop
      48:	4b c0       	rjmp	.+150    	; 0xe0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	49 c0       	rjmp	.+146    	; 0xe0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	47 c0       	rjmp	.+142    	; 0xe0 <__bad_interrupt>
      52:	00 00       	nop
      54:	45 c0       	rjmp	.+138    	; 0xe0 <__bad_interrupt>
      56:	00 00       	nop
      58:	43 c0       	rjmp	.+134    	; 0xe0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	41 c0       	rjmp	.+130    	; 0xe0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	3f c0       	rjmp	.+126    	; 0xe0 <__bad_interrupt>
      62:	00 00       	nop
      64:	3d c0       	rjmp	.+122    	; 0xe0 <__bad_interrupt>
      66:	00 00       	nop
      68:	3b c0       	rjmp	.+118    	; 0xe0 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	39 c0       	rjmp	.+114    	; 0xe0 <__bad_interrupt>
      6e:	00 00       	nop
      70:	37 c0       	rjmp	.+110    	; 0xe0 <__bad_interrupt>
      72:	00 00       	nop
      74:	35 c0       	rjmp	.+106    	; 0xe0 <__bad_interrupt>
      76:	00 00       	nop
      78:	33 c0       	rjmp	.+102    	; 0xe0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	31 c0       	rjmp	.+98     	; 0xe0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	2f c0       	rjmp	.+94     	; 0xe0 <__bad_interrupt>
      82:	00 00       	nop
      84:	2d c0       	rjmp	.+90     	; 0xe0 <__bad_interrupt>
      86:	00 00       	nop
      88:	2b c0       	rjmp	.+86     	; 0xe0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	02 03       	mulsu	r16, r18
      8e:	d7 01       	movw	r26, r14
      90:	f0 01       	movw	r30, r0
      92:	02 02       	muls	r16, r18
      94:	4e 02       	muls	r20, r30
      96:	60 02       	muls	r22, r16
      98:	72 02       	muls	r23, r18
      9a:	96 02       	muls	r25, r22
      9c:	a7 02       	muls	r26, r23
      9e:	b5 02       	muls	r27, r21
      a0:	bf 02       	muls	r27, r31
      a2:	d7 02       	muls	r29, r23

000000a4 <__ctors_end>:
      a4:	11 24       	eor	r1, r1
      a6:	1f be       	out	0x3f, r1	; 63
      a8:	cf ef       	ldi	r28, 0xFF	; 255
      aa:	d0 e4       	ldi	r29, 0x40	; 64
      ac:	de bf       	out	0x3e, r29	; 62
      ae:	cd bf       	out	0x3d, r28	; 61

000000b0 <__do_copy_data>:
      b0:	16 e0       	ldi	r17, 0x06	; 6
      b2:	a0 e0       	ldi	r26, 0x00	; 0
      b4:	b1 e0       	ldi	r27, 0x01	; 1
      b6:	e6 e8       	ldi	r30, 0x86	; 134
      b8:	f6 e1       	ldi	r31, 0x16	; 22
      ba:	00 e0       	ldi	r16, 0x00	; 0
      bc:	0b bf       	out	0x3b, r16	; 59
      be:	02 c0       	rjmp	.+4      	; 0xc4 <__do_copy_data+0x14>
      c0:	07 90       	elpm	r0, Z+
      c2:	0d 92       	st	X+, r0
      c4:	a4 34       	cpi	r26, 0x44	; 68
      c6:	b1 07       	cpc	r27, r17
      c8:	d9 f7       	brne	.-10     	; 0xc0 <__do_copy_data+0x10>

000000ca <__do_clear_bss>:
      ca:	2b e0       	ldi	r18, 0x0B	; 11
      cc:	a4 e4       	ldi	r26, 0x44	; 68
      ce:	b6 e0       	ldi	r27, 0x06	; 6
      d0:	01 c0       	rjmp	.+2      	; 0xd4 <.do_clear_bss_start>

000000d2 <.do_clear_bss_loop>:
      d2:	1d 92       	st	X+, r1

000000d4 <.do_clear_bss_start>:
      d4:	ab 37       	cpi	r26, 0x7B	; 123
      d6:	b2 07       	cpc	r27, r18
      d8:	e1 f7       	brne	.-8      	; 0xd2 <.do_clear_bss_loop>
      da:	fb d7       	rcall	.+4086   	; 0x10d2 <main>
      dc:	0c 94 41 0b 	jmp	0x1682	; 0x1682 <_exit>

000000e0 <__bad_interrupt>:
      e0:	8f cf       	rjmp	.-226    	; 0x0 <__vectors>

000000e2 <Left_Tick>:
unsigned char Set_Bit(unsigned char output, unsigned char in){
    return (output | (1 << in));   
}
unsigned char Clear_Bit(unsigned char output, unsigned char in){
    return (output & ~(1 << in));
} 
      e2:	82 30       	cpi	r24, 0x02	; 2
      e4:	91 05       	cpc	r25, r1
      e6:	18 f0       	brcs	.+6      	; 0xee <Left_Tick+0xc>
      e8:	81 30       	cpi	r24, 0x01	; 1
      ea:	91 05       	cpc	r25, r1
      ec:	61 f4       	brne	.+24     	; 0x106 <Left_Tick+0x24>
      ee:	03 99       	sbic	0x00, 3	; 0
      f0:	06 c0       	rjmp	.+12     	; 0xfe <Left_Tick+0x1c>
      f2:	81 e0       	ldi	r24, 0x01	; 1
      f4:	80 93 63 06 	sts	0x0663, r24	; 0x800663 <LEFT>
      f8:	81 e0       	ldi	r24, 0x01	; 1
      fa:	90 e0       	ldi	r25, 0x00	; 0
      fc:	08 95       	ret
      fe:	10 92 63 06 	sts	0x0663, r1	; 0x800663 <LEFT>
     102:	81 e0       	ldi	r24, 0x01	; 1
     104:	90 e0       	ldi	r25, 0x00	; 0
     106:	08 95       	ret

00000108 <Right_Tick>:
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	91 05       	cpc	r25, r1
     10c:	18 f0       	brcs	.+6      	; 0x114 <Right_Tick+0xc>
     10e:	81 30       	cpi	r24, 0x01	; 1
     110:	91 05       	cpc	r25, r1
     112:	61 f4       	brne	.+24     	; 0x12c <Right_Tick+0x24>
     114:	00 99       	sbic	0x00, 0	; 0
     116:	06 c0       	rjmp	.+12     	; 0x124 <Right_Tick+0x1c>
     118:	81 e0       	ldi	r24, 0x01	; 1
     11a:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <RIGHT>
     11e:	81 e0       	ldi	r24, 0x01	; 1
     120:	90 e0       	ldi	r25, 0x00	; 0
     122:	08 95       	ret
     124:	10 92 62 06 	sts	0x0662, r1	; 0x800662 <RIGHT>
     128:	81 e0       	ldi	r24, 0x01	; 1
     12a:	90 e0       	ldi	r25, 0x00	; 0
     12c:	08 95       	ret

0000012e <Up_Tick>:
     12e:	82 30       	cpi	r24, 0x02	; 2
     130:	91 05       	cpc	r25, r1
     132:	18 f0       	brcs	.+6      	; 0x13a <Up_Tick+0xc>
     134:	81 30       	cpi	r24, 0x01	; 1
     136:	91 05       	cpc	r25, r1
     138:	61 f4       	brne	.+24     	; 0x152 <Up_Tick+0x24>
     13a:	01 99       	sbic	0x00, 1	; 0
     13c:	06 c0       	rjmp	.+12     	; 0x14a <Up_Tick+0x1c>
     13e:	81 e0       	ldi	r24, 0x01	; 1
     140:	80 93 61 06 	sts	0x0661, r24	; 0x800661 <UP>
     144:	81 e0       	ldi	r24, 0x01	; 1
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	08 95       	ret
     14a:	10 92 61 06 	sts	0x0661, r1	; 0x800661 <UP>
     14e:	81 e0       	ldi	r24, 0x01	; 1
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	08 95       	ret

00000154 <Down_Tick>:
     154:	82 30       	cpi	r24, 0x02	; 2
     156:	91 05       	cpc	r25, r1
     158:	18 f0       	brcs	.+6      	; 0x160 <Down_Tick+0xc>
     15a:	81 30       	cpi	r24, 0x01	; 1
     15c:	91 05       	cpc	r25, r1
     15e:	61 f4       	brne	.+24     	; 0x178 <Down_Tick+0x24>
     160:	02 99       	sbic	0x00, 2	; 0
     162:	06 c0       	rjmp	.+12     	; 0x170 <Down_Tick+0x1c>
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	80 93 60 06 	sts	0x0660, r24	; 0x800660 <DOWN>
     16a:	81 e0       	ldi	r24, 0x01	; 1
     16c:	90 e0       	ldi	r25, 0x00	; 0
     16e:	08 95       	ret
     170:	10 92 60 06 	sts	0x0660, r1	; 0x800660 <DOWN>
     174:	81 e0       	ldi	r24, 0x01	; 1
     176:	90 e0       	ldi	r25, 0x00	; 0
     178:	08 95       	ret

0000017a <Player_Tick>:
     17a:	82 30       	cpi	r24, 0x02	; 2
     17c:	91 05       	cpc	r25, r1
     17e:	18 f0       	brcs	.+6      	; 0x186 <Player_Tick+0xc>
     180:	01 97       	sbiw	r24, 0x01	; 1
     182:	09 f0       	breq	.+2      	; 0x186 <Player_Tick+0xc>
     184:	43 c0       	rjmp	.+134    	; 0x20c <Player_Tick+0x92>
     186:	80 91 63 06 	lds	r24, 0x0663	; 0x800663 <LEFT>
     18a:	88 23       	and	r24, r24
     18c:	81 f0       	breq	.+32     	; 0x1ae <Player_Tick+0x34>
     18e:	80 91 62 06 	lds	r24, 0x0662	; 0x800662 <RIGHT>
     192:	81 11       	cpse	r24, r1
     194:	30 c0       	rjmp	.+96     	; 0x1f6 <Player_Tick+0x7c>
     196:	80 91 61 06 	lds	r24, 0x0661	; 0x800661 <UP>
     19a:	81 11       	cpse	r24, r1
     19c:	2c c0       	rjmp	.+88     	; 0x1f6 <Player_Tick+0x7c>
     19e:	80 91 60 06 	lds	r24, 0x0660	; 0x800660 <DOWN>
     1a2:	81 11       	cpse	r24, r1
     1a4:	28 c0       	rjmp	.+80     	; 0x1f6 <Player_Tick+0x7c>
     1a6:	88 e0       	ldi	r24, 0x08	; 8
     1a8:	80 93 5d 06 	sts	0x065D, r24	; 0x80065d <player_button_press>
     1ac:	2f c0       	rjmp	.+94     	; 0x20c <Player_Tick+0x92>
     1ae:	80 91 62 06 	lds	r24, 0x0662	; 0x800662 <RIGHT>
     1b2:	81 11       	cpse	r24, r1
     1b4:	28 c0       	rjmp	.+80     	; 0x206 <Player_Tick+0x8c>
     1b6:	80 91 61 06 	lds	r24, 0x0661	; 0x800661 <UP>
     1ba:	81 11       	cpse	r24, r1
     1bc:	1f c0       	rjmp	.+62     	; 0x1fc <Player_Tick+0x82>
     1be:	80 91 60 06 	lds	r24, 0x0660	; 0x800660 <DOWN>
     1c2:	88 23       	and	r24, r24
     1c4:	d9 f0       	breq	.+54     	; 0x1fc <Player_Tick+0x82>
     1c6:	84 e0       	ldi	r24, 0x04	; 4
     1c8:	80 93 5d 06 	sts	0x065D, r24	; 0x80065d <player_button_press>
     1cc:	1f c0       	rjmp	.+62     	; 0x20c <Player_Tick+0x92>
     1ce:	80 91 60 06 	lds	r24, 0x0660	; 0x800660 <DOWN>
     1d2:	81 11       	cpse	r24, r1
     1d4:	10 c0       	rjmp	.+32     	; 0x1f6 <Player_Tick+0x7c>
     1d6:	82 e0       	ldi	r24, 0x02	; 2
     1d8:	80 93 5d 06 	sts	0x065D, r24	; 0x80065d <player_button_press>
     1dc:	17 c0       	rjmp	.+46     	; 0x20c <Player_Tick+0x92>
     1de:	80 91 61 06 	lds	r24, 0x0661	; 0x800661 <UP>
     1e2:	81 11       	cpse	r24, r1
     1e4:	08 c0       	rjmp	.+16     	; 0x1f6 <Player_Tick+0x7c>
     1e6:	80 91 60 06 	lds	r24, 0x0660	; 0x800660 <DOWN>
     1ea:	81 11       	cpse	r24, r1
     1ec:	04 c0       	rjmp	.+8      	; 0x1f6 <Player_Tick+0x7c>
     1ee:	81 e0       	ldi	r24, 0x01	; 1
     1f0:	80 93 5d 06 	sts	0x065D, r24	; 0x80065d <player_button_press>
     1f4:	0b c0       	rjmp	.+22     	; 0x20c <Player_Tick+0x92>
     1f6:	10 92 5d 06 	sts	0x065D, r1	; 0x80065d <player_button_press>
     1fa:	08 c0       	rjmp	.+16     	; 0x20c <Player_Tick+0x92>
     1fc:	80 91 61 06 	lds	r24, 0x0661	; 0x800661 <UP>
     200:	81 11       	cpse	r24, r1
     202:	e5 cf       	rjmp	.-54     	; 0x1ce <Player_Tick+0x54>
     204:	f8 cf       	rjmp	.-16     	; 0x1f6 <Player_Tick+0x7c>
     206:	81 11       	cpse	r24, r1
     208:	ea cf       	rjmp	.-44     	; 0x1de <Player_Tick+0x64>
     20a:	f5 cf       	rjmp	.-22     	; 0x1f6 <Player_Tick+0x7c>
     20c:	80 e0       	ldi	r24, 0x00	; 0
     20e:	90 e0       	ldi	r25, 0x00	; 0
     210:	08 95       	ret

00000212 <delay_ms>:
     212:	18 16       	cp	r1, r24
     214:	19 06       	cpc	r1, r25
     216:	5c f0       	brlt	.+22     	; 0x22e <delay_ms+0x1c>
     218:	08 95       	ret
     21a:	00 00       	nop
     21c:	21 50       	subi	r18, 0x01	; 1
     21e:	31 09       	sbc	r19, r1
     220:	e1 f7       	brne	.-8      	; 0x21a <delay_ms+0x8>
     222:	4f 5f       	subi	r20, 0xFF	; 255
     224:	5f 4f       	sbci	r21, 0xFF	; 255
     226:	84 17       	cp	r24, r20
     228:	95 07       	cpc	r25, r21
     22a:	19 f4       	brne	.+6      	; 0x232 <delay_ms+0x20>
     22c:	08 95       	ret
     22e:	40 e0       	ldi	r20, 0x00	; 0
     230:	50 e0       	ldi	r21, 0x00	; 0
     232:	27 e0       	ldi	r18, 0x07	; 7
     234:	33 e0       	ldi	r19, 0x03	; 3
     236:	f1 cf       	rjmp	.-30     	; 0x21a <delay_ms+0x8>

00000238 <LCD_WriteCommand>:
     238:	28 98       	cbi	0x05, 0	; 5
     23a:	8b b9       	out	0x0b, r24	; 11
     23c:	29 9a       	sbi	0x05, 1	; 5
     23e:	00 00       	nop
     240:	29 98       	cbi	0x05, 1	; 5
     242:	82 e0       	ldi	r24, 0x02	; 2
     244:	90 e0       	ldi	r25, 0x00	; 0
     246:	e5 cf       	rjmp	.-54     	; 0x212 <delay_ms>
     248:	08 95       	ret

0000024a <LCD_ClearScreen>:
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	f5 cf       	rjmp	.-22     	; 0x238 <LCD_WriteCommand>
     24e:	08 95       	ret

00000250 <LCD_Cursor>:
     250:	81 31       	cpi	r24, 0x11	; 17
     252:	18 f4       	brcc	.+6      	; 0x25a <LCD_Cursor+0xa>
     254:	81 58       	subi	r24, 0x81	; 129
     256:	f0 cf       	rjmp	.-32     	; 0x238 <LCD_WriteCommand>
     258:	08 95       	ret
     25a:	81 55       	subi	r24, 0x51	; 81
     25c:	ed cf       	rjmp	.-38     	; 0x238 <LCD_WriteCommand>
     25e:	08 95       	ret

00000260 <LCD_WriteData>:
     260:	28 9a       	sbi	0x05, 0	; 5
     262:	8b b9       	out	0x0b, r24	; 11
     264:	29 9a       	sbi	0x05, 1	; 5
     266:	00 00       	nop
     268:	29 98       	cbi	0x05, 1	; 5
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	d1 cf       	rjmp	.-94     	; 0x212 <delay_ms>
     270:	08 95       	ret

00000272 <LCD_DisplayString>:
     272:	0f 93       	push	r16
     274:	1f 93       	push	r17
     276:	cf 93       	push	r28
     278:	df 93       	push	r29
     27a:	18 2f       	mov	r17, r24
     27c:	eb 01       	movw	r28, r22
     27e:	e5 df       	rcall	.-54     	; 0x24a <LCD_ClearScreen>
     280:	88 81       	ld	r24, Y
     282:	88 23       	and	r24, r24
     284:	51 f0       	breq	.+20     	; 0x29a <LCD_DisplayString+0x28>
     286:	01 e0       	ldi	r16, 0x01	; 1
     288:	01 0f       	add	r16, r17
     28a:	81 2f       	mov	r24, r17
     28c:	e1 df       	rcall	.-62     	; 0x250 <LCD_Cursor>
     28e:	89 91       	ld	r24, Y+
     290:	e7 df       	rcall	.-50     	; 0x260 <LCD_WriteData>
     292:	10 2f       	mov	r17, r16
     294:	88 81       	ld	r24, Y
     296:	81 11       	cpse	r24, r1
     298:	f6 cf       	rjmp	.-20     	; 0x286 <LCD_DisplayString+0x14>
     29a:	df 91       	pop	r29
     29c:	cf 91       	pop	r28
     29e:	1f 91       	pop	r17
     2a0:	0f 91       	pop	r16
     2a2:	08 95       	ret

000002a4 <LCD_Write_Single_Line>:
     2a4:	1f 93       	push	r17
     2a6:	cf 93       	push	r28
     2a8:	df 93       	push	r29
     2aa:	62 30       	cpi	r22, 0x02	; 2
     2ac:	71 05       	cpc	r23, r1
     2ae:	09 f4       	brne	.+2      	; 0x2b2 <LCD_Write_Single_Line+0xe>
     2b0:	80 5f       	subi	r24, 0xF0	; 240
     2b2:	fa 01       	movw	r30, r20
     2b4:	90 81       	ld	r25, Z
     2b6:	99 23       	and	r25, r25
     2b8:	51 f0       	breq	.+20     	; 0x2ce <LCD_Write_Single_Line+0x2a>
     2ba:	ea 01       	movw	r28, r20
     2bc:	11 e0       	ldi	r17, 0x01	; 1
     2be:	18 0f       	add	r17, r24
     2c0:	c7 df       	rcall	.-114    	; 0x250 <LCD_Cursor>
     2c2:	89 91       	ld	r24, Y+
     2c4:	cd df       	rcall	.-102    	; 0x260 <LCD_WriteData>
     2c6:	81 2f       	mov	r24, r17
     2c8:	98 81       	ld	r25, Y
     2ca:	91 11       	cpse	r25, r1
     2cc:	f7 cf       	rjmp	.-18     	; 0x2bc <LCD_Write_Single_Line+0x18>
     2ce:	df 91       	pop	r29
     2d0:	cf 91       	pop	r28
     2d2:	1f 91       	pop	r17
     2d4:	08 95       	ret

000002d6 <LCD_Custom_Character>:
     2d6:	0f 93       	push	r16
     2d8:	1f 93       	push	r17
     2da:	cf 93       	push	r28
     2dc:	df 93       	push	r29
     2de:	8b 01       	movw	r16, r22
     2e0:	88 30       	cpi	r24, 0x08	; 8
     2e2:	68 f4       	brcc	.+26     	; 0x2fe <LCD_Custom_Character+0x28>
     2e4:	88 0f       	add	r24, r24
     2e6:	88 0f       	add	r24, r24
     2e8:	88 0f       	add	r24, r24
     2ea:	80 5c       	subi	r24, 0xC0	; 192
     2ec:	a5 df       	rcall	.-182    	; 0x238 <LCD_WriteCommand>
     2ee:	e8 01       	movw	r28, r16
     2f0:	08 5f       	subi	r16, 0xF8	; 248
     2f2:	1f 4f       	sbci	r17, 0xFF	; 255
     2f4:	89 91       	ld	r24, Y+
     2f6:	b4 df       	rcall	.-152    	; 0x260 <LCD_WriteData>
     2f8:	c0 17       	cp	r28, r16
     2fa:	d1 07       	cpc	r29, r17
     2fc:	d9 f7       	brne	.-10     	; 0x2f4 <LCD_Custom_Character+0x1e>
     2fe:	80 e8       	ldi	r24, 0x80	; 128
     300:	9b df       	rcall	.-202    	; 0x238 <LCD_WriteCommand>
     302:	df 91       	pop	r29
     304:	cf 91       	pop	r28
     306:	1f 91       	pop	r17
     308:	0f 91       	pop	r16
     30a:	08 95       	ret

0000030c <LCD_init>:
     30c:	84 e6       	ldi	r24, 0x64	; 100
     30e:	90 e0       	ldi	r25, 0x00	; 0
     310:	80 df       	rcall	.-256    	; 0x212 <delay_ms>
     312:	88 e3       	ldi	r24, 0x38	; 56
     314:	91 df       	rcall	.-222    	; 0x238 <LCD_WriteCommand>
     316:	86 e0       	ldi	r24, 0x06	; 6
     318:	8f df       	rcall	.-226    	; 0x238 <LCD_WriteCommand>
     31a:	8f e0       	ldi	r24, 0x0F	; 15
     31c:	8d df       	rcall	.-230    	; 0x238 <LCD_WriteCommand>
     31e:	81 e0       	ldi	r24, 0x01	; 1
     320:	8b df       	rcall	.-234    	; 0x238 <LCD_WriteCommand>
     322:	8a e0       	ldi	r24, 0x0A	; 10
     324:	90 e0       	ldi	r25, 0x00	; 0
     326:	75 df       	rcall	.-278    	; 0x212 <delay_ms>
     328:	64 ee       	ldi	r22, 0xE4	; 228
     32a:	75 e0       	ldi	r23, 0x05	; 5
     32c:	80 e0       	ldi	r24, 0x00	; 0
     32e:	d3 df       	rcall	.-90     	; 0x2d6 <LCD_Custom_Character>
     330:	6c ed       	ldi	r22, 0xDC	; 220
     332:	75 e0       	ldi	r23, 0x05	; 5
     334:	81 e0       	ldi	r24, 0x01	; 1
     336:	cf df       	rcall	.-98     	; 0x2d6 <LCD_Custom_Character>
     338:	64 ed       	ldi	r22, 0xD4	; 212
     33a:	75 e0       	ldi	r23, 0x05	; 5
     33c:	82 e0       	ldi	r24, 0x02	; 2
     33e:	cb df       	rcall	.-106    	; 0x2d6 <LCD_Custom_Character>
     340:	6c ec       	ldi	r22, 0xCC	; 204
     342:	75 e0       	ldi	r23, 0x05	; 5
     344:	84 e0       	ldi	r24, 0x04	; 4
     346:	c7 df       	rcall	.-114    	; 0x2d6 <LCD_Custom_Character>
     348:	64 ec       	ldi	r22, 0xC4	; 196
     34a:	75 e0       	ldi	r23, 0x05	; 5
     34c:	85 e0       	ldi	r24, 0x05	; 5
     34e:	c3 df       	rcall	.-122    	; 0x2d6 <LCD_Custom_Character>
     350:	6c eb       	ldi	r22, 0xBC	; 188
     352:	75 e0       	ldi	r23, 0x05	; 5
     354:	86 e0       	ldi	r24, 0x06	; 6
     356:	bf cf       	rjmp	.-130    	; 0x2d6 <LCD_Custom_Character>
     358:	08 95       	ret

0000035a <LCD_Game_Menu>:
     35a:	8c e0       	ldi	r24, 0x0C	; 12
     35c:	6d df       	rcall	.-294    	; 0x238 <LCD_WriteCommand>
     35e:	81 e0       	ldi	r24, 0x01	; 1
     360:	77 df       	rcall	.-274    	; 0x250 <LCD_Cursor>
     362:	85 e0       	ldi	r24, 0x05	; 5
     364:	7d df       	rcall	.-262    	; 0x260 <LCD_WriteData>
     366:	86 e0       	ldi	r24, 0x06	; 6
     368:	73 df       	rcall	.-282    	; 0x250 <LCD_Cursor>
     36a:	81 e0       	ldi	r24, 0x01	; 1
     36c:	79 df       	rcall	.-270    	; 0x260 <LCD_WriteData>
     36e:	82 e0       	ldi	r24, 0x02	; 2
     370:	77 df       	rcall	.-274    	; 0x260 <LCD_WriteData>
     372:	84 e0       	ldi	r24, 0x04	; 4
     374:	75 df       	rcall	.-278    	; 0x260 <LCD_WriteData>
     376:	80 e0       	ldi	r24, 0x00	; 0
     378:	73 df       	rcall	.-282    	; 0x260 <LCD_WriteData>
     37a:	80 e1       	ldi	r24, 0x10	; 16
     37c:	69 df       	rcall	.-302    	; 0x250 <LCD_Cursor>
     37e:	85 e0       	ldi	r24, 0x05	; 5
     380:	6f df       	rcall	.-290    	; 0x260 <LCD_WriteData>
     382:	4c ee       	ldi	r20, 0xEC	; 236
     384:	55 e0       	ldi	r21, 0x05	; 5
     386:	62 e0       	ldi	r22, 0x02	; 2
     388:	70 e0       	ldi	r23, 0x00	; 0
     38a:	81 e0       	ldi	r24, 0x01	; 1
     38c:	8b df       	rcall	.-234    	; 0x2a4 <LCD_Write_Single_Line>
     38e:	87 e1       	ldi	r24, 0x17	; 23
     390:	5f df       	rcall	.-322    	; 0x250 <LCD_Cursor>
     392:	86 e0       	ldi	r24, 0x06	; 6
     394:	65 cf       	rjmp	.-310    	; 0x260 <LCD_WriteData>
     396:	08 95       	ret

00000398 <LCD_Menu_Tick>:
     398:	cf 93       	push	r28
     39a:	df 93       	push	r29
     39c:	8c 30       	cpi	r24, 0x0C	; 12
     39e:	91 05       	cpc	r25, r1
     3a0:	08 f0       	brcs	.+2      	; 0x3a4 <LCD_Menu_Tick+0xc>
     3a2:	17 c1       	rjmp	.+558    	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
     3a4:	fc 01       	movw	r30, r24
     3a6:	ea 5b       	subi	r30, 0xBA	; 186
     3a8:	ff 4f       	sbci	r31, 0xFF	; 255
     3aa:	0c 94 0f 0b 	jmp	0x161e	; 0x161e <__tablejump2__>
     3ae:	80 91 63 06 	lds	r24, 0x0663	; 0x800663 <LEFT>
     3b2:	88 23       	and	r24, r24
     3b4:	09 f4       	brne	.+2      	; 0x3b8 <LCD_Menu_Tick+0x20>
     3b6:	26 c1       	rjmp	.+588    	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
     3b8:	80 91 62 06 	lds	r24, 0x0662	; 0x800662 <RIGHT>
     3bc:	88 23       	and	r24, r24
     3be:	09 f4       	brne	.+2      	; 0x3c2 <LCD_Menu_Tick+0x2a>
     3c0:	21 c1       	rjmp	.+578    	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
     3c2:	80 91 60 06 	lds	r24, 0x0660	; 0x800660 <DOWN>
     3c6:	88 23       	and	r24, r24
     3c8:	09 f4       	brne	.+2      	; 0x3cc <LCD_Menu_Tick+0x34>
     3ca:	1c c1       	rjmp	.+568    	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
     3cc:	80 91 61 06 	lds	r24, 0x0661	; 0x800661 <UP>
     3d0:	88 23       	and	r24, r24
     3d2:	09 f4       	brne	.+2      	; 0x3d6 <LCD_Menu_Tick+0x3e>
     3d4:	17 c1       	rjmp	.+558    	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
     3d6:	10 92 5e 06 	sts	0x065E, r1	; 0x80065e <current_song_choice>
     3da:	82 e0       	ldi	r24, 0x02	; 2
     3dc:	90 e0       	ldi	r25, 0x00	; 0
     3de:	07 c3       	rjmp	.+1550   	; 0x9ee <__LOCK_REGION_LENGTH__+0x5ee>
     3e0:	20 91 63 06 	lds	r18, 0x0663	; 0x800663 <LEFT>
     3e4:	21 11       	cpse	r18, r1
     3e6:	03 c3       	rjmp	.+1542   	; 0x9ee <__LOCK_REGION_LENGTH__+0x5ee>
     3e8:	20 91 62 06 	lds	r18, 0x0662	; 0x800662 <RIGHT>
     3ec:	21 11       	cpse	r18, r1
     3ee:	ff c2       	rjmp	.+1534   	; 0x9ee <__LOCK_REGION_LENGTH__+0x5ee>
     3f0:	20 91 61 06 	lds	r18, 0x0661	; 0x800661 <UP>
     3f4:	21 11       	cpse	r18, r1
     3f6:	fb c2       	rjmp	.+1526   	; 0x9ee <__LOCK_REGION_LENGTH__+0x5ee>
     3f8:	20 91 60 06 	lds	r18, 0x0660	; 0x800660 <DOWN>
     3fc:	21 11       	cpse	r18, r1
     3fe:	f7 c2       	rjmp	.+1518   	; 0x9ee <__LOCK_REGION_LENGTH__+0x5ee>
     400:	24 df       	rcall	.-440    	; 0x24a <LCD_ClearScreen>
     402:	04 c1       	rjmp	.+520    	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
     404:	20 91 63 06 	lds	r18, 0x0663	; 0x800663 <LEFT>
     408:	22 23       	and	r18, r18
     40a:	71 f0       	breq	.+28     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     40c:	30 91 62 06 	lds	r19, 0x0662	; 0x800662 <RIGHT>
     410:	31 11       	cpse	r19, r1
     412:	0a c0       	rjmp	.+20     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     414:	30 91 61 06 	lds	r19, 0x0661	; 0x800661 <UP>
     418:	31 11       	cpse	r19, r1
     41a:	06 c0       	rjmp	.+12     	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
     41c:	20 91 60 06 	lds	r18, 0x0660	; 0x800660 <DOWN>
     420:	21 11       	cpse	r18, r1
     422:	d7 c0       	rjmp	.+430    	; 0x5d2 <__LOCK_REGION_LENGTH__+0x1d2>
     424:	12 df       	rcall	.-476    	; 0x24a <LCD_ClearScreen>
     426:	ee c0       	rjmp	.+476    	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
     428:	80 91 60 06 	lds	r24, 0x0660	; 0x800660 <DOWN>
     42c:	88 23       	and	r24, r24
     42e:	b1 f0       	breq	.+44     	; 0x45c <__LOCK_REGION_LENGTH__+0x5c>
     430:	80 91 61 06 	lds	r24, 0x0661	; 0x800661 <UP>
     434:	81 11       	cpse	r24, r1
     436:	ea c0       	rjmp	.+468    	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
     438:	21 11       	cpse	r18, r1
     43a:	e8 c0       	rjmp	.+464    	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
     43c:	80 91 62 06 	lds	r24, 0x0662	; 0x800662 <RIGHT>
     440:	81 11       	cpse	r24, r1
     442:	e4 c0       	rjmp	.+456    	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
     444:	80 91 5e 06 	lds	r24, 0x065E	; 0x80065e <current_song_choice>
     448:	88 23       	and	r24, r24
     44a:	21 f0       	breq	.+8      	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     44c:	81 e0       	ldi	r24, 0x01	; 1
     44e:	80 93 5e 06 	sts	0x065E, r24	; 0x80065e <current_song_choice>
     452:	e0 c0       	rjmp	.+448    	; 0x614 <__LOCK_REGION_LENGTH__+0x214>
     454:	81 e0       	ldi	r24, 0x01	; 1
     456:	80 93 5e 06 	sts	0x065E, r24	; 0x80065e <current_song_choice>
     45a:	dc c0       	rjmp	.+440    	; 0x614 <__LOCK_REGION_LENGTH__+0x214>
     45c:	80 91 61 06 	lds	r24, 0x0661	; 0x800661 <UP>
     460:	88 23       	and	r24, r24
     462:	09 f4       	brne	.+2      	; 0x466 <__LOCK_REGION_LENGTH__+0x66>
     464:	c1 c2       	rjmp	.+1410   	; 0x9e8 <__LOCK_REGION_LENGTH__+0x5e8>
     466:	21 11       	cpse	r18, r1
     468:	d1 c0       	rjmp	.+418    	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
     46a:	80 91 62 06 	lds	r24, 0x0662	; 0x800662 <RIGHT>
     46e:	81 11       	cpse	r24, r1
     470:	cd c0       	rjmp	.+410    	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
     472:	80 91 5e 06 	lds	r24, 0x065E	; 0x80065e <current_song_choice>
     476:	88 23       	and	r24, r24
     478:	09 f4       	brne	.+2      	; 0x47c <__LOCK_REGION_LENGTH__+0x7c>
     47a:	d3 c0       	rjmp	.+422    	; 0x622 <__LOCK_REGION_LENGTH__+0x222>
     47c:	81 50       	subi	r24, 0x01	; 1
     47e:	80 93 5e 06 	sts	0x065E, r24	; 0x80065e <current_song_choice>
     482:	c4 c0       	rjmp	.+392    	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
     484:	80 91 62 06 	lds	r24, 0x0662	; 0x800662 <RIGHT>
     488:	88 23       	and	r24, r24
     48a:	09 f4       	brne	.+2      	; 0x48e <__LOCK_REGION_LENGTH__+0x8e>
     48c:	bf c0       	rjmp	.+382    	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
     48e:	80 91 5e 06 	lds	r24, 0x065E	; 0x80065e <current_song_choice>
     492:	88 23       	and	r24, r24
     494:	09 f4       	brne	.+2      	; 0x498 <__LOCK_REGION_LENGTH__+0x98>
     496:	a5 c2       	rjmp	.+1354   	; 0x9e2 <__LOCK_REGION_LENGTH__+0x5e2>
     498:	d8 de       	rcall	.-592    	; 0x24a <LCD_ClearScreen>
     49a:	b4 c0       	rjmp	.+360    	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
     49c:	20 91 63 06 	lds	r18, 0x0663	; 0x800663 <LEFT>
     4a0:	21 11       	cpse	r18, r1
     4a2:	a5 c2       	rjmp	.+1354   	; 0x9ee <__LOCK_REGION_LENGTH__+0x5ee>
     4a4:	20 91 62 06 	lds	r18, 0x0662	; 0x800662 <RIGHT>
     4a8:	21 11       	cpse	r18, r1
     4aa:	a1 c2       	rjmp	.+1346   	; 0x9ee <__LOCK_REGION_LENGTH__+0x5ee>
     4ac:	20 91 61 06 	lds	r18, 0x0661	; 0x800661 <UP>
     4b0:	21 11       	cpse	r18, r1
     4b2:	9d c2       	rjmp	.+1338   	; 0x9ee <__LOCK_REGION_LENGTH__+0x5ee>
     4b4:	20 91 60 06 	lds	r18, 0x0660	; 0x800660 <DOWN>
     4b8:	21 11       	cpse	r18, r1
     4ba:	99 c2       	rjmp	.+1330   	; 0x9ee <__LOCK_REGION_LENGTH__+0x5ee>
     4bc:	c6 de       	rcall	.-628    	; 0x24a <LCD_ClearScreen>
     4be:	c8 c0       	rjmp	.+400    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
     4c0:	20 91 63 06 	lds	r18, 0x0663	; 0x800663 <LEFT>
     4c4:	21 11       	cpse	r18, r1
     4c6:	93 c2       	rjmp	.+1318   	; 0x9ee <__LOCK_REGION_LENGTH__+0x5ee>
     4c8:	20 91 62 06 	lds	r18, 0x0662	; 0x800662 <RIGHT>
     4cc:	21 11       	cpse	r18, r1
     4ce:	8f c2       	rjmp	.+1310   	; 0x9ee <__LOCK_REGION_LENGTH__+0x5ee>
     4d0:	20 91 61 06 	lds	r18, 0x0661	; 0x800661 <UP>
     4d4:	21 11       	cpse	r18, r1
     4d6:	8b c2       	rjmp	.+1302   	; 0x9ee <__LOCK_REGION_LENGTH__+0x5ee>
     4d8:	20 91 60 06 	lds	r18, 0x0660	; 0x800660 <DOWN>
     4dc:	21 11       	cpse	r18, r1
     4de:	87 c2       	rjmp	.+1294   	; 0x9ee <__LOCK_REGION_LENGTH__+0x5ee>
     4e0:	b4 de       	rcall	.-664    	; 0x24a <LCD_ClearScreen>
     4e2:	94 c0       	rjmp	.+296    	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
     4e4:	80 91 63 06 	lds	r24, 0x0663	; 0x800663 <LEFT>
     4e8:	88 23       	and	r24, r24
     4ea:	79 f0       	breq	.+30     	; 0x50a <__LOCK_REGION_LENGTH__+0x10a>
     4ec:	80 91 62 06 	lds	r24, 0x0662	; 0x800662 <RIGHT>
     4f0:	81 11       	cpse	r24, r1
     4f2:	ae c0       	rjmp	.+348    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
     4f4:	80 91 61 06 	lds	r24, 0x0661	; 0x800661 <UP>
     4f8:	81 11       	cpse	r24, r1
     4fa:	aa c0       	rjmp	.+340    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
     4fc:	80 91 60 06 	lds	r24, 0x0660	; 0x800660 <DOWN>
     500:	81 11       	cpse	r24, r1
     502:	a6 c0       	rjmp	.+332    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
     504:	85 e0       	ldi	r24, 0x05	; 5
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	72 c2       	rjmp	.+1252   	; 0x9ee <__LOCK_REGION_LENGTH__+0x5ee>
     50a:	80 91 62 06 	lds	r24, 0x0662	; 0x800662 <RIGHT>
     50e:	88 23       	and	r24, r24
     510:	09 f4       	brne	.+2      	; 0x514 <__LOCK_REGION_LENGTH__+0x114>
     512:	9e c0       	rjmp	.+316    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
     514:	80 91 61 06 	lds	r24, 0x0661	; 0x800661 <UP>
     518:	81 11       	cpse	r24, r1
     51a:	9a c0       	rjmp	.+308    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
     51c:	80 91 60 06 	lds	r24, 0x0660	; 0x800660 <DOWN>
     520:	81 11       	cpse	r24, r1
     522:	96 c0       	rjmp	.+300    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
     524:	92 de       	rcall	.-732    	; 0x24a <LCD_ClearScreen>
     526:	87 e0       	ldi	r24, 0x07	; 7
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	61 c2       	rjmp	.+1218   	; 0x9ee <__LOCK_REGION_LENGTH__+0x5ee>
     52c:	20 91 63 06 	lds	r18, 0x0663	; 0x800663 <LEFT>
     530:	21 11       	cpse	r18, r1
     532:	5d c2       	rjmp	.+1210   	; 0x9ee <__LOCK_REGION_LENGTH__+0x5ee>
     534:	20 91 62 06 	lds	r18, 0x0662	; 0x800662 <RIGHT>
     538:	21 11       	cpse	r18, r1
     53a:	59 c2       	rjmp	.+1202   	; 0x9ee <__LOCK_REGION_LENGTH__+0x5ee>
     53c:	20 91 61 06 	lds	r18, 0x0661	; 0x800661 <UP>
     540:	21 11       	cpse	r18, r1
     542:	55 c2       	rjmp	.+1194   	; 0x9ee <__LOCK_REGION_LENGTH__+0x5ee>
     544:	20 91 60 06 	lds	r18, 0x0660	; 0x800660 <DOWN>
     548:	21 11       	cpse	r18, r1
     54a:	51 c2       	rjmp	.+1186   	; 0x9ee <__LOCK_REGION_LENGTH__+0x5ee>
     54c:	1e c1       	rjmp	.+572    	; 0x78a <__LOCK_REGION_LENGTH__+0x38a>
     54e:	80 91 4b 06 	lds	r24, 0x064B	; 0x80064b <count_down.2258>
     552:	89 31       	cpi	r24, 0x19	; 25
     554:	20 f4       	brcc	.+8      	; 0x55e <__LOCK_REGION_LENGTH__+0x15e>
     556:	8f 5f       	subi	r24, 0xFF	; 255
     558:	80 93 4b 06 	sts	0x064B, r24	; 0x80064b <count_down.2258>
     55c:	16 c1       	rjmp	.+556    	; 0x78a <__LOCK_REGION_LENGTH__+0x38a>
     55e:	10 92 4b 06 	sts	0x064B, r1	; 0x80064b <count_down.2258>
     562:	81 e0       	ldi	r24, 0x01	; 1
     564:	80 93 50 06 	sts	0x0650, r24	; 0x800650 <playing>
     568:	24 c1       	rjmp	.+584    	; 0x7b2 <__LOCK_REGION_LENGTH__+0x3b2>
     56a:	80 91 52 06 	lds	r24, 0x0652	; 0x800652 <song_finished>
     56e:	88 23       	and	r24, r24
     570:	09 f4       	brne	.+2      	; 0x574 <__LOCK_REGION_LENGTH__+0x174>
     572:	1f c1       	rjmp	.+574    	; 0x7b2 <__LOCK_REGION_LENGTH__+0x3b2>
     574:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <playing>
     578:	81 11       	cpse	r24, r1
     57a:	1b c1       	rjmp	.+566    	; 0x7b2 <__LOCK_REGION_LENGTH__+0x3b2>
     57c:	93 c1       	rjmp	.+806    	; 0x8a4 <__LOCK_REGION_LENGTH__+0x4a4>
     57e:	80 91 63 06 	lds	r24, 0x0663	; 0x800663 <LEFT>
     582:	81 11       	cpse	r24, r1
     584:	0d c0       	rjmp	.+26     	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
     586:	80 91 62 06 	lds	r24, 0x0662	; 0x800662 <RIGHT>
     58a:	81 11       	cpse	r24, r1
     58c:	09 c0       	rjmp	.+18     	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
     58e:	80 91 61 06 	lds	r24, 0x0661	; 0x800661 <UP>
     592:	81 11       	cpse	r24, r1
     594:	05 c0       	rjmp	.+10     	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
     596:	80 91 60 06 	lds	r24, 0x0660	; 0x800660 <DOWN>
     59a:	88 23       	and	r24, r24
     59c:	09 f4       	brne	.+2      	; 0x5a0 <__LOCK_REGION_LENGTH__+0x1a0>
     59e:	82 c1       	rjmp	.+772    	; 0x8a4 <__LOCK_REGION_LENGTH__+0x4a4>
     5a0:	10 92 52 06 	sts	0x0652, r1	; 0x800652 <song_finished>
     5a4:	10 92 51 06 	sts	0x0651, r1	; 0x800651 <score_increase>
     5a8:	8b e0       	ldi	r24, 0x0B	; 11
     5aa:	90 e0       	ldi	r25, 0x00	; 0
     5ac:	20 c2       	rjmp	.+1088   	; 0x9ee <__LOCK_REGION_LENGTH__+0x5ee>
     5ae:	20 91 63 06 	lds	r18, 0x0663	; 0x800663 <LEFT>
     5b2:	21 11       	cpse	r18, r1
     5b4:	1c c2       	rjmp	.+1080   	; 0x9ee <__LOCK_REGION_LENGTH__+0x5ee>
     5b6:	20 91 62 06 	lds	r18, 0x0662	; 0x800662 <RIGHT>
     5ba:	21 11       	cpse	r18, r1
     5bc:	18 c2       	rjmp	.+1072   	; 0x9ee <__LOCK_REGION_LENGTH__+0x5ee>
     5be:	20 91 61 06 	lds	r18, 0x0661	; 0x800661 <UP>
     5c2:	21 11       	cpse	r18, r1
     5c4:	14 c2       	rjmp	.+1064   	; 0x9ee <__LOCK_REGION_LENGTH__+0x5ee>
     5c6:	20 91 60 06 	lds	r18, 0x0660	; 0x800660 <DOWN>
     5ca:	21 11       	cpse	r18, r1
     5cc:	10 c2       	rjmp	.+1056   	; 0x9ee <__LOCK_REGION_LENGTH__+0x5ee>
     5ce:	3d de       	rcall	.-902    	; 0x24a <LCD_ClearScreen>
     5d0:	19 c0       	rjmp	.+50     	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
     5d2:	86 30       	cpi	r24, 0x06	; 6
     5d4:	91 05       	cpc	r25, r1
     5d6:	09 f4       	brne	.+2      	; 0x5da <__LOCK_REGION_LENGTH__+0x1da>
     5d8:	3b c0       	rjmp	.+118    	; 0x650 <__LOCK_REGION_LENGTH__+0x250>
     5da:	3c f4       	brge	.+14     	; 0x5ea <__LOCK_REGION_LENGTH__+0x1ea>
     5dc:	81 30       	cpi	r24, 0x01	; 1
     5de:	91 05       	cpc	r25, r1
     5e0:	89 f0       	breq	.+34     	; 0x604 <__LOCK_REGION_LENGTH__+0x204>
     5e2:	83 30       	cpi	r24, 0x03	; 3
     5e4:	91 05       	cpc	r25, r1
     5e6:	91 f0       	breq	.+36     	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
     5e8:	02 c2       	rjmp	.+1028   	; 0x9ee <__LOCK_REGION_LENGTH__+0x5ee>
     5ea:	89 30       	cpi	r24, 0x09	; 9
     5ec:	91 05       	cpc	r25, r1
     5ee:	09 f4       	brne	.+2      	; 0x5f2 <__LOCK_REGION_LENGTH__+0x1f2>
     5f0:	e0 c0       	rjmp	.+448    	; 0x7b2 <__LOCK_REGION_LENGTH__+0x3b2>
     5f2:	8a 30       	cpi	r24, 0x0A	; 10
     5f4:	91 05       	cpc	r25, r1
     5f6:	09 f4       	brne	.+2      	; 0x5fa <__LOCK_REGION_LENGTH__+0x1fa>
     5f8:	55 c1       	rjmp	.+682    	; 0x8a4 <__LOCK_REGION_LENGTH__+0x4a4>
     5fa:	88 30       	cpi	r24, 0x08	; 8
     5fc:	91 05       	cpc	r25, r1
     5fe:	09 f0       	breq	.+2      	; 0x602 <__LOCK_REGION_LENGTH__+0x202>
     600:	f6 c1       	rjmp	.+1004   	; 0x9ee <__LOCK_REGION_LENGTH__+0x5ee>
     602:	c3 c0       	rjmp	.+390    	; 0x78a <__LOCK_REGION_LENGTH__+0x38a>
     604:	aa de       	rcall	.-684    	; 0x35a <LCD_Game_Menu>
     606:	81 e0       	ldi	r24, 0x01	; 1
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	f1 c1       	rjmp	.+994    	; 0x9ee <__LOCK_REGION_LENGTH__+0x5ee>
     60c:	80 91 5e 06 	lds	r24, 0x065E	; 0x80065e <current_song_choice>
     610:	88 23       	and	r24, r24
     612:	39 f0       	breq	.+14     	; 0x622 <__LOCK_REGION_LENGTH__+0x222>
     614:	81 e0       	ldi	r24, 0x01	; 1
     616:	1c de       	rcall	.-968    	; 0x250 <LCD_Cursor>
     618:	80 e2       	ldi	r24, 0x20	; 32
     61a:	22 de       	rcall	.-956    	; 0x260 <LCD_WriteData>
     61c:	81 e1       	ldi	r24, 0x11	; 17
     61e:	18 de       	rcall	.-976    	; 0x250 <LCD_Cursor>
     620:	06 c0       	rjmp	.+12     	; 0x62e <__LOCK_REGION_LENGTH__+0x22e>
     622:	81 e1       	ldi	r24, 0x11	; 17
     624:	15 de       	rcall	.-982    	; 0x250 <LCD_Cursor>
     626:	80 e2       	ldi	r24, 0x20	; 32
     628:	1b de       	rcall	.-970    	; 0x260 <LCD_WriteData>
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	11 de       	rcall	.-990    	; 0x250 <LCD_Cursor>
     62e:	85 ea       	ldi	r24, 0xA5	; 165
     630:	17 de       	rcall	.-978    	; 0x260 <LCD_WriteData>
     632:	4d ef       	ldi	r20, 0xFD	; 253
     634:	55 e0       	ldi	r21, 0x05	; 5
     636:	61 e0       	ldi	r22, 0x01	; 1
     638:	70 e0       	ldi	r23, 0x00	; 0
     63a:	82 e0       	ldi	r24, 0x02	; 2
     63c:	33 de       	rcall	.-922    	; 0x2a4 <LCD_Write_Single_Line>
     63e:	4b e0       	ldi	r20, 0x0B	; 11
     640:	56 e0       	ldi	r21, 0x06	; 6
     642:	62 e0       	ldi	r22, 0x02	; 2
     644:	70 e0       	ldi	r23, 0x00	; 0
     646:	82 e0       	ldi	r24, 0x02	; 2
     648:	2d de       	rcall	.-934    	; 0x2a4 <LCD_Write_Single_Line>
     64a:	83 e0       	ldi	r24, 0x03	; 3
     64c:	90 e0       	ldi	r25, 0x00	; 0
     64e:	cf c1       	rjmp	.+926    	; 0x9ee <__LOCK_REGION_LENGTH__+0x5ee>
     650:	4e e0       	ldi	r20, 0x0E	; 14
     652:	56 e0       	ldi	r21, 0x06	; 6
     654:	61 e0       	ldi	r22, 0x01	; 1
     656:	70 e0       	ldi	r23, 0x00	; 0
     658:	81 e0       	ldi	r24, 0x01	; 1
     65a:	24 de       	rcall	.-952    	; 0x2a4 <LCD_Write_Single_Line>
     65c:	87 e0       	ldi	r24, 0x07	; 7
     65e:	f8 dd       	rcall	.-1040   	; 0x250 <LCD_Cursor>
     660:	80 e0       	ldi	r24, 0x00	; 0
     662:	fe dd       	rcall	.-1028   	; 0x260 <LCD_WriteData>
     664:	4e e1       	ldi	r20, 0x1E	; 30
     666:	56 e0       	ldi	r21, 0x06	; 6
     668:	62 e0       	ldi	r22, 0x02	; 2
     66a:	70 e0       	ldi	r23, 0x00	; 0
     66c:	81 e0       	ldi	r24, 0x01	; 1
     66e:	1a de       	rcall	.-972    	; 0x2a4 <LCD_Write_Single_Line>
     670:	8c e1       	ldi	r24, 0x1C	; 28
     672:	ee dd       	rcall	.-1060   	; 0x250 <LCD_Cursor>
     674:	80 91 5e 06 	lds	r24, 0x065E	; 0x80065e <current_song_choice>
     678:	c2 eb       	ldi	r28, 0xB2	; 178
     67a:	d4 e0       	ldi	r29, 0x04	; 4
     67c:	8c 9f       	mul	r24, r28
     67e:	f0 01       	movw	r30, r0
     680:	8d 9f       	mul	r24, r29
     682:	f0 0d       	add	r31, r0
     684:	11 24       	eor	r1, r1
     686:	e7 58       	subi	r30, 0x87	; 135
     688:	f4 4f       	sbci	r31, 0xF4	; 244
     68a:	20 81       	ld	r18, Z
     68c:	31 81       	ldd	r19, Z+1	; 0x01
     68e:	36 95       	lsr	r19
     690:	27 95       	ror	r18
     692:	36 95       	lsr	r19
     694:	27 95       	ror	r18
     696:	ab e7       	ldi	r26, 0x7B	; 123
     698:	b4 e1       	ldi	r27, 0x14	; 20
     69a:	ca d7       	rcall	.+3988   	; 0x1630 <__umulhisi3>
     69c:	ac 01       	movw	r20, r24
     69e:	56 95       	lsr	r21
     6a0:	47 95       	ror	r20
     6a2:	9a 01       	movw	r18, r20
     6a4:	ad ec       	ldi	r26, 0xCD	; 205
     6a6:	bc ec       	ldi	r27, 0xCC	; 204
     6a8:	c3 d7       	rcall	.+3974   	; 0x1630 <__umulhisi3>
     6aa:	96 95       	lsr	r25
     6ac:	87 95       	ror	r24
     6ae:	96 95       	lsr	r25
     6b0:	87 95       	ror	r24
     6b2:	96 95       	lsr	r25
     6b4:	87 95       	ror	r24
     6b6:	9c 01       	movw	r18, r24
     6b8:	22 0f       	add	r18, r18
     6ba:	33 1f       	adc	r19, r19
     6bc:	88 0f       	add	r24, r24
     6be:	99 1f       	adc	r25, r25
     6c0:	88 0f       	add	r24, r24
     6c2:	99 1f       	adc	r25, r25
     6c4:	88 0f       	add	r24, r24
     6c6:	99 1f       	adc	r25, r25
     6c8:	82 0f       	add	r24, r18
     6ca:	93 1f       	adc	r25, r19
     6cc:	9a 01       	movw	r18, r20
     6ce:	28 1b       	sub	r18, r24
     6d0:	39 0b       	sbc	r19, r25
     6d2:	c9 01       	movw	r24, r18
     6d4:	80 5d       	subi	r24, 0xD0	; 208
     6d6:	c4 dd       	rcall	.-1144   	; 0x260 <LCD_WriteData>
     6d8:	80 91 5e 06 	lds	r24, 0x065E	; 0x80065e <current_song_choice>
     6dc:	8c 9f       	mul	r24, r28
     6de:	f0 01       	movw	r30, r0
     6e0:	8d 9f       	mul	r24, r29
     6e2:	f0 0d       	add	r31, r0
     6e4:	11 24       	eor	r1, r1
     6e6:	e7 58       	subi	r30, 0x87	; 135
     6e8:	f4 4f       	sbci	r31, 0xF4	; 244
     6ea:	20 81       	ld	r18, Z
     6ec:	31 81       	ldd	r19, Z+1	; 0x01
     6ee:	ad ec       	ldi	r26, 0xCD	; 205
     6f0:	bc ec       	ldi	r27, 0xCC	; 204
     6f2:	9e d7       	rcall	.+3900   	; 0x1630 <__umulhisi3>
     6f4:	ac 01       	movw	r20, r24
     6f6:	56 95       	lsr	r21
     6f8:	47 95       	ror	r20
     6fa:	56 95       	lsr	r21
     6fc:	47 95       	ror	r20
     6fe:	56 95       	lsr	r21
     700:	47 95       	ror	r20
     702:	9a 01       	movw	r18, r20
     704:	95 d7       	rcall	.+3882   	; 0x1630 <__umulhisi3>
     706:	96 95       	lsr	r25
     708:	87 95       	ror	r24
     70a:	96 95       	lsr	r25
     70c:	87 95       	ror	r24
     70e:	96 95       	lsr	r25
     710:	87 95       	ror	r24
     712:	9c 01       	movw	r18, r24
     714:	22 0f       	add	r18, r18
     716:	33 1f       	adc	r19, r19
     718:	88 0f       	add	r24, r24
     71a:	99 1f       	adc	r25, r25
     71c:	88 0f       	add	r24, r24
     71e:	99 1f       	adc	r25, r25
     720:	88 0f       	add	r24, r24
     722:	99 1f       	adc	r25, r25
     724:	82 0f       	add	r24, r18
     726:	93 1f       	adc	r25, r19
     728:	9a 01       	movw	r18, r20
     72a:	28 1b       	sub	r18, r24
     72c:	39 0b       	sbc	r19, r25
     72e:	c9 01       	movw	r24, r18
     730:	80 5d       	subi	r24, 0xD0	; 208
     732:	96 dd       	rcall	.-1236   	; 0x260 <LCD_WriteData>
     734:	80 91 5e 06 	lds	r24, 0x065E	; 0x80065e <current_song_choice>
     738:	8c 9f       	mul	r24, r28
     73a:	f0 01       	movw	r30, r0
     73c:	8d 9f       	mul	r24, r29
     73e:	f0 0d       	add	r31, r0
     740:	11 24       	eor	r1, r1
     742:	e7 58       	subi	r30, 0x87	; 135
     744:	f4 4f       	sbci	r31, 0xF4	; 244
     746:	40 81       	ld	r20, Z
     748:	51 81       	ldd	r21, Z+1	; 0x01
     74a:	9a 01       	movw	r18, r20
     74c:	ad ec       	ldi	r26, 0xCD	; 205
     74e:	bc ec       	ldi	r27, 0xCC	; 204
     750:	6f d7       	rcall	.+3806   	; 0x1630 <__umulhisi3>
     752:	96 95       	lsr	r25
     754:	87 95       	ror	r24
     756:	96 95       	lsr	r25
     758:	87 95       	ror	r24
     75a:	96 95       	lsr	r25
     75c:	87 95       	ror	r24
     75e:	9c 01       	movw	r18, r24
     760:	22 0f       	add	r18, r18
     762:	33 1f       	adc	r19, r19
     764:	88 0f       	add	r24, r24
     766:	99 1f       	adc	r25, r25
     768:	88 0f       	add	r24, r24
     76a:	99 1f       	adc	r25, r25
     76c:	88 0f       	add	r24, r24
     76e:	99 1f       	adc	r25, r25
     770:	82 0f       	add	r24, r18
     772:	93 1f       	adc	r25, r19
     774:	9a 01       	movw	r18, r20
     776:	28 1b       	sub	r18, r24
     778:	39 0b       	sbc	r19, r25
     77a:	c9 01       	movw	r24, r18
     77c:	80 5d       	subi	r24, 0xD0	; 208
     77e:	70 dd       	rcall	.-1312   	; 0x260 <LCD_WriteData>
     780:	81 e2       	ldi	r24, 0x21	; 33
     782:	66 dd       	rcall	.-1332   	; 0x250 <LCD_Cursor>
     784:	86 e0       	ldi	r24, 0x06	; 6
     786:	90 e0       	ldi	r25, 0x00	; 0
     788:	32 c1       	rjmp	.+612    	; 0x9ee <__LOCK_REGION_LENGTH__+0x5ee>
     78a:	63 e2       	ldi	r22, 0x23	; 35
     78c:	76 e0       	ldi	r23, 0x06	; 6
     78e:	81 e0       	ldi	r24, 0x01	; 1
     790:	70 dd       	rcall	.-1312   	; 0x272 <LCD_DisplayString>
     792:	89 e0       	ldi	r24, 0x09	; 9
     794:	5d dd       	rcall	.-1350   	; 0x250 <LCD_Cursor>
     796:	cb e5       	ldi	r28, 0x5B	; 91
     798:	d6 e0       	ldi	r29, 0x06	; 6
     79a:	88 81       	ld	r24, Y
     79c:	80 5d       	subi	r24, 0xD0	; 208
     79e:	60 dd       	rcall	.-1344   	; 0x260 <LCD_WriteData>
     7a0:	88 81       	ld	r24, Y
     7a2:	80 5d       	subi	r24, 0xD0	; 208
     7a4:	5d dd       	rcall	.-1350   	; 0x260 <LCD_WriteData>
     7a6:	88 81       	ld	r24, Y
     7a8:	80 5d       	subi	r24, 0xD0	; 208
     7aa:	5a dd       	rcall	.-1356   	; 0x260 <LCD_WriteData>
     7ac:	88 e0       	ldi	r24, 0x08	; 8
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	1e c1       	rjmp	.+572    	; 0x9ee <__LOCK_REGION_LENGTH__+0x5ee>
     7b2:	80 91 51 06 	lds	r24, 0x0651	; 0x800651 <score_increase>
     7b6:	88 23       	and	r24, r24
     7b8:	09 f4       	brne	.+2      	; 0x7bc <__LOCK_REGION_LENGTH__+0x3bc>
     7ba:	10 c1       	rjmp	.+544    	; 0x9dc <__LOCK_REGION_LENGTH__+0x5dc>
     7bc:	89 e0       	ldi	r24, 0x09	; 9
     7be:	48 dd       	rcall	.-1392   	; 0x250 <LCD_Cursor>
     7c0:	20 91 5b 06 	lds	r18, 0x065B	; 0x80065b <current_score>
     7c4:	30 91 5c 06 	lds	r19, 0x065C	; 0x80065c <current_score+0x1>
     7c8:	36 95       	lsr	r19
     7ca:	27 95       	ror	r18
     7cc:	36 95       	lsr	r19
     7ce:	27 95       	ror	r18
     7d0:	ab e7       	ldi	r26, 0x7B	; 123
     7d2:	b4 e1       	ldi	r27, 0x14	; 20
     7d4:	2d d7       	rcall	.+3674   	; 0x1630 <__umulhisi3>
     7d6:	ac 01       	movw	r20, r24
     7d8:	56 95       	lsr	r21
     7da:	47 95       	ror	r20
     7dc:	9a 01       	movw	r18, r20
     7de:	ad ec       	ldi	r26, 0xCD	; 205
     7e0:	bc ec       	ldi	r27, 0xCC	; 204
     7e2:	26 d7       	rcall	.+3660   	; 0x1630 <__umulhisi3>
     7e4:	96 95       	lsr	r25
     7e6:	87 95       	ror	r24
     7e8:	96 95       	lsr	r25
     7ea:	87 95       	ror	r24
     7ec:	96 95       	lsr	r25
     7ee:	87 95       	ror	r24
     7f0:	9c 01       	movw	r18, r24
     7f2:	22 0f       	add	r18, r18
     7f4:	33 1f       	adc	r19, r19
     7f6:	88 0f       	add	r24, r24
     7f8:	99 1f       	adc	r25, r25
     7fa:	88 0f       	add	r24, r24
     7fc:	99 1f       	adc	r25, r25
     7fe:	88 0f       	add	r24, r24
     800:	99 1f       	adc	r25, r25
     802:	82 0f       	add	r24, r18
     804:	93 1f       	adc	r25, r19
     806:	9a 01       	movw	r18, r20
     808:	28 1b       	sub	r18, r24
     80a:	39 0b       	sbc	r19, r25
     80c:	c9 01       	movw	r24, r18
     80e:	80 5d       	subi	r24, 0xD0	; 208
     810:	27 dd       	rcall	.-1458   	; 0x260 <LCD_WriteData>
     812:	20 91 5b 06 	lds	r18, 0x065B	; 0x80065b <current_score>
     816:	30 91 5c 06 	lds	r19, 0x065C	; 0x80065c <current_score+0x1>
     81a:	ad ec       	ldi	r26, 0xCD	; 205
     81c:	bc ec       	ldi	r27, 0xCC	; 204
     81e:	08 d7       	rcall	.+3600   	; 0x1630 <__umulhisi3>
     820:	ac 01       	movw	r20, r24
     822:	56 95       	lsr	r21
     824:	47 95       	ror	r20
     826:	56 95       	lsr	r21
     828:	47 95       	ror	r20
     82a:	56 95       	lsr	r21
     82c:	47 95       	ror	r20
     82e:	9a 01       	movw	r18, r20
     830:	ff d6       	rcall	.+3582   	; 0x1630 <__umulhisi3>
     832:	96 95       	lsr	r25
     834:	87 95       	ror	r24
     836:	96 95       	lsr	r25
     838:	87 95       	ror	r24
     83a:	96 95       	lsr	r25
     83c:	87 95       	ror	r24
     83e:	9c 01       	movw	r18, r24
     840:	22 0f       	add	r18, r18
     842:	33 1f       	adc	r19, r19
     844:	88 0f       	add	r24, r24
     846:	99 1f       	adc	r25, r25
     848:	88 0f       	add	r24, r24
     84a:	99 1f       	adc	r25, r25
     84c:	88 0f       	add	r24, r24
     84e:	99 1f       	adc	r25, r25
     850:	82 0f       	add	r24, r18
     852:	93 1f       	adc	r25, r19
     854:	9a 01       	movw	r18, r20
     856:	28 1b       	sub	r18, r24
     858:	39 0b       	sbc	r19, r25
     85a:	c9 01       	movw	r24, r18
     85c:	80 5d       	subi	r24, 0xD0	; 208
     85e:	00 dd       	rcall	.-1536   	; 0x260 <LCD_WriteData>
     860:	40 91 5b 06 	lds	r20, 0x065B	; 0x80065b <current_score>
     864:	50 91 5c 06 	lds	r21, 0x065C	; 0x80065c <current_score+0x1>
     868:	9a 01       	movw	r18, r20
     86a:	ad ec       	ldi	r26, 0xCD	; 205
     86c:	bc ec       	ldi	r27, 0xCC	; 204
     86e:	e0 d6       	rcall	.+3520   	; 0x1630 <__umulhisi3>
     870:	96 95       	lsr	r25
     872:	87 95       	ror	r24
     874:	96 95       	lsr	r25
     876:	87 95       	ror	r24
     878:	96 95       	lsr	r25
     87a:	87 95       	ror	r24
     87c:	9c 01       	movw	r18, r24
     87e:	22 0f       	add	r18, r18
     880:	33 1f       	adc	r19, r19
     882:	88 0f       	add	r24, r24
     884:	99 1f       	adc	r25, r25
     886:	88 0f       	add	r24, r24
     888:	99 1f       	adc	r25, r25
     88a:	88 0f       	add	r24, r24
     88c:	99 1f       	adc	r25, r25
     88e:	82 0f       	add	r24, r18
     890:	93 1f       	adc	r25, r19
     892:	9a 01       	movw	r18, r20
     894:	28 1b       	sub	r18, r24
     896:	39 0b       	sbc	r19, r25
     898:	c9 01       	movw	r24, r18
     89a:	80 5d       	subi	r24, 0xD0	; 208
     89c:	e1 dc       	rcall	.-1598   	; 0x260 <LCD_WriteData>
     89e:	89 e0       	ldi	r24, 0x09	; 9
     8a0:	90 e0       	ldi	r25, 0x00	; 0
     8a2:	a5 c0       	rjmp	.+330    	; 0x9ee <__LOCK_REGION_LENGTH__+0x5ee>
     8a4:	20 91 5e 06 	lds	r18, 0x065E	; 0x80065e <current_song_choice>
     8a8:	82 eb       	ldi	r24, 0xB2	; 178
     8aa:	94 e0       	ldi	r25, 0x04	; 4
     8ac:	28 9f       	mul	r18, r24
     8ae:	f0 01       	movw	r30, r0
     8b0:	29 9f       	mul	r18, r25
     8b2:	f0 0d       	add	r31, r0
     8b4:	11 24       	eor	r1, r1
     8b6:	e7 58       	subi	r30, 0x87	; 135
     8b8:	f4 4f       	sbci	r31, 0xF4	; 244
     8ba:	20 81       	ld	r18, Z
     8bc:	31 81       	ldd	r19, Z+1	; 0x01
     8be:	80 91 5b 06 	lds	r24, 0x065B	; 0x80065b <current_score>
     8c2:	90 91 5c 06 	lds	r25, 0x065C	; 0x80065c <current_score+0x1>
     8c6:	28 17       	cp	r18, r24
     8c8:	39 07       	cpc	r19, r25
     8ca:	08 f0       	brcs	.+2      	; 0x8ce <__LOCK_REGION_LENGTH__+0x4ce>
     8cc:	7e c0       	rjmp	.+252    	; 0x9ca <__LOCK_REGION_LENGTH__+0x5ca>
     8ce:	bd dc       	rcall	.-1670   	; 0x24a <LCD_ClearScreen>
     8d0:	6a e2       	ldi	r22, 0x2A	; 42
     8d2:	76 e0       	ldi	r23, 0x06	; 6
     8d4:	81 e0       	ldi	r24, 0x01	; 1
     8d6:	cd dc       	rcall	.-1638   	; 0x272 <LCD_DisplayString>
     8d8:	8c e0       	ldi	r24, 0x0C	; 12
     8da:	ba dc       	rcall	.-1676   	; 0x250 <LCD_Cursor>
     8dc:	20 91 5b 06 	lds	r18, 0x065B	; 0x80065b <current_score>
     8e0:	30 91 5c 06 	lds	r19, 0x065C	; 0x80065c <current_score+0x1>
     8e4:	36 95       	lsr	r19
     8e6:	27 95       	ror	r18
     8e8:	36 95       	lsr	r19
     8ea:	27 95       	ror	r18
     8ec:	ab e7       	ldi	r26, 0x7B	; 123
     8ee:	b4 e1       	ldi	r27, 0x14	; 20
     8f0:	9f d6       	rcall	.+3390   	; 0x1630 <__umulhisi3>
     8f2:	ac 01       	movw	r20, r24
     8f4:	56 95       	lsr	r21
     8f6:	47 95       	ror	r20
     8f8:	9a 01       	movw	r18, r20
     8fa:	ad ec       	ldi	r26, 0xCD	; 205
     8fc:	bc ec       	ldi	r27, 0xCC	; 204
     8fe:	98 d6       	rcall	.+3376   	; 0x1630 <__umulhisi3>
     900:	96 95       	lsr	r25
     902:	87 95       	ror	r24
     904:	96 95       	lsr	r25
     906:	87 95       	ror	r24
     908:	96 95       	lsr	r25
     90a:	87 95       	ror	r24
     90c:	9c 01       	movw	r18, r24
     90e:	22 0f       	add	r18, r18
     910:	33 1f       	adc	r19, r19
     912:	88 0f       	add	r24, r24
     914:	99 1f       	adc	r25, r25
     916:	88 0f       	add	r24, r24
     918:	99 1f       	adc	r25, r25
     91a:	88 0f       	add	r24, r24
     91c:	99 1f       	adc	r25, r25
     91e:	82 0f       	add	r24, r18
     920:	93 1f       	adc	r25, r19
     922:	9a 01       	movw	r18, r20
     924:	28 1b       	sub	r18, r24
     926:	39 0b       	sbc	r19, r25
     928:	c9 01       	movw	r24, r18
     92a:	80 5d       	subi	r24, 0xD0	; 208
     92c:	99 dc       	rcall	.-1742   	; 0x260 <LCD_WriteData>
     92e:	20 91 5b 06 	lds	r18, 0x065B	; 0x80065b <current_score>
     932:	30 91 5c 06 	lds	r19, 0x065C	; 0x80065c <current_score+0x1>
     936:	ad ec       	ldi	r26, 0xCD	; 205
     938:	bc ec       	ldi	r27, 0xCC	; 204
     93a:	7a d6       	rcall	.+3316   	; 0x1630 <__umulhisi3>
     93c:	ac 01       	movw	r20, r24
     93e:	56 95       	lsr	r21
     940:	47 95       	ror	r20
     942:	56 95       	lsr	r21
     944:	47 95       	ror	r20
     946:	56 95       	lsr	r21
     948:	47 95       	ror	r20
     94a:	9a 01       	movw	r18, r20
     94c:	71 d6       	rcall	.+3298   	; 0x1630 <__umulhisi3>
     94e:	96 95       	lsr	r25
     950:	87 95       	ror	r24
     952:	96 95       	lsr	r25
     954:	87 95       	ror	r24
     956:	96 95       	lsr	r25
     958:	87 95       	ror	r24
     95a:	9c 01       	movw	r18, r24
     95c:	22 0f       	add	r18, r18
     95e:	33 1f       	adc	r19, r19
     960:	88 0f       	add	r24, r24
     962:	99 1f       	adc	r25, r25
     964:	88 0f       	add	r24, r24
     966:	99 1f       	adc	r25, r25
     968:	88 0f       	add	r24, r24
     96a:	99 1f       	adc	r25, r25
     96c:	82 0f       	add	r24, r18
     96e:	93 1f       	adc	r25, r19
     970:	9a 01       	movw	r18, r20
     972:	28 1b       	sub	r18, r24
     974:	39 0b       	sbc	r19, r25
     976:	c9 01       	movw	r24, r18
     978:	80 5d       	subi	r24, 0xD0	; 208
     97a:	72 dc       	rcall	.-1820   	; 0x260 <LCD_WriteData>
     97c:	40 91 5b 06 	lds	r20, 0x065B	; 0x80065b <current_score>
     980:	50 91 5c 06 	lds	r21, 0x065C	; 0x80065c <current_score+0x1>
     984:	9a 01       	movw	r18, r20
     986:	ad ec       	ldi	r26, 0xCD	; 205
     988:	bc ec       	ldi	r27, 0xCC	; 204
     98a:	52 d6       	rcall	.+3236   	; 0x1630 <__umulhisi3>
     98c:	96 95       	lsr	r25
     98e:	87 95       	ror	r24
     990:	96 95       	lsr	r25
     992:	87 95       	ror	r24
     994:	96 95       	lsr	r25
     996:	87 95       	ror	r24
     998:	9c 01       	movw	r18, r24
     99a:	22 0f       	add	r18, r18
     99c:	33 1f       	adc	r19, r19
     99e:	88 0f       	add	r24, r24
     9a0:	99 1f       	adc	r25, r25
     9a2:	88 0f       	add	r24, r24
     9a4:	99 1f       	adc	r25, r25
     9a6:	88 0f       	add	r24, r24
     9a8:	99 1f       	adc	r25, r25
     9aa:	82 0f       	add	r24, r18
     9ac:	93 1f       	adc	r25, r19
     9ae:	9a 01       	movw	r18, r20
     9b0:	28 1b       	sub	r18, r24
     9b2:	39 0b       	sbc	r19, r25
     9b4:	c9 01       	movw	r24, r18
     9b6:	80 5d       	subi	r24, 0xD0	; 208
     9b8:	53 dc       	rcall	.-1882   	; 0x260 <LCD_WriteData>
     9ba:	60 91 5b 06 	lds	r22, 0x065B	; 0x80065b <current_score>
     9be:	81 e0       	ldi	r24, 0x01	; 1
     9c0:	90 e0       	ldi	r25, 0x00	; 0
     9c2:	4d d6       	rcall	.+3226   	; 0x165e <eeprom_update_byte>
     9c4:	8a e0       	ldi	r24, 0x0A	; 10
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	12 c0       	rjmp	.+36     	; 0x9ee <__LOCK_REGION_LENGTH__+0x5ee>
     9ca:	46 e3       	ldi	r20, 0x36	; 54
     9cc:	56 e0       	ldi	r21, 0x06	; 6
     9ce:	62 e0       	ldi	r22, 0x02	; 2
     9d0:	70 e0       	ldi	r23, 0x00	; 0
     9d2:	81 e0       	ldi	r24, 0x01	; 1
     9d4:	67 dc       	rcall	.-1842   	; 0x2a4 <LCD_Write_Single_Line>
     9d6:	8a e0       	ldi	r24, 0x0A	; 10
     9d8:	90 e0       	ldi	r25, 0x00	; 0
     9da:	09 c0       	rjmp	.+18     	; 0x9ee <__LOCK_REGION_LENGTH__+0x5ee>
     9dc:	89 e0       	ldi	r24, 0x09	; 9
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	06 c0       	rjmp	.+12     	; 0x9ee <__LOCK_REGION_LENGTH__+0x5ee>
     9e2:	84 e0       	ldi	r24, 0x04	; 4
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	03 c0       	rjmp	.+6      	; 0x9ee <__LOCK_REGION_LENGTH__+0x5ee>
     9e8:	21 11       	cpse	r18, r1
     9ea:	10 ce       	rjmp	.-992    	; 0x60c <__LOCK_REGION_LENGTH__+0x20c>
     9ec:	4b cd       	rjmp	.-1386   	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
     9ee:	df 91       	pop	r29
     9f0:	cf 91       	pop	r28
     9f2:	08 95       	ret

000009f4 <TimerSet>:
     9f4:	60 93 b8 05 	sts	0x05B8, r22	; 0x8005b8 <_avr_timer_M>
     9f8:	70 93 b9 05 	sts	0x05B9, r23	; 0x8005b9 <_avr_timer_M+0x1>
     9fc:	80 93 ba 05 	sts	0x05BA, r24	; 0x8005ba <_avr_timer_M+0x2>
     a00:	90 93 bb 05 	sts	0x05BB, r25	; 0x8005bb <_avr_timer_M+0x3>
     a04:	60 93 64 06 	sts	0x0664, r22	; 0x800664 <_avr_timer_cntcurr>
     a08:	70 93 65 06 	sts	0x0665, r23	; 0x800665 <_avr_timer_cntcurr+0x1>
     a0c:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <_avr_timer_cntcurr+0x2>
     a10:	90 93 67 06 	sts	0x0667, r25	; 0x800667 <_avr_timer_cntcurr+0x3>
     a14:	08 95       	ret

00000a16 <TimerOn>:
     a16:	8b e0       	ldi	r24, 0x0B	; 11
     a18:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     a1c:	8d e7       	ldi	r24, 0x7D	; 125
     a1e:	90 e0       	ldi	r25, 0x00	; 0
     a20:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     a24:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     a28:	82 e0       	ldi	r24, 0x02	; 2
     a2a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     a2e:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     a32:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     a36:	80 91 b8 05 	lds	r24, 0x05B8	; 0x8005b8 <_avr_timer_M>
     a3a:	90 91 b9 05 	lds	r25, 0x05B9	; 0x8005b9 <_avr_timer_M+0x1>
     a3e:	a0 91 ba 05 	lds	r26, 0x05BA	; 0x8005ba <_avr_timer_M+0x2>
     a42:	b0 91 bb 05 	lds	r27, 0x05BB	; 0x8005bb <_avr_timer_M+0x3>
     a46:	80 93 64 06 	sts	0x0664, r24	; 0x800664 <_avr_timer_cntcurr>
     a4a:	90 93 65 06 	sts	0x0665, r25	; 0x800665 <_avr_timer_cntcurr+0x1>
     a4e:	a0 93 66 06 	sts	0x0666, r26	; 0x800666 <_avr_timer_cntcurr+0x2>
     a52:	b0 93 67 06 	sts	0x0667, r27	; 0x800667 <_avr_timer_cntcurr+0x3>
     a56:	8f b7       	in	r24, 0x3f	; 63
     a58:	80 68       	ori	r24, 0x80	; 128
     a5a:	8f bf       	out	0x3f, r24	; 63
     a5c:	08 95       	ret

00000a5e <TimerISR>:
     a5e:	ef 92       	push	r14
     a60:	ff 92       	push	r15
     a62:	0f 93       	push	r16
     a64:	1f 93       	push	r17
     a66:	cf 93       	push	r28
     a68:	df 93       	push	r29
     a6a:	81 e0       	ldi	r24, 0x01	; 1
     a6c:	80 93 68 06 	sts	0x0668, r24	; 0x800668 <TimerFlag>
     a70:	c9 e6       	ldi	r28, 0x69	; 105
     a72:	d6 e0       	ldi	r29, 0x06	; 6
     a74:	0f 2e       	mov	r0, r31
     a76:	f9 ec       	ldi	r31, 0xC9	; 201
     a78:	ef 2e       	mov	r14, r31
     a7a:	f6 e0       	ldi	r31, 0x06	; 6
     a7c:	ff 2e       	mov	r15, r31
     a7e:	f0 2d       	mov	r31, r0
     a80:	8e 01       	movw	r16, r28
     a82:	4e 81       	ldd	r20, Y+6	; 0x06
     a84:	5f 81       	ldd	r21, Y+7	; 0x07
     a86:	68 85       	ldd	r22, Y+8	; 0x08
     a88:	79 85       	ldd	r23, Y+9	; 0x09
     a8a:	8a 81       	ldd	r24, Y+2	; 0x02
     a8c:	9b 81       	ldd	r25, Y+3	; 0x03
     a8e:	ac 81       	ldd	r26, Y+4	; 0x04
     a90:	bd 81       	ldd	r27, Y+5	; 0x05
     a92:	48 17       	cp	r20, r24
     a94:	59 07       	cpc	r21, r25
     a96:	6a 07       	cpc	r22, r26
     a98:	7b 07       	cpc	r23, r27
     a9a:	58 f0       	brcs	.+22     	; 0xab2 <TimerISR+0x54>
     a9c:	ea 85       	ldd	r30, Y+10	; 0x0a
     a9e:	fb 85       	ldd	r31, Y+11	; 0x0b
     aa0:	88 81       	ld	r24, Y
     aa2:	99 81       	ldd	r25, Y+1	; 0x01
     aa4:	09 95       	icall
     aa6:	99 83       	std	Y+1, r25	; 0x01
     aa8:	88 83       	st	Y, r24
     aaa:	1e 82       	std	Y+6, r1	; 0x06
     aac:	1f 82       	std	Y+7, r1	; 0x07
     aae:	18 86       	std	Y+8, r1	; 0x08
     ab0:	19 86       	std	Y+9, r1	; 0x09
     ab2:	f8 01       	movw	r30, r16
     ab4:	86 81       	ldd	r24, Z+6	; 0x06
     ab6:	97 81       	ldd	r25, Z+7	; 0x07
     ab8:	a0 85       	ldd	r26, Z+8	; 0x08
     aba:	b1 85       	ldd	r27, Z+9	; 0x09
     abc:	05 96       	adiw	r24, 0x05	; 5
     abe:	a1 1d       	adc	r26, r1
     ac0:	b1 1d       	adc	r27, r1
     ac2:	86 83       	std	Z+6, r24	; 0x06
     ac4:	97 83       	std	Z+7, r25	; 0x07
     ac6:	a0 87       	std	Z+8, r26	; 0x08
     ac8:	b1 87       	std	Z+9, r27	; 0x09
     aca:	2c 96       	adiw	r28, 0x0c	; 12
     acc:	ce 15       	cp	r28, r14
     ace:	df 05       	cpc	r29, r15
     ad0:	b9 f6       	brne	.-82     	; 0xa80 <TimerISR+0x22>
     ad2:	df 91       	pop	r29
     ad4:	cf 91       	pop	r28
     ad6:	1f 91       	pop	r17
     ad8:	0f 91       	pop	r16
     ada:	ff 90       	pop	r15
     adc:	ef 90       	pop	r14
     ade:	08 95       	ret

00000ae0 <__vector_13>:
     ae0:	1f 92       	push	r1
     ae2:	0f 92       	push	r0
     ae4:	0f b6       	in	r0, 0x3f	; 63
     ae6:	0f 92       	push	r0
     ae8:	11 24       	eor	r1, r1
     aea:	0b b6       	in	r0, 0x3b	; 59
     aec:	0f 92       	push	r0
     aee:	2f 93       	push	r18
     af0:	3f 93       	push	r19
     af2:	4f 93       	push	r20
     af4:	5f 93       	push	r21
     af6:	6f 93       	push	r22
     af8:	7f 93       	push	r23
     afa:	8f 93       	push	r24
     afc:	9f 93       	push	r25
     afe:	af 93       	push	r26
     b00:	bf 93       	push	r27
     b02:	ef 93       	push	r30
     b04:	ff 93       	push	r31
     b06:	80 91 64 06 	lds	r24, 0x0664	; 0x800664 <_avr_timer_cntcurr>
     b0a:	90 91 65 06 	lds	r25, 0x0665	; 0x800665 <_avr_timer_cntcurr+0x1>
     b0e:	a0 91 66 06 	lds	r26, 0x0666	; 0x800666 <_avr_timer_cntcurr+0x2>
     b12:	b0 91 67 06 	lds	r27, 0x0667	; 0x800667 <_avr_timer_cntcurr+0x3>
     b16:	01 97       	sbiw	r24, 0x01	; 1
     b18:	a1 09       	sbc	r26, r1
     b1a:	b1 09       	sbc	r27, r1
     b1c:	80 93 64 06 	sts	0x0664, r24	; 0x800664 <_avr_timer_cntcurr>
     b20:	90 93 65 06 	sts	0x0665, r25	; 0x800665 <_avr_timer_cntcurr+0x1>
     b24:	a0 93 66 06 	sts	0x0666, r26	; 0x800666 <_avr_timer_cntcurr+0x2>
     b28:	b0 93 67 06 	sts	0x0667, r27	; 0x800667 <_avr_timer_cntcurr+0x3>
     b2c:	89 2b       	or	r24, r25
     b2e:	8a 2b       	or	r24, r26
     b30:	8b 2b       	or	r24, r27
     b32:	89 f4       	brne	.+34     	; 0xb56 <__vector_13+0x76>
     b34:	94 df       	rcall	.-216    	; 0xa5e <TimerISR>
     b36:	80 91 b8 05 	lds	r24, 0x05B8	; 0x8005b8 <_avr_timer_M>
     b3a:	90 91 b9 05 	lds	r25, 0x05B9	; 0x8005b9 <_avr_timer_M+0x1>
     b3e:	a0 91 ba 05 	lds	r26, 0x05BA	; 0x8005ba <_avr_timer_M+0x2>
     b42:	b0 91 bb 05 	lds	r27, 0x05BB	; 0x8005bb <_avr_timer_M+0x3>
     b46:	80 93 64 06 	sts	0x0664, r24	; 0x800664 <_avr_timer_cntcurr>
     b4a:	90 93 65 06 	sts	0x0665, r25	; 0x800665 <_avr_timer_cntcurr+0x1>
     b4e:	a0 93 66 06 	sts	0x0666, r26	; 0x800666 <_avr_timer_cntcurr+0x2>
     b52:	b0 93 67 06 	sts	0x0667, r27	; 0x800667 <_avr_timer_cntcurr+0x3>
     b56:	ff 91       	pop	r31
     b58:	ef 91       	pop	r30
     b5a:	bf 91       	pop	r27
     b5c:	af 91       	pop	r26
     b5e:	9f 91       	pop	r25
     b60:	8f 91       	pop	r24
     b62:	7f 91       	pop	r23
     b64:	6f 91       	pop	r22
     b66:	5f 91       	pop	r21
     b68:	4f 91       	pop	r20
     b6a:	3f 91       	pop	r19
     b6c:	2f 91       	pop	r18
     b6e:	0f 90       	pop	r0
     b70:	0b be       	out	0x3b, r0	; 59
     b72:	0f 90       	pop	r0
     b74:	0f be       	out	0x3f, r0	; 63
     b76:	0f 90       	pop	r0
     b78:	1f 90       	pop	r1
     b7a:	18 95       	reti

00000b7c <Shift_Init>:

void Shift_Init() {
    DDRC = Set_Bit(DDRC, DATA);
     b7c:	3a 9a       	sbi	0x07, 2	; 7
    DDRC = Set_Bit(DDRC, SHIFT);
     b7e:	3b 9a       	sbi	0x07, 3	; 7
    DDRC = Set_Bit(DDRC, STORE);
     b80:	3c 9a       	sbi	0x07, 4	; 7
     b82:	08 95       	ret

00000b84 <Shift_Data_High>:
}

//Set Data line high
void Shift_Data_High() {
    PORTC = Set_Bit(PORTC, DATA);
     b84:	42 9a       	sbi	0x08, 2	; 8
     b86:	08 95       	ret

00000b88 <Shift_Data_Low>:
}

//Set Data line low
void Shift_Data_Low() {
    PORTC = Clear_Bit(PORTC, DATA);
     b88:	42 98       	cbi	0x08, 2	; 8
     b8a:	08 95       	ret

00000b8c <Shift_Pulse>:
}

//Pulse Shift Clock
void Shift_Pulse() {
    PORTC = Set_Bit(PORTC, SHIFT);
     b8c:	43 9a       	sbi	0x08, 3	; 8
    PORTC = Clear_Bit(PORTC, SHIFT);
     b8e:	43 98       	cbi	0x08, 3	; 8
     b90:	08 95       	ret

00000b92 <Shift_Store>:
}

//Pulse Store Clock
void Shift_Store() {
    PORTC = Set_Bit(PORTC, STORE);
     b92:	44 9a       	sbi	0x08, 4	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     b94:	81 e0       	ldi	r24, 0x01	; 1
     b96:	90 e0       	ldi	r25, 0x00	; 0
     b98:	fc 01       	movw	r30, r24
     b9a:	31 97       	sbiw	r30, 0x01	; 1
     b9c:	f1 f7       	brne	.-4      	; 0xb9a <Shift_Store+0x8>
    //SET_BIT(SHIFT_PORT,STORE_LINE);
    _delay_loop_2(1);

    //CLR_BIT(SHIFT_PORT,STORE_LINE);
    PORTC = Clear_Bit(PORTC, STORE);
     b9e:	44 98       	cbi	0x08, 4	; 8
     ba0:	01 97       	sbiw	r24, 0x01	; 1
     ba2:	f1 f7       	brne	.-4      	; 0xba0 <Shift_Store+0xe>
     ba4:	08 95       	ret

00000ba6 <Shift_transmit_data>:
    _delay_loop_2(1);
}


void Shift_transmit_data(unsigned char data) {
     ba6:	cf 93       	push	r28
     ba8:	df 93       	push	r29
     baa:	d8 2f       	mov	r29, r24
     bac:	c8 e0       	ldi	r28, 0x08	; 8
    for(unsigned char i=0;i<8;i++) {
        if(data & 0x80) {
     bae:	dd 23       	and	r29, r29
     bb0:	14 f4       	brge	.+4      	; 0xbb6 <Shift_transmit_data+0x10>
            Shift_Data_High();
     bb2:	e8 df       	rcall	.-48     	; 0xb84 <Shift_Data_High>
     bb4:	01 c0       	rjmp	.+2      	; 0xbb8 <Shift_transmit_data+0x12>
            } else {
            Shift_Data_Low();
     bb6:	e8 df       	rcall	.-48     	; 0xb88 <Shift_Data_Low>
        }

        Shift_Pulse();
     bb8:	e9 df       	rcall	.-46     	; 0xb8c <Shift_Pulse>
     bba:	dd 0f       	add	r29, r29
        data=data << 1;
     bbc:	c1 50       	subi	r28, 0x01	; 1
    _delay_loop_2(1);
}


void Shift_transmit_data(unsigned char data) {
    for(unsigned char i=0;i<8;i++) {
     bbe:	b9 f7       	brne	.-18     	; 0xbae <Shift_transmit_data+0x8>

        Shift_Pulse();
        data=data << 1;
    }

    Shift_Store();
     bc0:	e8 df       	rcall	.-48     	; 0xb92 <Shift_Store>
     bc2:	df 91       	pop	r29
     bc4:	cf 91       	pop	r28
     bc6:	08 95       	ret

00000bc8 <RGB_Matrix_Tick>:
     bc8:	ef 92       	push	r14
    }

    return state;
}

int RGB_Matrix_Tick(int state){
     bca:	ff 92       	push	r15
     bcc:	0f 93       	push	r16
     bce:	1f 93       	push	r17
     bd0:	cf 93       	push	r28
     bd2:	df 93       	push	r29
    static unsigned char play_note;
    static unsigned char rest_note;
    static unsigned char note_to_hit;
    switch(state){
     bd4:	81 30       	cpi	r24, 0x01	; 1
     bd6:	91 05       	cpc	r25, r1
     bd8:	59 f0       	breq	.+22     	; 0xbf0 <RGB_Matrix_Tick+0x28>
     bda:	1c f4       	brge	.+6      	; 0xbe2 <RGB_Matrix_Tick+0x1a>
     bdc:	00 97       	sbiw	r24, 0x00	; 0
     bde:	81 f1       	breq	.+96     	; 0xc40 <RGB_Matrix_Tick+0x78>
     be0:	19 c0       	rjmp	.+50     	; 0xc14 <RGB_Matrix_Tick+0x4c>
     be2:	82 30       	cpi	r24, 0x02	; 2
     be4:	91 05       	cpc	r25, r1
     be6:	69 f0       	breq	.+26     	; 0xc02 <RGB_Matrix_Tick+0x3a>
     be8:	83 30       	cpi	r24, 0x03	; 3
     bea:	91 05       	cpc	r25, r1
     bec:	49 f1       	breq	.+82     	; 0xc40 <RGB_Matrix_Tick+0x78>
     bee:	12 c0       	rjmp	.+36     	; 0xc14 <RGB_Matrix_Tick+0x4c>
        case RGB_INIT:
            state = RGB_MENU;
            break;
        case RGB_MENU:
            if(playing){
     bf0:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <playing>
     bf4:	88 23       	and	r24, r24
     bf6:	21 f1       	breq	.+72     	; 0xc40 <RGB_Matrix_Tick+0x78>
                play_note = 0;
     bf8:	10 92 4a 06 	sts	0x064A, r1	; 0x80064a <play_note.2287>
                rest_note = 0;
     bfc:	10 92 49 06 	sts	0x0649, r1	; 0x800649 <rest_note.2288>
                state = RGB_SONG;
                break;
     c00:	14 c0       	rjmp	.+40     	; 0xc2a <RGB_Matrix_Tick+0x62>
            else{
                state = RGB_MENU;
                break;
            }    
        case RGB_SONG:
            if(song_finished || !playing){
     c02:	80 91 52 06 	lds	r24, 0x0652	; 0x800652 <song_finished>
     c06:	81 11       	cpse	r24, r1
     c08:	16 c0       	rjmp	.+44     	; 0xc36 <RGB_Matrix_Tick+0x6e>
     c0a:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <playing>
     c0e:	81 11       	cpse	r24, r1
     c10:	0c c0       	rjmp	.+24     	; 0xc2a <RGB_Matrix_Tick+0x62>
     c12:	11 c0       	rjmp	.+34     	; 0xc36 <RGB_Matrix_Tick+0x6e>
            }
        case RGB_RESET:
            state = RGB_MENU;
            break;
    }
    switch(state){
     c14:	82 30       	cpi	r24, 0x02	; 2
     c16:	91 05       	cpc	r25, r1
     c18:	41 f0       	breq	.+16     	; 0xc2a <RGB_Matrix_Tick+0x62>
     c1a:	83 30       	cpi	r24, 0x03	; 3
     c1c:	91 05       	cpc	r25, r1
     c1e:	59 f0       	breq	.+22     	; 0xc36 <RGB_Matrix_Tick+0x6e>
     c20:	81 30       	cpi	r24, 0x01	; 1
     c22:	91 05       	cpc	r25, r1
     c24:	09 f0       	breq	.+2      	; 0xc28 <RGB_Matrix_Tick+0x60>
     c26:	dc c0       	rjmp	.+440    	; 0xde0 <RGB_Matrix_Tick+0x218>
     c28:	0b c0       	rjmp	.+22     	; 0xc40 <RGB_Matrix_Tick+0x78>
     c2a:	03 e5       	ldi	r16, 0x53	; 83
     c2c:	16 e0       	ldi	r17, 0x06	; 6
     c2e:	2b e5       	ldi	r18, 0x5B	; 91
     c30:	36 e0       	ldi	r19, 0x06	; 6
    }

    return state;
}

int RGB_Matrix_Tick(int state){
     c32:	f8 01       	movw	r30, r16
     c34:	3a c0       	rjmp	.+116    	; 0xcaa <RGB_Matrix_Tick+0xe2>
     c36:	e3 e5       	ldi	r30, 0x53	; 83
     c38:	f6 e0       	ldi	r31, 0x06	; 6
     c3a:	8b e5       	ldi	r24, 0x5B	; 91
     c3c:	96 e0       	ldi	r25, 0x06	; 6
     c3e:	c2 c0       	rjmp	.+388    	; 0xdc4 <RGB_Matrix_Tick+0x1fc>
    }
    switch(state){
        case RGB_INIT:
            break;
        case RGB_MENU:
            if(LEFT || RIGHT || UP || DOWN){
     c40:	80 91 63 06 	lds	r24, 0x0663	; 0x800663 <LEFT>
     c44:	88 23       	and	r24, r24
     c46:	49 f0       	breq	.+18     	; 0xc5a <RGB_Matrix_Tick+0x92>
     c48:	00 e0       	ldi	r16, 0x00	; 0
     c4a:	11 e0       	ldi	r17, 0x01	; 1
    }

    return state;
}

int RGB_Matrix_Tick(int state){
     c4c:	c0 e0       	ldi	r28, 0x00	; 0
     c4e:	d0 e0       	ldi	r29, 0x00	; 0
        case RGB_INIT:
            break;
        case RGB_MENU:
            if(LEFT || RIGHT || UP || DOWN){
                for(unsigned char i = 0; i < 8; i++){
                    Shift_transmit_data(128 >> i);
     c50:	68 94       	set
     c52:	ee 24       	eor	r14, r14
     c54:	e7 f8       	bld	r14, 7
     c56:	f1 2c       	mov	r15, r1
     c58:	0d c0       	rjmp	.+26     	; 0xc74 <RGB_Matrix_Tick+0xac>
    }
    switch(state){
        case RGB_INIT:
            break;
        case RGB_MENU:
            if(LEFT || RIGHT || UP || DOWN){
     c5a:	80 91 62 06 	lds	r24, 0x0662	; 0x800662 <RIGHT>
     c5e:	81 11       	cpse	r24, r1
     c60:	f3 cf       	rjmp	.-26     	; 0xc48 <RGB_Matrix_Tick+0x80>
     c62:	80 91 61 06 	lds	r24, 0x0661	; 0x800661 <UP>
     c66:	81 11       	cpse	r24, r1
     c68:	ef cf       	rjmp	.-34     	; 0xc48 <RGB_Matrix_Tick+0x80>
     c6a:	80 91 60 06 	lds	r24, 0x0660	; 0x800660 <DOWN>
     c6e:	81 11       	cpse	r24, r1
     c70:	eb cf       	rjmp	.-42     	; 0xc48 <RGB_Matrix_Tick+0x80>
     c72:	14 c0       	rjmp	.+40     	; 0xc9c <RGB_Matrix_Tick+0xd4>
                for(unsigned char i = 0; i < 8; i++){
                    Shift_transmit_data(128 >> i);
     c74:	c7 01       	movw	r24, r14
     c76:	0c 2e       	mov	r0, r28
     c78:	02 c0       	rjmp	.+4      	; 0xc7e <RGB_Matrix_Tick+0xb6>
     c7a:	95 95       	asr	r25
     c7c:	87 95       	ror	r24
     c7e:	0a 94       	dec	r0
     c80:	e2 f7       	brpl	.-8      	; 0xc7a <RGB_Matrix_Tick+0xb2>
     c82:	91 df       	rcall	.-222    	; 0xba6 <Shift_transmit_data>
                    Shift_transmit_data(~pic[i]);
     c84:	f8 01       	movw	r30, r16
     c86:	81 91       	ld	r24, Z+
     c88:	8f 01       	movw	r16, r30
     c8a:	80 95       	com	r24
     c8c:	8c df       	rcall	.-232    	; 0xba6 <Shift_transmit_data>
                    delay_ms(3);
     c8e:	83 e0       	ldi	r24, 0x03	; 3
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	bf da       	rcall	.-2690   	; 0x212 <delay_ms>
     c94:	21 96       	adiw	r28, 0x01	; 1
    switch(state){
        case RGB_INIT:
            break;
        case RGB_MENU:
            if(LEFT || RIGHT || UP || DOWN){
                for(unsigned char i = 0; i < 8; i++){
     c96:	c8 30       	cpi	r28, 0x08	; 8
     c98:	d1 05       	cpc	r29, r1
                    Shift_transmit_data(128 >> i);
                    Shift_transmit_data(~pic[i]);
                    delay_ms(3);
                }
            }
            Shift_transmit_data(0);
     c9a:	61 f7       	brne	.-40     	; 0xc74 <RGB_Matrix_Tick+0xac>
     c9c:	80 e0       	ldi	r24, 0x00	; 0
            Shift_transmit_data(0);
     c9e:	83 df       	rcall	.-250    	; 0xba6 <Shift_transmit_data>
     ca0:	80 e0       	ldi	r24, 0x00	; 0
     ca2:	81 df       	rcall	.-254    	; 0xba6 <Shift_transmit_data>
            
            break;
     ca4:	81 e0       	ldi	r24, 0x01	; 1
     ca6:	90 e0       	ldi	r25, 0x00	; 0
     ca8:	9b c0       	rjmp	.+310    	; 0xde0 <RGB_Matrix_Tick+0x218>
        case RGB_SONG:
            for(unsigned j = 0; j < 8; j++){
                RGB_DISPLAY_NOTES[j] <<= 1;
     caa:	80 81       	ld	r24, Z
     cac:	88 0f       	add	r24, r24
     cae:	81 93       	st	Z+, r24
            Shift_transmit_data(0);
            Shift_transmit_data(0);
            
            break;
        case RGB_SONG:
            for(unsigned j = 0; j < 8; j++){
     cb0:	e2 17       	cp	r30, r18
     cb2:	f3 07       	cpc	r31, r19
     cb4:	d1 f7       	brne	.-12     	; 0xcaa <RGB_Matrix_Tick+0xe2>
                RGB_DISPLAY_NOTES[j] <<= 1;
            }
            if(play_note < songs[current_song_choice].timing[current_note]){
     cb6:	20 91 5e 06 	lds	r18, 0x065E	; 0x80065e <current_song_choice>
     cba:	30 e0       	ldi	r19, 0x00	; 0
     cbc:	80 91 5f 06 	lds	r24, 0x065F	; 0x80065f <current_note>
     cc0:	90 e0       	ldi	r25, 0x00	; 0
     cc2:	40 91 4a 06 	lds	r20, 0x064A	; 0x80064a <play_note.2287>
     cc6:	62 eb       	ldi	r22, 0xB2	; 178
     cc8:	74 e0       	ldi	r23, 0x04	; 4
     cca:	26 9f       	mul	r18, r22
     ccc:	f0 01       	movw	r30, r0
     cce:	27 9f       	mul	r18, r23
     cd0:	f0 0d       	add	r31, r0
     cd2:	36 9f       	mul	r19, r22
     cd4:	f0 0d       	add	r31, r0
     cd6:	11 24       	eor	r1, r1
     cd8:	e8 0f       	add	r30, r24
     cda:	f9 1f       	adc	r31, r25
     cdc:	ef 5d       	subi	r30, 0xDF	; 223
     cde:	f6 4f       	sbci	r31, 0xF6	; 246
     ce0:	50 81       	ld	r21, Z
     ce2:	45 17       	cp	r20, r21
     ce4:	e0 f5       	brcc	.+120    	; 0xd5e <RGB_Matrix_Tick+0x196>
                note_to_hit = songs[current_song_choice].hit[current_note];
     ce6:	26 9f       	mul	r18, r22
     ce8:	f0 01       	movw	r30, r0
     cea:	27 9f       	mul	r18, r23
     cec:	f0 0d       	add	r31, r0
     cee:	36 9f       	mul	r19, r22
     cf0:	f0 0d       	add	r31, r0
     cf2:	11 24       	eor	r1, r1
     cf4:	8e 0f       	add	r24, r30
     cf6:	9f 1f       	adc	r25, r31
     cf8:	fc 01       	movw	r30, r24
     cfa:	e3 5b       	subi	r30, 0xB3	; 179
     cfc:	f5 4f       	sbci	r31, 0xF5	; 245
     cfe:	80 81       	ld	r24, Z
                
                if(note_to_hit == 8){
     d00:	88 30       	cpi	r24, 0x08	; 8
     d02:	49 f4       	brne	.+18     	; 0xd16 <RGB_Matrix_Tick+0x14e>
                    RGB_DISPLAY_NOTES[7] |= 3;
     d04:	e3 e5       	ldi	r30, 0x53	; 83
     d06:	f6 e0       	ldi	r31, 0x06	; 6
     d08:	87 81       	ldd	r24, Z+7	; 0x07
     d0a:	83 60       	ori	r24, 0x03	; 3
     d0c:	87 83       	std	Z+7, r24	; 0x07
                    RGB_DISPLAY_NOTES[6] |= 3;
     d0e:	86 81       	ldd	r24, Z+6	; 0x06
     d10:	83 60       	ori	r24, 0x03	; 3
     d12:	86 83       	std	Z+6, r24	; 0x06
     d14:	20 c0       	rjmp	.+64     	; 0xd56 <RGB_Matrix_Tick+0x18e>
                }
                else if(note_to_hit == 4){
     d16:	84 30       	cpi	r24, 0x04	; 4
     d18:	49 f4       	brne	.+18     	; 0xd2c <RGB_Matrix_Tick+0x164>
                    RGB_DISPLAY_NOTES[5] |= 3;
     d1a:	e3 e5       	ldi	r30, 0x53	; 83
     d1c:	f6 e0       	ldi	r31, 0x06	; 6
     d1e:	85 81       	ldd	r24, Z+5	; 0x05
     d20:	83 60       	ori	r24, 0x03	; 3
     d22:	85 83       	std	Z+5, r24	; 0x05
                    RGB_DISPLAY_NOTES[4] |= 3;
     d24:	84 81       	ldd	r24, Z+4	; 0x04
     d26:	83 60       	ori	r24, 0x03	; 3
     d28:	84 83       	std	Z+4, r24	; 0x04
     d2a:	15 c0       	rjmp	.+42     	; 0xd56 <RGB_Matrix_Tick+0x18e>
                }
                else if(note_to_hit == 2){
     d2c:	82 30       	cpi	r24, 0x02	; 2
     d2e:	49 f4       	brne	.+18     	; 0xd42 <RGB_Matrix_Tick+0x17a>
                    RGB_DISPLAY_NOTES[3] |= 3;
     d30:	e3 e5       	ldi	r30, 0x53	; 83
     d32:	f6 e0       	ldi	r31, 0x06	; 6
     d34:	83 81       	ldd	r24, Z+3	; 0x03
     d36:	83 60       	ori	r24, 0x03	; 3
     d38:	83 83       	std	Z+3, r24	; 0x03
                    RGB_DISPLAY_NOTES[2] |= 3;
     d3a:	82 81       	ldd	r24, Z+2	; 0x02
     d3c:	83 60       	ori	r24, 0x03	; 3
     d3e:	82 83       	std	Z+2, r24	; 0x02
     d40:	0a c0       	rjmp	.+20     	; 0xd56 <RGB_Matrix_Tick+0x18e>
                }    
                else if(note_to_hit == 1){
     d42:	81 30       	cpi	r24, 0x01	; 1
     d44:	41 f4       	brne	.+16     	; 0xd56 <RGB_Matrix_Tick+0x18e>
                    RGB_DISPLAY_NOTES[1] |= 3;
     d46:	e3 e5       	ldi	r30, 0x53	; 83
     d48:	f6 e0       	ldi	r31, 0x06	; 6
     d4a:	81 81       	ldd	r24, Z+1	; 0x01
     d4c:	83 60       	ori	r24, 0x03	; 3
     d4e:	81 83       	std	Z+1, r24	; 0x01
                    RGB_DISPLAY_NOTES[0] |= 3;
     d50:	80 81       	ld	r24, Z
     d52:	83 60       	ori	r24, 0x03	; 3
     d54:	80 83       	st	Z, r24
                }    
                play_note++;        
     d56:	4f 5f       	subi	r20, 0xFF	; 255
     d58:	40 93 4a 06 	sts	0x064A, r20	; 0x80064a <play_note.2287>
     d5c:	3a c0       	rjmp	.+116    	; 0xdd2 <RGB_Matrix_Tick+0x20a>
            }
            else{
                note_to_hit = 0;
                if(rest_note < songs[current_song_choice].rest_timing[current_note]){
     d5e:	40 91 49 06 	lds	r20, 0x0649	; 0x800649 <rest_note.2288>
     d62:	62 eb       	ldi	r22, 0xB2	; 178
     d64:	74 e0       	ldi	r23, 0x04	; 4
     d66:	26 9f       	mul	r18, r22
     d68:	f0 01       	movw	r30, r0
     d6a:	27 9f       	mul	r18, r23
     d6c:	f0 0d       	add	r31, r0
     d6e:	36 9f       	mul	r19, r22
     d70:	f0 0d       	add	r31, r0
     d72:	11 24       	eor	r1, r1
     d74:	8e 0f       	add	r24, r30
     d76:	9f 1f       	adc	r25, r31
     d78:	fc 01       	movw	r30, r24
     d7a:	e9 54       	subi	r30, 0x49	; 73
     d7c:	f6 4f       	sbci	r31, 0xF6	; 246
     d7e:	80 81       	ld	r24, Z
     d80:	48 17       	cp	r20, r24
     d82:	20 f4       	brcc	.+8      	; 0xd8c <RGB_Matrix_Tick+0x1c4>
                    rest_note++;
     d84:	4f 5f       	subi	r20, 0xFF	; 255
     d86:	40 93 49 06 	sts	0x0649, r20	; 0x800649 <rest_note.2288>
     d8a:	23 c0       	rjmp	.+70     	; 0xdd2 <RGB_Matrix_Tick+0x20a>
                }
                else{
                    play_note = 0;
     d8c:	10 92 4a 06 	sts	0x064A, r1	; 0x80064a <play_note.2287>
                    rest_note = 0;   
     d90:	10 92 49 06 	sts	0x0649, r1	; 0x800649 <rest_note.2288>
     d94:	1e c0       	rjmp	.+60     	; 0xdd2 <RGB_Matrix_Tick+0x20a>
                }     
            }                   
            for(unsigned char i = 0; i < 8; i++){
                Shift_transmit_data(128 >> i);
     d96:	c7 01       	movw	r24, r14
     d98:	0c 2e       	mov	r0, r28
     d9a:	02 c0       	rjmp	.+4      	; 0xda0 <RGB_Matrix_Tick+0x1d8>
     d9c:	95 95       	asr	r25
     d9e:	87 95       	ror	r24
     da0:	0a 94       	dec	r0
     da2:	e2 f7       	brpl	.-8      	; 0xd9c <RGB_Matrix_Tick+0x1d4>
                Shift_transmit_data(~RGB_DISPLAY_NOTES[i]);
     da4:	00 df       	rcall	.-512    	; 0xba6 <Shift_transmit_data>
     da6:	f8 01       	movw	r30, r16
     da8:	81 91       	ld	r24, Z+
     daa:	8f 01       	movw	r16, r30
     dac:	80 95       	com	r24
                delay_ms(5);
     dae:	fb de       	rcall	.-522    	; 0xba6 <Shift_transmit_data>
     db0:	85 e0       	ldi	r24, 0x05	; 5
     db2:	90 e0       	ldi	r25, 0x00	; 0
     db4:	2e da       	rcall	.-2980   	; 0x212 <delay_ms>
     db6:	21 96       	adiw	r28, 0x01	; 1
                else{
                    play_note = 0;
                    rest_note = 0;   
                }     
            }                   
            for(unsigned char i = 0; i < 8; i++){
     db8:	c8 30       	cpi	r28, 0x08	; 8
     dba:	d1 05       	cpc	r29, r1
     dbc:	61 f7       	brne	.-40     	; 0xd96 <RGB_Matrix_Tick+0x1ce>
     dbe:	82 e0       	ldi	r24, 0x02	; 2
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	0e c0       	rjmp	.+28     	; 0xde0 <RGB_Matrix_Tick+0x218>
            
            }
            break;
        case RGB_RESET:
            for(unsigned char r = 0; r < 8; r++){
                RGB_DISPLAY_NOTES[r] = 0;
     dc4:	11 92       	st	Z+, r1
                delay_ms(5);
            
            }
            break;
        case RGB_RESET:
            for(unsigned char r = 0; r < 8; r++){
     dc6:	e8 17       	cp	r30, r24
     dc8:	f9 07       	cpc	r31, r25
     dca:	e1 f7       	brne	.-8      	; 0xdc4 <RGB_Matrix_Tick+0x1fc>
     dcc:	83 e0       	ldi	r24, 0x03	; 3
     dce:	90 e0       	ldi	r25, 0x00	; 0
                RGB_DISPLAY_NOTES[r] = 0;
            }
            break;
    }
    
    return state;
     dd0:	07 c0       	rjmp	.+14     	; 0xde0 <RGB_Matrix_Tick+0x218>
    }

    return state;
}

int RGB_Matrix_Tick(int state){
     dd2:	c0 e0       	ldi	r28, 0x00	; 0
     dd4:	d0 e0       	ldi	r29, 0x00	; 0
                    play_note = 0;
                    rest_note = 0;   
                }     
            }                   
            for(unsigned char i = 0; i < 8; i++){
                Shift_transmit_data(128 >> i);
     dd6:	68 94       	set
     dd8:	ee 24       	eor	r14, r14
     dda:	e7 f8       	bld	r14, 7
     ddc:	f1 2c       	mov	r15, r1
     dde:	db cf       	rjmp	.-74     	; 0xd96 <RGB_Matrix_Tick+0x1ce>
            }
            break;
    }
    
    return state;
}
     de0:	df 91       	pop	r29
     de2:	cf 91       	pop	r28
     de4:	1f 91       	pop	r17
     de6:	0f 91       	pop	r16
     de8:	ff 90       	pop	r15
     dea:	ef 90       	pop	r14
     dec:	08 95       	ret

00000dee <set_PWM>:

// 0.954 hz is lowest frequency possible with this function,
// based on settings in PWM_on()
// Passing in 0 as the frequency will stop the speaker from generating sound
void set_PWM(double frequency) {
     dee:	cf 92       	push	r12
     df0:	df 92       	push	r13
     df2:	ef 92       	push	r14
     df4:	ff 92       	push	r15
     df6:	6b 01       	movw	r12, r22
     df8:	7c 01       	movw	r14, r24
	static double current_frequency; // Keeps track of the currently set frequency
	// Will only update the registers when the frequency changes, otherwise allows
	// music to play uninterrupted.
	if (frequency != current_frequency) {
     dfa:	9b 01       	movw	r18, r22
     dfc:	ac 01       	movw	r20, r24
     dfe:	60 91 4c 06 	lds	r22, 0x064C	; 0x80064c <current_frequency.2121>
     e02:	70 91 4d 06 	lds	r23, 0x064D	; 0x80064d <current_frequency.2121+0x1>
     e06:	80 91 4e 06 	lds	r24, 0x064E	; 0x80064e <current_frequency.2121+0x2>
     e0a:	90 91 4f 06 	lds	r25, 0x064F	; 0x80064f <current_frequency.2121+0x3>
     e0e:	8e d2       	rcall	.+1308   	; 0x132c <__cmpsf2>
     e10:	88 23       	and	r24, r24
     e12:	09 f4       	brne	.+2      	; 0xe16 <set_PWM+0x28>
     e14:	52 c0       	rjmp	.+164    	; 0xeba <set_PWM+0xcc>
		if (!frequency) { TCCR3B &= 0x08; } //stops timer/counter
     e16:	20 e0       	ldi	r18, 0x00	; 0
     e18:	30 e0       	ldi	r19, 0x00	; 0
     e1a:	a9 01       	movw	r20, r18
     e1c:	c7 01       	movw	r24, r14
     e1e:	b6 01       	movw	r22, r12
     e20:	85 d2       	rcall	.+1290   	; 0x132c <__cmpsf2>
     e22:	81 11       	cpse	r24, r1
     e24:	06 c0       	rjmp	.+12     	; 0xe32 <set_PWM+0x44>
     e26:	e1 e9       	ldi	r30, 0x91	; 145
     e28:	f0 e0       	ldi	r31, 0x00	; 0
     e2a:	80 81       	ld	r24, Z
     e2c:	88 70       	andi	r24, 0x08	; 8
     e2e:	80 83       	st	Z, r24
     e30:	05 c0       	rjmp	.+10     	; 0xe3c <set_PWM+0x4e>
		else { TCCR3B |= 0x03; } // resumes/continues timer/counter
     e32:	e1 e9       	ldi	r30, 0x91	; 145
     e34:	f0 e0       	ldi	r31, 0x00	; 0
     e36:	80 81       	ld	r24, Z
     e38:	83 60       	ori	r24, 0x03	; 3
     e3a:	80 83       	st	Z, r24
		
		// prevents OCR3A from overflowing, using prescaler 64
		// 0.954 is smallest frequency that will not result in overflow
		if (frequency < 0.954) { OCR3A = 0xFFFF; }
     e3c:	28 e5       	ldi	r18, 0x58	; 88
     e3e:	39 e3       	ldi	r19, 0x39	; 57
     e40:	44 e7       	ldi	r20, 0x74	; 116
     e42:	5f e3       	ldi	r21, 0x3F	; 63
     e44:	c7 01       	movw	r24, r14
     e46:	b6 01       	movw	r22, r12
     e48:	71 d2       	rcall	.+1250   	; 0x132c <__cmpsf2>
     e4a:	88 23       	and	r24, r24
     e4c:	3c f4       	brge	.+14     	; 0xe5c <set_PWM+0x6e>
     e4e:	8f ef       	ldi	r24, 0xFF	; 255
     e50:	9f ef       	ldi	r25, 0xFF	; 255
     e52:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     e56:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
     e5a:	23 c0       	rjmp	.+70     	; 0xea2 <set_PWM+0xb4>
		
		// prevents OCR0A from underflowing, using prescaler 64					
		// 31250 is largest frequency that will not result in underflow
		else if (frequency > 31250) { OCR3A = 0x0000; }
     e5c:	20 e0       	ldi	r18, 0x00	; 0
     e5e:	34 e2       	ldi	r19, 0x24	; 36
     e60:	44 ef       	ldi	r20, 0xF4	; 244
     e62:	56 e4       	ldi	r21, 0x46	; 70
     e64:	c7 01       	movw	r24, r14
     e66:	b6 01       	movw	r22, r12
     e68:	73 d3       	rcall	.+1766   	; 0x1550 <__gesf2>
     e6a:	18 16       	cp	r1, r24
     e6c:	2c f4       	brge	.+10     	; 0xe78 <set_PWM+0x8a>
     e6e:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     e72:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
     e76:	15 c0       	rjmp	.+42     	; 0xea2 <set_PWM+0xb4>
		
		// set OCR3A based on desired frequency
		else { OCR3A = (short)(8000000 / (128 * frequency)) - 1; }
     e78:	20 e0       	ldi	r18, 0x00	; 0
     e7a:	30 e0       	ldi	r19, 0x00	; 0
     e7c:	40 e0       	ldi	r20, 0x00	; 0
     e7e:	53 e4       	ldi	r21, 0x43	; 67
     e80:	c7 01       	movw	r24, r14
     e82:	b6 01       	movw	r22, r12
     e84:	69 d3       	rcall	.+1746   	; 0x1558 <__mulsf3>
     e86:	9b 01       	movw	r18, r22
     e88:	ac 01       	movw	r20, r24
     e8a:	60 e0       	ldi	r22, 0x00	; 0
     e8c:	74 e2       	ldi	r23, 0x24	; 36
     e8e:	84 ef       	ldi	r24, 0xF4	; 244
     e90:	9a e4       	ldi	r25, 0x4A	; 74
     e92:	50 d2       	rcall	.+1184   	; 0x1334 <__divsf3>
     e94:	b7 d2       	rcall	.+1390   	; 0x1404 <__fixsfsi>
     e96:	61 50       	subi	r22, 0x01	; 1
     e98:	71 09       	sbc	r23, r1
     e9a:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     e9e:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>

		TCNT3 = 0; // resets counter
     ea2:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
     ea6:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
		current_frequency = frequency; // Updates the current frequency
     eaa:	c0 92 4c 06 	sts	0x064C, r12	; 0x80064c <current_frequency.2121>
     eae:	d0 92 4d 06 	sts	0x064D, r13	; 0x80064d <current_frequency.2121+0x1>
     eb2:	e0 92 4e 06 	sts	0x064E, r14	; 0x80064e <current_frequency.2121+0x2>
     eb6:	f0 92 4f 06 	sts	0x064F, r15	; 0x80064f <current_frequency.2121+0x3>
	}
}
     eba:	ff 90       	pop	r15
     ebc:	ef 90       	pop	r14
     ebe:	df 90       	pop	r13
     ec0:	cf 90       	pop	r12
     ec2:	08 95       	ret

00000ec4 <PWM_on>:

void PWM_on() {
	TCCR3A = (1 << COM3A0);
     ec4:	80 e4       	ldi	r24, 0x40	; 64
     ec6:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	// COM3A0: Toggle PB3 on compare match between counter and OCR0A
	TCCR3B = (1 << WGM32) | (1 << CS31) | (1 << CS30);
     eca:	8b e0       	ldi	r24, 0x0B	; 11
     ecc:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
	// WGM02: When counter (TCNT0) matches OCR0A, reset counter
	// CS01 & CS30: Set a prescaler of 64
	set_PWM(0);
     ed0:	60 e0       	ldi	r22, 0x00	; 0
     ed2:	70 e0       	ldi	r23, 0x00	; 0
     ed4:	cb 01       	movw	r24, r22
     ed6:	8b cf       	rjmp	.-234    	; 0xdee <set_PWM>
     ed8:	08 95       	ret

00000eda <PWM_off>:
}

void PWM_off() {
	TCCR3A = 0x00;
     eda:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	TCCR3B = 0x00;
     ede:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
     ee2:	08 95       	ret

00000ee4 <Note_Tick>:

int Note_Tick(int state){
     ee4:	cf 93       	push	r28
    static unsigned char rest_note;
    static unsigned char note_to_hit;
    static unsigned char hitting_note;
    static bool already_hit;
    
    switch(state){
     ee6:	81 30       	cpi	r24, 0x01	; 1
     ee8:	91 05       	cpc	r25, r1
     eea:	59 f0       	breq	.+22     	; 0xf02 <Note_Tick+0x1e>
     eec:	1c f4       	brge	.+6      	; 0xef4 <Note_Tick+0x10>
     eee:	00 97       	sbiw	r24, 0x00	; 0
     ef0:	f1 f0       	breq	.+60     	; 0xf2e <Note_Tick+0x4a>
     ef2:	12 c0       	rjmp	.+36     	; 0xf18 <Note_Tick+0x34>
     ef4:	82 30       	cpi	r24, 0x02	; 2
     ef6:	91 05       	cpc	r25, r1
     ef8:	51 f0       	breq	.+20     	; 0xf0e <Note_Tick+0x2a>
     efa:	83 30       	cpi	r24, 0x03	; 3
     efc:	91 05       	cpc	r25, r1
     efe:	b9 f0       	breq	.+46     	; 0xf2e <Note_Tick+0x4a>
     f00:	0b c0       	rjmp	.+22     	; 0xf18 <Note_Tick+0x34>
        case Note_INIT:
            state = Note_Wait;
            break;
        case Note_Wait:
            if(playing){
     f02:	80 91 50 06 	lds	r24, 0x0650	; 0x800650 <playing>
     f06:	88 23       	and	r24, r24
     f08:	91 f0       	breq	.+36     	; 0xf2e <Note_Tick+0x4a>
                PWM_on();
     f0a:	dc df       	rcall	.-72     	; 0xec4 <PWM_on>
                state = Note_Play_Song;
                break;
     f0c:	1f c0       	rjmp	.+62     	; 0xf4c <Note_Tick+0x68>
            else{
                state = Note_Wait;
                break;
            }
        case Note_Play_Song:
            if(song_finished){
     f0e:	80 91 52 06 	lds	r24, 0x0652	; 0x800652 <song_finished>
     f12:	81 11       	cpse	r24, r1
     f14:	d5 c0       	rjmp	.+426    	; 0x10c0 <Note_Tick+0x1dc>
     f16:	1a c0       	rjmp	.+52     	; 0xf4c <Note_Tick+0x68>
            }
        case Note_Reset:
            state = Note_Wait;
            break;
    }
    switch(state){
     f18:	82 30       	cpi	r24, 0x02	; 2
     f1a:	91 05       	cpc	r25, r1
     f1c:	b9 f0       	breq	.+46     	; 0xf4c <Note_Tick+0x68>
     f1e:	83 30       	cpi	r24, 0x03	; 3
     f20:	91 05       	cpc	r25, r1
     f22:	09 f4       	brne	.+2      	; 0xf26 <Note_Tick+0x42>
     f24:	cd c0       	rjmp	.+410    	; 0x10c0 <Note_Tick+0x1dc>
     f26:	81 30       	cpi	r24, 0x01	; 1
     f28:	91 05       	cpc	r25, r1
     f2a:	09 f0       	breq	.+2      	; 0xf2e <Note_Tick+0x4a>
     f2c:	d0 c0       	rjmp	.+416    	; 0x10ce <Note_Tick+0x1ea>
        case Note_INIT:
            break;
        case Note_Wait:
            play_note = 0;
     f2e:	10 92 48 06 	sts	0x0648, r1	; 0x800648 <play_note.2319>
            rest_note = 0;
     f32:	10 92 47 06 	sts	0x0647, r1	; 0x800647 <rest_note.2320>
            current_score = 0;
     f36:	10 92 5c 06 	sts	0x065C, r1	; 0x80065c <current_score+0x1>
     f3a:	10 92 5b 06 	sts	0x065B, r1	; 0x80065b <current_score>
            hitting_note = 0;
     f3e:	10 92 46 06 	sts	0x0646, r1	; 0x800646 <hitting_note.2322>
            already_hit = false;
     f42:	10 92 45 06 	sts	0x0645, r1	; 0x800645 <already_hit.2323>
            break;
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	c1 c0       	rjmp	.+386    	; 0x10ce <Note_Tick+0x1ea>
        case Note_Play_Song:
            note_to_hit = songs[current_song_choice].hit[current_note];
     f4c:	30 91 5e 06 	lds	r19, 0x065E	; 0x80065e <current_song_choice>
     f50:	20 91 5f 06 	lds	r18, 0x065F	; 0x80065f <current_note>
     f54:	42 eb       	ldi	r20, 0xB2	; 178
     f56:	54 e0       	ldi	r21, 0x04	; 4
     f58:	34 9f       	mul	r19, r20
     f5a:	c0 01       	movw	r24, r0
     f5c:	35 9f       	mul	r19, r21
     f5e:	90 0d       	add	r25, r0
     f60:	11 24       	eor	r1, r1
     f62:	87 53       	subi	r24, 0x37	; 55
     f64:	99 4f       	sbci	r25, 0xF9	; 249
     f66:	82 0f       	add	r24, r18
     f68:	91 1d       	adc	r25, r1
     f6a:	fc 01       	movw	r30, r24
     f6c:	ec 57       	subi	r30, 0x7C	; 124
     f6e:	fc 4f       	sbci	r31, 0xFC	; 252
     f70:	20 81       	ld	r18, Z
     f72:	20 93 44 06 	sts	0x0644, r18	; 0x800644 <__data_end>
            if(hitting_note < songs[current_song_choice].timing_hit[current_note] && (already_hit == false)){
     f76:	ea 56       	subi	r30, 0x6A	; 106
     f78:	ff 4f       	sbci	r31, 0xFF	; 255
     f7a:	90 81       	ld	r25, Z
     f7c:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <hitting_note.2322>
     f80:	89 17       	cp	r24, r25
     f82:	e0 f4       	brcc	.+56     	; 0xfbc <Note_Tick+0xd8>
     f84:	80 91 45 06 	lds	r24, 0x0645	; 0x800645 <already_hit.2323>
     f88:	81 11       	cpse	r24, r1
     f8a:	18 c0       	rjmp	.+48     	; 0xfbc <Note_Tick+0xd8>
                if(player_button_press == note_to_hit){
     f8c:	80 91 5d 06 	lds	r24, 0x065D	; 0x80065d <player_button_press>
     f90:	28 13       	cpse	r18, r24
     f92:	0d c0       	rjmp	.+26     	; 0xfae <Note_Tick+0xca>
                    current_score++;
     f94:	80 91 5b 06 	lds	r24, 0x065B	; 0x80065b <current_score>
     f98:	90 91 5c 06 	lds	r25, 0x065C	; 0x80065c <current_score+0x1>
     f9c:	01 96       	adiw	r24, 0x01	; 1
     f9e:	90 93 5c 06 	sts	0x065C, r25	; 0x80065c <current_score+0x1>
     fa2:	80 93 5b 06 	sts	0x065B, r24	; 0x80065b <current_score>
                    score_increase = true;
     fa6:	81 e0       	ldi	r24, 0x01	; 1
     fa8:	80 93 51 06 	sts	0x0651, r24	; 0x800651 <score_increase>
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <Note_Tick+0xce>
                }
                else{
                    score_increase = false;
     fae:	10 92 51 06 	sts	0x0651, r1	; 0x800651 <score_increase>
                }
                hitting_note++;
     fb2:	80 91 46 06 	lds	r24, 0x0646	; 0x800646 <hitting_note.2322>
     fb6:	8f 5f       	subi	r24, 0xFF	; 255
     fb8:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <hitting_note.2322>
            }
            if(play_note < songs[current_song_choice].timing[current_note]){
     fbc:	80 91 5e 06 	lds	r24, 0x065E	; 0x80065e <current_song_choice>
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	40 91 5f 06 	lds	r20, 0x065F	; 0x80065f <current_note>
     fc6:	64 2f       	mov	r22, r20
     fc8:	70 e0       	ldi	r23, 0x00	; 0
     fca:	22 eb       	ldi	r18, 0xB2	; 178
     fcc:	34 e0       	ldi	r19, 0x04	; 4
     fce:	82 9f       	mul	r24, r18
     fd0:	f0 01       	movw	r30, r0
     fd2:	83 9f       	mul	r24, r19
     fd4:	f0 0d       	add	r31, r0
     fd6:	92 9f       	mul	r25, r18
     fd8:	f0 0d       	add	r31, r0
     fda:	11 24       	eor	r1, r1
     fdc:	e6 0f       	add	r30, r22
     fde:	f7 1f       	adc	r31, r23
     fe0:	ef 5d       	subi	r30, 0xDF	; 223
     fe2:	f6 4f       	sbci	r31, 0xF6	; 246
     fe4:	30 81       	ld	r19, Z
     fe6:	20 91 48 06 	lds	r18, 0x0648	; 0x800648 <play_note.2319>
     fea:	23 17       	cp	r18, r19
     fec:	a0 f5       	brcc	.+104    	; 0x1056 <Note_Tick+0x172>
                if(player_button_press == note_to_hit){
     fee:	90 91 5d 06 	lds	r25, 0x065D	; 0x80065d <player_button_press>
     ff2:	80 91 44 06 	lds	r24, 0x0644	; 0x800644 <__data_end>
     ff6:	98 13       	cpse	r25, r24
     ff8:	0d c0       	rjmp	.+26     	; 0x1014 <Note_Tick+0x130>
                    current_score++;
     ffa:	80 91 5b 06 	lds	r24, 0x065B	; 0x80065b <current_score>
     ffe:	90 91 5c 06 	lds	r25, 0x065C	; 0x80065c <current_score+0x1>
    1002:	01 96       	adiw	r24, 0x01	; 1
    1004:	90 93 5c 06 	sts	0x065C, r25	; 0x80065c <current_score+0x1>
    1008:	80 93 5b 06 	sts	0x065B, r24	; 0x80065b <current_score>
                    score_increase = true;
    100c:	81 e0       	ldi	r24, 0x01	; 1
    100e:	80 93 51 06 	sts	0x0651, r24	; 0x800651 <score_increase>
    1012:	02 c0       	rjmp	.+4      	; 0x1018 <Note_Tick+0x134>
                }
                else{
                    score_increase = false;
    1014:	10 92 51 06 	sts	0x0651, r1	; 0x800651 <score_increase>
                }
                set_PWM(songs[current_song_choice].notes[current_note]);
    1018:	80 91 5f 06 	lds	r24, 0x065F	; 0x80065f <current_note>
    101c:	90 91 5e 06 	lds	r25, 0x065E	; 0x80065e <current_song_choice>
    1020:	22 eb       	ldi	r18, 0xB2	; 178
    1022:	34 e0       	ldi	r19, 0x04	; 4
    1024:	92 9f       	mul	r25, r18
    1026:	f0 01       	movw	r30, r0
    1028:	93 9f       	mul	r25, r19
    102a:	f0 0d       	add	r31, r0
    102c:	11 24       	eor	r1, r1
    102e:	94 e0       	ldi	r25, 0x04	; 4
    1030:	89 9f       	mul	r24, r25
    1032:	e0 0d       	add	r30, r0
    1034:	f1 1d       	adc	r31, r1
    1036:	11 24       	eor	r1, r1
    1038:	e7 53       	subi	r30, 0x37	; 55
    103a:	f9 4f       	sbci	r31, 0xF9	; 249
    103c:	60 81       	ld	r22, Z
    103e:	71 81       	ldd	r23, Z+1	; 0x01
    1040:	82 81       	ldd	r24, Z+2	; 0x02
    1042:	93 81       	ldd	r25, Z+3	; 0x03
    1044:	d4 de       	rcall	.-600    	; 0xdee <set_PWM>
                play_note++;
    1046:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <play_note.2319>
    104a:	8f 5f       	subi	r24, 0xFF	; 255
    104c:	80 93 48 06 	sts	0x0648, r24	; 0x800648 <play_note.2319>
                break;
    1050:	82 e0       	ldi	r24, 0x02	; 2
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	3c c0       	rjmp	.+120    	; 0x10ce <Note_Tick+0x1ea>
            }
            else{
                if(rest_note < songs[current_song_choice].rest_timing[current_note]){
    1056:	c0 91 47 06 	lds	r28, 0x0647	; 0x800647 <rest_note.2320>
    105a:	e2 eb       	ldi	r30, 0xB2	; 178
    105c:	f4 e0       	ldi	r31, 0x04	; 4
    105e:	8e 9f       	mul	r24, r30
    1060:	90 01       	movw	r18, r0
    1062:	8f 9f       	mul	r24, r31
    1064:	30 0d       	add	r19, r0
    1066:	9e 9f       	mul	r25, r30
    1068:	30 0d       	add	r19, r0
    106a:	11 24       	eor	r1, r1
    106c:	fb 01       	movw	r30, r22
    106e:	e2 0f       	add	r30, r18
    1070:	f3 1f       	adc	r31, r19
    1072:	e9 54       	subi	r30, 0x49	; 73
    1074:	f6 4f       	sbci	r31, 0xF6	; 246
    1076:	80 81       	ld	r24, Z
    1078:	c8 17       	cp	r28, r24
    107a:	50 f4       	brcc	.+20     	; 0x1090 <Note_Tick+0x1ac>
                    set_PWM(0);
    107c:	60 e0       	ldi	r22, 0x00	; 0
    107e:	70 e0       	ldi	r23, 0x00	; 0
    1080:	cb 01       	movw	r24, r22
    1082:	b5 de       	rcall	.-662    	; 0xdee <set_PWM>
                    rest_note++;
    1084:	cf 5f       	subi	r28, 0xFF	; 255
    1086:	c0 93 47 06 	sts	0x0647, r28	; 0x800647 <rest_note.2320>
    108a:	82 e0       	ldi	r24, 0x02	; 2
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	1f c0       	rjmp	.+62     	; 0x10ce <Note_Tick+0x1ea>
                }
                else{
                    play_note = 0;
    1090:	10 92 48 06 	sts	0x0648, r1	; 0x800648 <play_note.2319>
                    rest_note = 0;
    1094:	10 92 47 06 	sts	0x0647, r1	; 0x800647 <rest_note.2320>
                    hitting_note = 0;
    1098:	10 92 46 06 	sts	0x0646, r1	; 0x800646 <hitting_note.2322>
                    already_hit = false;
    109c:	10 92 45 06 	sts	0x0645, r1	; 0x800645 <already_hit.2323>
                    if(current_note < SONG_LENGTH){
    10a0:	46 39       	cpi	r20, 0x96	; 150
    10a2:	30 f4       	brcc	.+12     	; 0x10b0 <Note_Tick+0x1cc>
                        current_note++;
    10a4:	4f 5f       	subi	r20, 0xFF	; 255
    10a6:	40 93 5f 06 	sts	0x065F, r20	; 0x80065f <current_note>
    10aa:	82 e0       	ldi	r24, 0x02	; 2
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	0f c0       	rjmp	.+30     	; 0x10ce <Note_Tick+0x1ea>
                    }
                    else{
                        playing = false;
    10b0:	10 92 50 06 	sts	0x0650, r1	; 0x800650 <playing>
                        song_finished = true;
    10b4:	81 e0       	ldi	r24, 0x01	; 1
    10b6:	80 93 52 06 	sts	0x0652, r24	; 0x800652 <song_finished>
                        break;
    10ba:	82 e0       	ldi	r24, 0x02	; 2
    10bc:	90 e0       	ldi	r25, 0x00	; 0
                    }
                }
            }
            break;
        case Note_Reset:
            PWM_off();
    10be:	07 c0       	rjmp	.+14     	; 0x10ce <Note_Tick+0x1ea>
    10c0:	0c df       	rcall	.-488    	; 0xeda <PWM_off>
            current_note = 0;
    10c2:	10 92 5f 06 	sts	0x065F, r1	; 0x80065f <current_note>
            score_increase = false;
    10c6:	10 92 51 06 	sts	0x0651, r1	; 0x800651 <score_increase>
            break;
    10ca:	83 e0       	ldi	r24, 0x03	; 3
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    }
    return state;
}
    10ce:	cf 91       	pop	r28
    10d0:	08 95       	ret

000010d2 <main>:
bool playing = false;



int main(void)
{
    10d2:	cf 93       	push	r28
    10d4:	df 93       	push	r29
    10d6:	00 d0       	rcall	.+0      	; 0x10d8 <main+0x6>
    10d8:	00 d0       	rcall	.+0      	; 0x10da <main+0x8>
    10da:	00 d0       	rcall	.+0      	; 0x10dc <main+0xa>
    10dc:	cd b7       	in	r28, 0x3d	; 61
    10de:	de b7       	in	r29, 0x3e	; 62
    //LCD PORTS & RGB MATRIX
    DDRD = 0xFF; PORTD = 0x00;
    10e0:	8f ef       	ldi	r24, 0xFF	; 255
    10e2:	8a b9       	out	0x0a, r24	; 10
    10e4:	1b b8       	out	0x0b, r1	; 11
    DDRC = 0XFF; PORTC = 0x00; //0 & 1 are LCD Control Lines, 2,3,4 are RGB PORTS
    10e6:	87 b9       	out	0x07, r24	; 7
    10e8:	18 b8       	out	0x08, r1	; 8
    
    //BUTTON INPUT PORTS
    DDRA = 0x00; PORTA = 0xFF;
    10ea:	11 b8       	out	0x01, r1	; 1
    10ec:	82 b9       	out	0x02, r24	; 2
    
    //BUZZER PORT
    DDRB = 0x0FF; PORTB = 0x00; //PB6 is buzzer
    10ee:	84 b9       	out	0x04, r24	; 4
    10f0:	15 b8       	out	0x05, r1	; 5
    
    //Initialize LCD and Matrix
    LCD_init();
    10f2:	0c d9       	rcall	.-3560   	; 0x30c <LCD_init>
    
    Shift_Init();   
    10f4:	43 dd       	rcall	.-1402   	; 0xb7c <Shift_Init>
    Shift_transmit_data(0);
    10f6:	80 e0       	ldi	r24, 0x00	; 0
    10f8:	56 dd       	rcall	.-1364   	; 0xba6 <Shift_transmit_data>
    Shift_transmit_data(255);
    10fa:	8f ef       	ldi	r24, 0xFF	; 255
    10fc:	54 dd       	rcall	.-1368   	; 0xba6 <Shift_transmit_data>
    10fe:	0f 2e       	mov	r0, r31
    1100:	f0 e6       	ldi	r31, 0x60	; 96
    1102:	af 2e       	mov	r10, r31
    1104:	f3 e0       	ldi	r31, 0x03	; 3
    1106:	bf 2e       	mov	r11, r31
    1108:	f0 2d       	mov	r31, r0
    110a:	0f 2e       	mov	r0, r31
    110c:	f9 ec       	ldi	r31, 0xC9	; 201
    110e:	cf 2e       	mov	r12, r31
    1110:	f6 e0       	ldi	r31, 0x06	; 6
    1112:	df 2e       	mov	r13, r31
    1114:	f0 2d       	mov	r31, r0
    1116:	0f 2e       	mov	r0, r31
    1118:	fa ec       	ldi	r31, 0xCA	; 202
    111a:	ef 2e       	mov	r14, r31
    111c:	f2 e0       	ldi	r31, 0x02	; 2
    111e:	ff 2e       	mov	r15, r31
    1120:	f0 2d       	mov	r31, r0
    1122:	81 e2       	ldi	r24, 0x21	; 33
    1124:	99 e0       	ldi	r25, 0x09	; 9
    1126:	9a 83       	std	Y+2, r25	; 0x02
    1128:	89 83       	std	Y+1, r24	; 0x01
    112a:	e4 e3       	ldi	r30, 0x34	; 52
    112c:	f2 e0       	ldi	r31, 0x02	; 2
    112e:	fe 83       	std	Y+6, r31	; 0x06
    1130:	ed 83       	std	Y+5, r30	; 0x05
    1132:	0f 2e       	mov	r0, r31
    1134:	f7 eb       	ldi	r31, 0xB7	; 183
    1136:	8f 2e       	mov	r8, r31
    1138:	f9 e0       	ldi	r31, 0x09	; 9
    113a:	9f 2e       	mov	r9, r31
    113c:	f0 2d       	mov	r31, r0
    113e:	0f 2e       	mov	r0, r31
    1140:	fe e9       	ldi	r31, 0x9E	; 158
    1142:	6f 2e       	mov	r6, r31
    1144:	f1 e0       	ldi	r31, 0x01	; 1
    1146:	7f 2e       	mov	r7, r31
    1148:	f0 2d       	mov	r31, r0
    114a:	0f 2e       	mov	r0, r31
    114c:	fd e4       	ldi	r31, 0x4D	; 77
    114e:	4f 2e       	mov	r4, r31
    1150:	fa e0       	ldi	r31, 0x0A	; 10
    1152:	5f 2e       	mov	r5, r31
    1154:	f0 2d       	mov	r31, r0
    1156:	0f 2e       	mov	r0, r31
    1158:	f8 e0       	ldi	r31, 0x08	; 8
    115a:	2f 2e       	mov	r2, r31
    115c:	f1 e0       	ldi	r31, 0x01	; 1
    115e:	3f 2e       	mov	r3, r31
    1160:	f0 2d       	mov	r31, r0
    1162:	83 ee       	ldi	r24, 0xE3	; 227
    1164:	9a e0       	ldi	r25, 0x0A	; 10
    1166:	9c 83       	std	Y+4, r25	; 0x04
    1168:	8b 83       	std	Y+3, r24	; 0x03
    116a:	10 e0       	ldi	r17, 0x00	; 0
        songs[0].hit[j] = pressDIV[j];
        songs[0].high_score = eeprom_read_byte((uint8_t*) 1);
    }
    */
    
    for(unsigned char j = 0; j < 43; j++) {
    116c:	f5 01       	movw	r30, r10
        songs[0].notes[j] = notes_zense[j];
    116e:	81 91       	ld	r24, Z+
    1170:	91 91       	ld	r25, Z+
    1172:	a1 91       	ld	r26, Z+
    1174:	b1 91       	ld	r27, Z+
    1176:	5f 01       	movw	r10, r30
    1178:	f6 01       	movw	r30, r12
    117a:	81 93       	st	Z+, r24
    117c:	91 93       	st	Z+, r25
    117e:	a1 93       	st	Z+, r26
    1180:	b1 93       	st	Z+, r27
    1182:	6f 01       	movw	r12, r30
    1184:	f7 01       	movw	r30, r14
        songs[0].timing[j] = timing_zense[j];
    1186:	81 91       	ld	r24, Z+
    1188:	7f 01       	movw	r14, r30
    118a:	e9 81       	ldd	r30, Y+1	; 0x01
    118c:	fa 81       	ldd	r31, Y+2	; 0x02
    118e:	81 93       	st	Z+, r24
    1190:	fa 83       	std	Y+2, r31	; 0x02
    1192:	e9 83       	std	Y+1, r30	; 0x01
    1194:	ed 81       	ldd	r30, Y+5	; 0x05
        songs[0].rest_timing[j] = rests_zense[j];
    1196:	fe 81       	ldd	r31, Y+6	; 0x06
    1198:	81 91       	ld	r24, Z+
    119a:	fe 83       	std	Y+6, r31	; 0x06
    119c:	ed 83       	std	Y+5, r30	; 0x05
    119e:	f4 01       	movw	r30, r8
    11a0:	81 93       	st	Z+, r24
    11a2:	4f 01       	movw	r8, r30
    11a4:	f3 01       	movw	r30, r6
        songs[0].hit[j] = hit_zense[j];
    11a6:	81 91       	ld	r24, Z+
    11a8:	3f 01       	movw	r6, r30
    11aa:	f2 01       	movw	r30, r4
    11ac:	81 93       	st	Z+, r24
    11ae:	2f 01       	movw	r4, r30
        songs[0].high_score = eeprom_read_byte((uint8_t*) 1);
    11b0:	81 e0       	ldi	r24, 0x01	; 1
    11b2:	90 e0       	ldi	r25, 0x00	; 0
    11b4:	4c d2       	rcall	.+1176   	; 0x164e <eeprom_read_byte>
    11b6:	90 e0       	ldi	r25, 0x00	; 0
    11b8:	e9 e7       	ldi	r30, 0x79	; 121
    11ba:	fb e0       	ldi	r31, 0x0B	; 11
    11bc:	91 83       	std	Z+1, r25	; 0x01
    11be:	80 83       	st	Z, r24
    11c0:	f1 01       	movw	r30, r2
        songs[0].timing_hit[j] = timing_hit_zense[j];
    11c2:	81 91       	ld	r24, Z+
    11c4:	1f 01       	movw	r2, r30
    11c6:	eb 81       	ldd	r30, Y+3	; 0x03
    11c8:	fc 81       	ldd	r31, Y+4	; 0x04
    11ca:	81 93       	st	Z+, r24
    11cc:	fc 83       	std	Y+4, r31	; 0x04
    11ce:	eb 83       	std	Y+3, r30	; 0x03
    11d0:	1f 5f       	subi	r17, 0xFF	; 255
        songs[0].hit[j] = pressDIV[j];
        songs[0].high_score = eeprom_read_byte((uint8_t*) 1);
    }
    */
    
    for(unsigned char j = 0; j < 43; j++) {
    11d2:	1b 32       	cpi	r17, 0x2B	; 43
    11d4:	59 f6       	brne	.-106    	; 0x116c <main+0x9a>
    11d6:	e9 e6       	ldi	r30, 0x69	; 105
    }
    
    //Task Code
    unsigned char tasks_increment = 0;
    
    tasks[tasks_increment].state = LFT_INIT;
    11d8:	f6 e0       	ldi	r31, 0x06	; 6
    11da:	11 82       	std	Z+1, r1	; 0x01
    11dc:	10 82       	st	Z, r1
    11de:	84 e1       	ldi	r24, 0x14	; 20
    tasks[tasks_increment].period = 20;
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	a0 e0       	ldi	r26, 0x00	; 0
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	82 83       	std	Z+2, r24	; 0x02
    11e8:	93 83       	std	Z+3, r25	; 0x03
    11ea:	a4 83       	std	Z+4, r26	; 0x04
    11ec:	b5 83       	std	Z+5, r27	; 0x05
    11ee:	86 83       	std	Z+6, r24	; 0x06
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
    11f0:	97 83       	std	Z+7, r25	; 0x07
    11f2:	a0 87       	std	Z+8, r26	; 0x08
    11f4:	b1 87       	std	Z+9, r27	; 0x09
    11f6:	21 e7       	ldi	r18, 0x71	; 113
    tasks[tasks_increment].TickFct = &Left_Tick;
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	33 87       	std	Z+11, r19	; 0x0b
    11fc:	22 87       	std	Z+10, r18	; 0x0a
    11fe:	15 86       	std	Z+13, r1	; 0x0d
    
    tasks_increment++;
    
    tasks[tasks_increment].state = RGHT_INIT;
    1200:	14 86       	std	Z+12, r1	; 0x0c
    1202:	86 87       	std	Z+14, r24	; 0x0e
    tasks[tasks_increment].period = 20;
    1204:	97 87       	std	Z+15, r25	; 0x0f
    1206:	a0 8b       	std	Z+16, r26	; 0x10
    1208:	b1 8b       	std	Z+17, r27	; 0x11
    120a:	82 8b       	std	Z+18, r24	; 0x12
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
    120c:	93 8b       	std	Z+19, r25	; 0x13
    120e:	a4 8b       	std	Z+20, r26	; 0x14
    1210:	b5 8b       	std	Z+21, r27	; 0x15
    1212:	24 e8       	ldi	r18, 0x84	; 132
    tasks[tasks_increment].TickFct = &Right_Tick;
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	37 8b       	std	Z+23, r19	; 0x17
    1218:	26 8b       	std	Z+22, r18	; 0x16
    121a:	11 8e       	std	Z+25, r1	; 0x19
    
    tasks_increment++;
    
    tasks[tasks_increment].state = UP_INIT;
    121c:	10 8e       	std	Z+24, r1	; 0x18
    121e:	82 8f       	std	Z+26, r24	; 0x1a
    tasks[tasks_increment].period = 20;
    1220:	93 8f       	std	Z+27, r25	; 0x1b
    1222:	a4 8f       	std	Z+28, r26	; 0x1c
    1224:	b5 8f       	std	Z+29, r27	; 0x1d
    1226:	86 8f       	std	Z+30, r24	; 0x1e
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
    1228:	97 8f       	std	Z+31, r25	; 0x1f
    122a:	a0 a3       	std	Z+32, r26	; 0x20
    122c:	b1 a3       	std	Z+33, r27	; 0x21
    122e:	27 e9       	ldi	r18, 0x97	; 151
    tasks[tasks_increment].TickFct = &Up_Tick;
    1230:	30 e0       	ldi	r19, 0x00	; 0
    1232:	33 a3       	std	Z+35, r19	; 0x23
    1234:	22 a3       	std	Z+34, r18	; 0x22
    1236:	15 a2       	std	Z+37, r1	; 0x25
    
    
    tasks_increment++;
    
    tasks[tasks_increment].state = DOWN_INIT;
    1238:	14 a2       	std	Z+36, r1	; 0x24
    123a:	86 a3       	std	Z+38, r24	; 0x26
    tasks[tasks_increment].period = 20;
    123c:	97 a3       	std	Z+39, r25	; 0x27
    123e:	a0 a7       	std	Z+40, r26	; 0x28
    1240:	b1 a7       	std	Z+41, r27	; 0x29
    1242:	82 a7       	std	Z+42, r24	; 0x2a
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
    1244:	93 a7       	std	Z+43, r25	; 0x2b
    1246:	a4 a7       	std	Z+44, r26	; 0x2c
    1248:	b5 a7       	std	Z+45, r27	; 0x2d
    124a:	8a ea       	ldi	r24, 0xAA	; 170
    tasks[tasks_increment].TickFct = &Down_Tick;
    124c:	90 e0       	ldi	r25, 0x00	; 0
    124e:	97 a7       	std	Z+47, r25	; 0x2f
    1250:	86 a7       	std	Z+46, r24	; 0x2e
    1252:	11 aa       	std	Z+49, r1	; 0x31
    
    
    tasks_increment++;
    
    tasks[tasks_increment].state = RGB_INIT;
    1254:	10 aa       	std	Z+48, r1	; 0x30
    1256:	8a e0       	ldi	r24, 0x0A	; 10
    tasks[tasks_increment].period = 10;
    1258:	90 e0       	ldi	r25, 0x00	; 0
    125a:	a0 e0       	ldi	r26, 0x00	; 0
    125c:	b0 e0       	ldi	r27, 0x00	; 0
    125e:	82 ab       	std	Z+50, r24	; 0x32
    1260:	93 ab       	std	Z+51, r25	; 0x33
    1262:	a4 ab       	std	Z+52, r26	; 0x34
    1264:	b5 ab       	std	Z+53, r27	; 0x35
    1266:	86 ab       	std	Z+54, r24	; 0x36
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
    1268:	97 ab       	std	Z+55, r25	; 0x37
    126a:	a0 af       	std	Z+56, r26	; 0x38
    126c:	b1 af       	std	Z+57, r27	; 0x39
    126e:	24 ee       	ldi	r18, 0xE4	; 228
    tasks[tasks_increment].TickFct = &RGB_Matrix_Tick;
    1270:	35 e0       	ldi	r19, 0x05	; 5
    1272:	33 af       	std	Z+59, r19	; 0x3b
    1274:	22 af       	std	Z+58, r18	; 0x3a
    1276:	15 ae       	std	Z+61, r1	; 0x3d
    
    
    tasks_increment++;
    
    tasks[tasks_increment].state = LCD_Menu_Init;
    1278:	14 ae       	std	Z+60, r1	; 0x3c
    127a:	4e e1       	ldi	r20, 0x1E	; 30
    tasks[tasks_increment].period = 30;
    127c:	50 e0       	ldi	r21, 0x00	; 0
    127e:	60 e0       	ldi	r22, 0x00	; 0
    1280:	70 e0       	ldi	r23, 0x00	; 0
    1282:	40 93 a7 06 	sts	0x06A7, r20	; 0x8006a7 <tasks+0x3e>
    1286:	50 93 a8 06 	sts	0x06A8, r21	; 0x8006a8 <tasks+0x3f>
    128a:	60 93 a9 06 	sts	0x06A9, r22	; 0x8006a9 <tasks+0x40>
    128e:	70 93 aa 06 	sts	0x06AA, r23	; 0x8006aa <tasks+0x41>
    1292:	40 93 ab 06 	sts	0x06AB, r20	; 0x8006ab <tasks+0x42>
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
    1296:	50 93 ac 06 	sts	0x06AC, r21	; 0x8006ac <tasks+0x43>
    129a:	60 93 ad 06 	sts	0x06AD, r22	; 0x8006ad <tasks+0x44>
    129e:	70 93 ae 06 	sts	0x06AE, r23	; 0x8006ae <tasks+0x45>
    12a2:	2c ec       	ldi	r18, 0xCC	; 204
    tasks[tasks_increment].TickFct = &LCD_Menu_Tick;
    12a4:	31 e0       	ldi	r19, 0x01	; 1
    12a6:	30 93 b0 06 	sts	0x06B0, r19	; 0x8006b0 <tasks+0x47>
    12aa:	20 93 af 06 	sts	0x06AF, r18	; 0x8006af <tasks+0x46>
    12ae:	10 92 b2 06 	sts	0x06B2, r1	; 0x8006b2 <tasks+0x49>
    
    tasks_increment++;
    
    tasks[tasks_increment].state = Note_INIT;
    12b2:	10 92 b1 06 	sts	0x06B1, r1	; 0x8006b1 <tasks+0x48>
    12b6:	80 93 b3 06 	sts	0x06B3, r24	; 0x8006b3 <tasks+0x4a>
    tasks[tasks_increment].period = 10;
    12ba:	90 93 b4 06 	sts	0x06B4, r25	; 0x8006b4 <tasks+0x4b>
    12be:	a0 93 b5 06 	sts	0x06B5, r26	; 0x8006b5 <tasks+0x4c>
    12c2:	b0 93 b6 06 	sts	0x06B6, r27	; 0x8006b6 <tasks+0x4d>
    12c6:	80 93 b7 06 	sts	0x06B7, r24	; 0x8006b7 <tasks+0x4e>
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
    12ca:	90 93 b8 06 	sts	0x06B8, r25	; 0x8006b8 <tasks+0x4f>
    12ce:	a0 93 b9 06 	sts	0x06B9, r26	; 0x8006b9 <tasks+0x50>
    12d2:	b0 93 ba 06 	sts	0x06BA, r27	; 0x8006ba <tasks+0x51>
    12d6:	82 e7       	ldi	r24, 0x72	; 114
    tasks[tasks_increment].TickFct = &Note_Tick;
    12d8:	97 e0       	ldi	r25, 0x07	; 7
    12da:	90 93 bc 06 	sts	0x06BC, r25	; 0x8006bc <tasks+0x53>
    12de:	80 93 bb 06 	sts	0x06BB, r24	; 0x8006bb <tasks+0x52>
    12e2:	10 92 be 06 	sts	0x06BE, r1	; 0x8006be <tasks+0x55>
    
    tasks_increment++;
    
    tasks[tasks_increment].state = Player_Init;
    12e6:	10 92 bd 06 	sts	0x06BD, r1	; 0x8006bd <tasks+0x54>
    12ea:	85 e0       	ldi	r24, 0x05	; 5
    tasks[tasks_increment].period = 5;
    12ec:	90 e0       	ldi	r25, 0x00	; 0
    12ee:	a0 e0       	ldi	r26, 0x00	; 0
    12f0:	b0 e0       	ldi	r27, 0x00	; 0
    12f2:	80 93 bf 06 	sts	0x06BF, r24	; 0x8006bf <tasks+0x56>
    12f6:	90 93 c0 06 	sts	0x06C0, r25	; 0x8006c0 <tasks+0x57>
    12fa:	a0 93 c1 06 	sts	0x06C1, r26	; 0x8006c1 <tasks+0x58>
    12fe:	b0 93 c2 06 	sts	0x06C2, r27	; 0x8006c2 <tasks+0x59>
    1302:	80 93 c3 06 	sts	0x06C3, r24	; 0x8006c3 <tasks+0x5a>
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
    1306:	90 93 c4 06 	sts	0x06C4, r25	; 0x8006c4 <tasks+0x5b>
    130a:	a0 93 c5 06 	sts	0x06C5, r26	; 0x8006c5 <tasks+0x5c>
    130e:	b0 93 c6 06 	sts	0x06C6, r27	; 0x8006c6 <tasks+0x5d>
    1312:	8d eb       	ldi	r24, 0xBD	; 189
    tasks[tasks_increment].TickFct = &Player_Tick;
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	90 93 c8 06 	sts	0x06C8, r25	; 0x8006c8 <tasks+0x5f>
    131a:	80 93 c7 06 	sts	0x06C7, r24	; 0x8006c7 <tasks+0x5e>
    
    //Timer
    TimerSet(tasksPeriodGCD);
    131e:	65 e0       	ldi	r22, 0x05	; 5
    1320:	70 e0       	ldi	r23, 0x00	; 0
    1322:	80 e0       	ldi	r24, 0x00	; 0
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	66 db       	rcall	.-2356   	; 0x9f4 <TimerSet>
    TimerOn();
    1328:	76 db       	rcall	.-2324   	; 0xa16 <TimerOn>
    132a:	ff cf       	rjmp	.-2      	; 0x132a <main+0x258>

0000132c <__cmpsf2>:
    132c:	9c d0       	rcall	.+312    	; 0x1466 <__fp_cmp>
    132e:	08 f4       	brcc	.+2      	; 0x1332 <__cmpsf2+0x6>
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	08 95       	ret

00001334 <__divsf3>:
    1334:	0c d0       	rcall	.+24     	; 0x134e <__divsf3x>
    1336:	d2 c0       	rjmp	.+420    	; 0x14dc <__fp_round>
    1338:	ca d0       	rcall	.+404    	; 0x14ce <__fp_pscB>
    133a:	40 f0       	brcs	.+16     	; 0x134c <__divsf3+0x18>
    133c:	c1 d0       	rcall	.+386    	; 0x14c0 <__fp_pscA>
    133e:	30 f0       	brcs	.+12     	; 0x134c <__divsf3+0x18>
    1340:	21 f4       	brne	.+8      	; 0x134a <__divsf3+0x16>
    1342:	5f 3f       	cpi	r21, 0xFF	; 255
    1344:	19 f0       	breq	.+6      	; 0x134c <__divsf3+0x18>
    1346:	b3 c0       	rjmp	.+358    	; 0x14ae <__fp_inf>
    1348:	51 11       	cpse	r21, r1
    134a:	fc c0       	rjmp	.+504    	; 0x1544 <__fp_szero>
    134c:	b6 c0       	rjmp	.+364    	; 0x14ba <__fp_nan>

0000134e <__divsf3x>:
    134e:	d7 d0       	rcall	.+430    	; 0x14fe <__fp_split3>
    1350:	98 f3       	brcs	.-26     	; 0x1338 <__divsf3+0x4>

00001352 <__divsf3_pse>:
    1352:	99 23       	and	r25, r25
    1354:	c9 f3       	breq	.-14     	; 0x1348 <__divsf3+0x14>
    1356:	55 23       	and	r21, r21
    1358:	b1 f3       	breq	.-20     	; 0x1346 <__divsf3+0x12>
    135a:	95 1b       	sub	r25, r21
    135c:	55 0b       	sbc	r21, r21
    135e:	bb 27       	eor	r27, r27
    1360:	aa 27       	eor	r26, r26
    1362:	62 17       	cp	r22, r18
    1364:	73 07       	cpc	r23, r19
    1366:	84 07       	cpc	r24, r20
    1368:	38 f0       	brcs	.+14     	; 0x1378 <__divsf3_pse+0x26>
    136a:	9f 5f       	subi	r25, 0xFF	; 255
    136c:	5f 4f       	sbci	r21, 0xFF	; 255
    136e:	22 0f       	add	r18, r18
    1370:	33 1f       	adc	r19, r19
    1372:	44 1f       	adc	r20, r20
    1374:	aa 1f       	adc	r26, r26
    1376:	a9 f3       	breq	.-22     	; 0x1362 <__divsf3_pse+0x10>
    1378:	33 d0       	rcall	.+102    	; 0x13e0 <__divsf3_pse+0x8e>
    137a:	0e 2e       	mov	r0, r30
    137c:	3a f0       	brmi	.+14     	; 0x138c <__divsf3_pse+0x3a>
    137e:	e0 e8       	ldi	r30, 0x80	; 128
    1380:	30 d0       	rcall	.+96     	; 0x13e2 <__divsf3_pse+0x90>
    1382:	91 50       	subi	r25, 0x01	; 1
    1384:	50 40       	sbci	r21, 0x00	; 0
    1386:	e6 95       	lsr	r30
    1388:	00 1c       	adc	r0, r0
    138a:	ca f7       	brpl	.-14     	; 0x137e <__divsf3_pse+0x2c>
    138c:	29 d0       	rcall	.+82     	; 0x13e0 <__divsf3_pse+0x8e>
    138e:	fe 2f       	mov	r31, r30
    1390:	27 d0       	rcall	.+78     	; 0x13e0 <__divsf3_pse+0x8e>
    1392:	66 0f       	add	r22, r22
    1394:	77 1f       	adc	r23, r23
    1396:	88 1f       	adc	r24, r24
    1398:	bb 1f       	adc	r27, r27
    139a:	26 17       	cp	r18, r22
    139c:	37 07       	cpc	r19, r23
    139e:	48 07       	cpc	r20, r24
    13a0:	ab 07       	cpc	r26, r27
    13a2:	b0 e8       	ldi	r27, 0x80	; 128
    13a4:	09 f0       	breq	.+2      	; 0x13a8 <__divsf3_pse+0x56>
    13a6:	bb 0b       	sbc	r27, r27
    13a8:	80 2d       	mov	r24, r0
    13aa:	bf 01       	movw	r22, r30
    13ac:	ff 27       	eor	r31, r31
    13ae:	93 58       	subi	r25, 0x83	; 131
    13b0:	5f 4f       	sbci	r21, 0xFF	; 255
    13b2:	2a f0       	brmi	.+10     	; 0x13be <__divsf3_pse+0x6c>
    13b4:	9e 3f       	cpi	r25, 0xFE	; 254
    13b6:	51 05       	cpc	r21, r1
    13b8:	68 f0       	brcs	.+26     	; 0x13d4 <__divsf3_pse+0x82>
    13ba:	79 c0       	rjmp	.+242    	; 0x14ae <__fp_inf>
    13bc:	c3 c0       	rjmp	.+390    	; 0x1544 <__fp_szero>
    13be:	5f 3f       	cpi	r21, 0xFF	; 255
    13c0:	ec f3       	brlt	.-6      	; 0x13bc <__divsf3_pse+0x6a>
    13c2:	98 3e       	cpi	r25, 0xE8	; 232
    13c4:	dc f3       	brlt	.-10     	; 0x13bc <__divsf3_pse+0x6a>
    13c6:	86 95       	lsr	r24
    13c8:	77 95       	ror	r23
    13ca:	67 95       	ror	r22
    13cc:	b7 95       	ror	r27
    13ce:	f7 95       	ror	r31
    13d0:	9f 5f       	subi	r25, 0xFF	; 255
    13d2:	c9 f7       	brne	.-14     	; 0x13c6 <__divsf3_pse+0x74>
    13d4:	88 0f       	add	r24, r24
    13d6:	91 1d       	adc	r25, r1
    13d8:	96 95       	lsr	r25
    13da:	87 95       	ror	r24
    13dc:	97 f9       	bld	r25, 7
    13de:	08 95       	ret
    13e0:	e1 e0       	ldi	r30, 0x01	; 1
    13e2:	66 0f       	add	r22, r22
    13e4:	77 1f       	adc	r23, r23
    13e6:	88 1f       	adc	r24, r24
    13e8:	bb 1f       	adc	r27, r27
    13ea:	62 17       	cp	r22, r18
    13ec:	73 07       	cpc	r23, r19
    13ee:	84 07       	cpc	r24, r20
    13f0:	ba 07       	cpc	r27, r26
    13f2:	20 f0       	brcs	.+8      	; 0x13fc <__divsf3_pse+0xaa>
    13f4:	62 1b       	sub	r22, r18
    13f6:	73 0b       	sbc	r23, r19
    13f8:	84 0b       	sbc	r24, r20
    13fa:	ba 0b       	sbc	r27, r26
    13fc:	ee 1f       	adc	r30, r30
    13fe:	88 f7       	brcc	.-30     	; 0x13e2 <__divsf3_pse+0x90>
    1400:	e0 95       	com	r30
    1402:	08 95       	ret

00001404 <__fixsfsi>:
    1404:	04 d0       	rcall	.+8      	; 0x140e <__fixunssfsi>
    1406:	68 94       	set
    1408:	b1 11       	cpse	r27, r1
    140a:	9c c0       	rjmp	.+312    	; 0x1544 <__fp_szero>
    140c:	08 95       	ret

0000140e <__fixunssfsi>:
    140e:	7f d0       	rcall	.+254    	; 0x150e <__fp_splitA>
    1410:	88 f0       	brcs	.+34     	; 0x1434 <__fixunssfsi+0x26>
    1412:	9f 57       	subi	r25, 0x7F	; 127
    1414:	90 f0       	brcs	.+36     	; 0x143a <__fixunssfsi+0x2c>
    1416:	b9 2f       	mov	r27, r25
    1418:	99 27       	eor	r25, r25
    141a:	b7 51       	subi	r27, 0x17	; 23
    141c:	a0 f0       	brcs	.+40     	; 0x1446 <__fixunssfsi+0x38>
    141e:	d1 f0       	breq	.+52     	; 0x1454 <__fixunssfsi+0x46>
    1420:	66 0f       	add	r22, r22
    1422:	77 1f       	adc	r23, r23
    1424:	88 1f       	adc	r24, r24
    1426:	99 1f       	adc	r25, r25
    1428:	1a f0       	brmi	.+6      	; 0x1430 <__fixunssfsi+0x22>
    142a:	ba 95       	dec	r27
    142c:	c9 f7       	brne	.-14     	; 0x1420 <__fixunssfsi+0x12>
    142e:	12 c0       	rjmp	.+36     	; 0x1454 <__fixunssfsi+0x46>
    1430:	b1 30       	cpi	r27, 0x01	; 1
    1432:	81 f0       	breq	.+32     	; 0x1454 <__fixunssfsi+0x46>
    1434:	86 d0       	rcall	.+268    	; 0x1542 <__fp_zero>
    1436:	b1 e0       	ldi	r27, 0x01	; 1
    1438:	08 95       	ret
    143a:	83 c0       	rjmp	.+262    	; 0x1542 <__fp_zero>
    143c:	67 2f       	mov	r22, r23
    143e:	78 2f       	mov	r23, r24
    1440:	88 27       	eor	r24, r24
    1442:	b8 5f       	subi	r27, 0xF8	; 248
    1444:	39 f0       	breq	.+14     	; 0x1454 <__fixunssfsi+0x46>
    1446:	b9 3f       	cpi	r27, 0xF9	; 249
    1448:	cc f3       	brlt	.-14     	; 0x143c <__fixunssfsi+0x2e>
    144a:	86 95       	lsr	r24
    144c:	77 95       	ror	r23
    144e:	67 95       	ror	r22
    1450:	b3 95       	inc	r27
    1452:	d9 f7       	brne	.-10     	; 0x144a <__fixunssfsi+0x3c>
    1454:	3e f4       	brtc	.+14     	; 0x1464 <__fixunssfsi+0x56>
    1456:	90 95       	com	r25
    1458:	80 95       	com	r24
    145a:	70 95       	com	r23
    145c:	61 95       	neg	r22
    145e:	7f 4f       	sbci	r23, 0xFF	; 255
    1460:	8f 4f       	sbci	r24, 0xFF	; 255
    1462:	9f 4f       	sbci	r25, 0xFF	; 255
    1464:	08 95       	ret

00001466 <__fp_cmp>:
    1466:	99 0f       	add	r25, r25
    1468:	00 08       	sbc	r0, r0
    146a:	55 0f       	add	r21, r21
    146c:	aa 0b       	sbc	r26, r26
    146e:	e0 e8       	ldi	r30, 0x80	; 128
    1470:	fe ef       	ldi	r31, 0xFE	; 254
    1472:	16 16       	cp	r1, r22
    1474:	17 06       	cpc	r1, r23
    1476:	e8 07       	cpc	r30, r24
    1478:	f9 07       	cpc	r31, r25
    147a:	c0 f0       	brcs	.+48     	; 0x14ac <__fp_cmp+0x46>
    147c:	12 16       	cp	r1, r18
    147e:	13 06       	cpc	r1, r19
    1480:	e4 07       	cpc	r30, r20
    1482:	f5 07       	cpc	r31, r21
    1484:	98 f0       	brcs	.+38     	; 0x14ac <__fp_cmp+0x46>
    1486:	62 1b       	sub	r22, r18
    1488:	73 0b       	sbc	r23, r19
    148a:	84 0b       	sbc	r24, r20
    148c:	95 0b       	sbc	r25, r21
    148e:	39 f4       	brne	.+14     	; 0x149e <__fp_cmp+0x38>
    1490:	0a 26       	eor	r0, r26
    1492:	61 f0       	breq	.+24     	; 0x14ac <__fp_cmp+0x46>
    1494:	23 2b       	or	r18, r19
    1496:	24 2b       	or	r18, r20
    1498:	25 2b       	or	r18, r21
    149a:	21 f4       	brne	.+8      	; 0x14a4 <__fp_cmp+0x3e>
    149c:	08 95       	ret
    149e:	0a 26       	eor	r0, r26
    14a0:	09 f4       	brne	.+2      	; 0x14a4 <__fp_cmp+0x3e>
    14a2:	a1 40       	sbci	r26, 0x01	; 1
    14a4:	a6 95       	lsr	r26
    14a6:	8f ef       	ldi	r24, 0xFF	; 255
    14a8:	81 1d       	adc	r24, r1
    14aa:	81 1d       	adc	r24, r1
    14ac:	08 95       	ret

000014ae <__fp_inf>:
    14ae:	97 f9       	bld	r25, 7
    14b0:	9f 67       	ori	r25, 0x7F	; 127
    14b2:	80 e8       	ldi	r24, 0x80	; 128
    14b4:	70 e0       	ldi	r23, 0x00	; 0
    14b6:	60 e0       	ldi	r22, 0x00	; 0
    14b8:	08 95       	ret

000014ba <__fp_nan>:
    14ba:	9f ef       	ldi	r25, 0xFF	; 255
    14bc:	80 ec       	ldi	r24, 0xC0	; 192
    14be:	08 95       	ret

000014c0 <__fp_pscA>:
    14c0:	00 24       	eor	r0, r0
    14c2:	0a 94       	dec	r0
    14c4:	16 16       	cp	r1, r22
    14c6:	17 06       	cpc	r1, r23
    14c8:	18 06       	cpc	r1, r24
    14ca:	09 06       	cpc	r0, r25
    14cc:	08 95       	ret

000014ce <__fp_pscB>:
    14ce:	00 24       	eor	r0, r0
    14d0:	0a 94       	dec	r0
    14d2:	12 16       	cp	r1, r18
    14d4:	13 06       	cpc	r1, r19
    14d6:	14 06       	cpc	r1, r20
    14d8:	05 06       	cpc	r0, r21
    14da:	08 95       	ret

000014dc <__fp_round>:
    14dc:	09 2e       	mov	r0, r25
    14de:	03 94       	inc	r0
    14e0:	00 0c       	add	r0, r0
    14e2:	11 f4       	brne	.+4      	; 0x14e8 <__fp_round+0xc>
    14e4:	88 23       	and	r24, r24
    14e6:	52 f0       	brmi	.+20     	; 0x14fc <__fp_round+0x20>
    14e8:	bb 0f       	add	r27, r27
    14ea:	40 f4       	brcc	.+16     	; 0x14fc <__fp_round+0x20>
    14ec:	bf 2b       	or	r27, r31
    14ee:	11 f4       	brne	.+4      	; 0x14f4 <__fp_round+0x18>
    14f0:	60 ff       	sbrs	r22, 0
    14f2:	04 c0       	rjmp	.+8      	; 0x14fc <__fp_round+0x20>
    14f4:	6f 5f       	subi	r22, 0xFF	; 255
    14f6:	7f 4f       	sbci	r23, 0xFF	; 255
    14f8:	8f 4f       	sbci	r24, 0xFF	; 255
    14fa:	9f 4f       	sbci	r25, 0xFF	; 255
    14fc:	08 95       	ret

000014fe <__fp_split3>:
    14fe:	57 fd       	sbrc	r21, 7
    1500:	90 58       	subi	r25, 0x80	; 128
    1502:	44 0f       	add	r20, r20
    1504:	55 1f       	adc	r21, r21
    1506:	59 f0       	breq	.+22     	; 0x151e <__fp_splitA+0x10>
    1508:	5f 3f       	cpi	r21, 0xFF	; 255
    150a:	71 f0       	breq	.+28     	; 0x1528 <__fp_splitA+0x1a>
    150c:	47 95       	ror	r20

0000150e <__fp_splitA>:
    150e:	88 0f       	add	r24, r24
    1510:	97 fb       	bst	r25, 7
    1512:	99 1f       	adc	r25, r25
    1514:	61 f0       	breq	.+24     	; 0x152e <__fp_splitA+0x20>
    1516:	9f 3f       	cpi	r25, 0xFF	; 255
    1518:	79 f0       	breq	.+30     	; 0x1538 <__fp_splitA+0x2a>
    151a:	87 95       	ror	r24
    151c:	08 95       	ret
    151e:	12 16       	cp	r1, r18
    1520:	13 06       	cpc	r1, r19
    1522:	14 06       	cpc	r1, r20
    1524:	55 1f       	adc	r21, r21
    1526:	f2 cf       	rjmp	.-28     	; 0x150c <__fp_split3+0xe>
    1528:	46 95       	lsr	r20
    152a:	f1 df       	rcall	.-30     	; 0x150e <__fp_splitA>
    152c:	08 c0       	rjmp	.+16     	; 0x153e <__fp_splitA+0x30>
    152e:	16 16       	cp	r1, r22
    1530:	17 06       	cpc	r1, r23
    1532:	18 06       	cpc	r1, r24
    1534:	99 1f       	adc	r25, r25
    1536:	f1 cf       	rjmp	.-30     	; 0x151a <__fp_splitA+0xc>
    1538:	86 95       	lsr	r24
    153a:	71 05       	cpc	r23, r1
    153c:	61 05       	cpc	r22, r1
    153e:	08 94       	sec
    1540:	08 95       	ret

00001542 <__fp_zero>:
    1542:	e8 94       	clt

00001544 <__fp_szero>:
    1544:	bb 27       	eor	r27, r27
    1546:	66 27       	eor	r22, r22
    1548:	77 27       	eor	r23, r23
    154a:	cb 01       	movw	r24, r22
    154c:	97 f9       	bld	r25, 7
    154e:	08 95       	ret

00001550 <__gesf2>:
    1550:	8a df       	rcall	.-236    	; 0x1466 <__fp_cmp>
    1552:	08 f4       	brcc	.+2      	; 0x1556 <__gesf2+0x6>
    1554:	8f ef       	ldi	r24, 0xFF	; 255
    1556:	08 95       	ret

00001558 <__mulsf3>:
    1558:	0b d0       	rcall	.+22     	; 0x1570 <__mulsf3x>
    155a:	c0 cf       	rjmp	.-128    	; 0x14dc <__fp_round>
    155c:	b1 df       	rcall	.-158    	; 0x14c0 <__fp_pscA>
    155e:	28 f0       	brcs	.+10     	; 0x156a <__mulsf3+0x12>
    1560:	b6 df       	rcall	.-148    	; 0x14ce <__fp_pscB>
    1562:	18 f0       	brcs	.+6      	; 0x156a <__mulsf3+0x12>
    1564:	95 23       	and	r25, r21
    1566:	09 f0       	breq	.+2      	; 0x156a <__mulsf3+0x12>
    1568:	a2 cf       	rjmp	.-188    	; 0x14ae <__fp_inf>
    156a:	a7 cf       	rjmp	.-178    	; 0x14ba <__fp_nan>
    156c:	11 24       	eor	r1, r1
    156e:	ea cf       	rjmp	.-44     	; 0x1544 <__fp_szero>

00001570 <__mulsf3x>:
    1570:	c6 df       	rcall	.-116    	; 0x14fe <__fp_split3>
    1572:	a0 f3       	brcs	.-24     	; 0x155c <__mulsf3+0x4>

00001574 <__mulsf3_pse>:
    1574:	95 9f       	mul	r25, r21
    1576:	d1 f3       	breq	.-12     	; 0x156c <__mulsf3+0x14>
    1578:	95 0f       	add	r25, r21
    157a:	50 e0       	ldi	r21, 0x00	; 0
    157c:	55 1f       	adc	r21, r21
    157e:	62 9f       	mul	r22, r18
    1580:	f0 01       	movw	r30, r0
    1582:	72 9f       	mul	r23, r18
    1584:	bb 27       	eor	r27, r27
    1586:	f0 0d       	add	r31, r0
    1588:	b1 1d       	adc	r27, r1
    158a:	63 9f       	mul	r22, r19
    158c:	aa 27       	eor	r26, r26
    158e:	f0 0d       	add	r31, r0
    1590:	b1 1d       	adc	r27, r1
    1592:	aa 1f       	adc	r26, r26
    1594:	64 9f       	mul	r22, r20
    1596:	66 27       	eor	r22, r22
    1598:	b0 0d       	add	r27, r0
    159a:	a1 1d       	adc	r26, r1
    159c:	66 1f       	adc	r22, r22
    159e:	82 9f       	mul	r24, r18
    15a0:	22 27       	eor	r18, r18
    15a2:	b0 0d       	add	r27, r0
    15a4:	a1 1d       	adc	r26, r1
    15a6:	62 1f       	adc	r22, r18
    15a8:	73 9f       	mul	r23, r19
    15aa:	b0 0d       	add	r27, r0
    15ac:	a1 1d       	adc	r26, r1
    15ae:	62 1f       	adc	r22, r18
    15b0:	83 9f       	mul	r24, r19
    15b2:	a0 0d       	add	r26, r0
    15b4:	61 1d       	adc	r22, r1
    15b6:	22 1f       	adc	r18, r18
    15b8:	74 9f       	mul	r23, r20
    15ba:	33 27       	eor	r19, r19
    15bc:	a0 0d       	add	r26, r0
    15be:	61 1d       	adc	r22, r1
    15c0:	23 1f       	adc	r18, r19
    15c2:	84 9f       	mul	r24, r20
    15c4:	60 0d       	add	r22, r0
    15c6:	21 1d       	adc	r18, r1
    15c8:	82 2f       	mov	r24, r18
    15ca:	76 2f       	mov	r23, r22
    15cc:	6a 2f       	mov	r22, r26
    15ce:	11 24       	eor	r1, r1
    15d0:	9f 57       	subi	r25, 0x7F	; 127
    15d2:	50 40       	sbci	r21, 0x00	; 0
    15d4:	8a f0       	brmi	.+34     	; 0x15f8 <__mulsf3_pse+0x84>
    15d6:	e1 f0       	breq	.+56     	; 0x1610 <__mulsf3_pse+0x9c>
    15d8:	88 23       	and	r24, r24
    15da:	4a f0       	brmi	.+18     	; 0x15ee <__mulsf3_pse+0x7a>
    15dc:	ee 0f       	add	r30, r30
    15de:	ff 1f       	adc	r31, r31
    15e0:	bb 1f       	adc	r27, r27
    15e2:	66 1f       	adc	r22, r22
    15e4:	77 1f       	adc	r23, r23
    15e6:	88 1f       	adc	r24, r24
    15e8:	91 50       	subi	r25, 0x01	; 1
    15ea:	50 40       	sbci	r21, 0x00	; 0
    15ec:	a9 f7       	brne	.-22     	; 0x15d8 <__mulsf3_pse+0x64>
    15ee:	9e 3f       	cpi	r25, 0xFE	; 254
    15f0:	51 05       	cpc	r21, r1
    15f2:	70 f0       	brcs	.+28     	; 0x1610 <__mulsf3_pse+0x9c>
    15f4:	5c cf       	rjmp	.-328    	; 0x14ae <__fp_inf>
    15f6:	a6 cf       	rjmp	.-180    	; 0x1544 <__fp_szero>
    15f8:	5f 3f       	cpi	r21, 0xFF	; 255
    15fa:	ec f3       	brlt	.-6      	; 0x15f6 <__mulsf3_pse+0x82>
    15fc:	98 3e       	cpi	r25, 0xE8	; 232
    15fe:	dc f3       	brlt	.-10     	; 0x15f6 <__mulsf3_pse+0x82>
    1600:	86 95       	lsr	r24
    1602:	77 95       	ror	r23
    1604:	67 95       	ror	r22
    1606:	b7 95       	ror	r27
    1608:	f7 95       	ror	r31
    160a:	e7 95       	ror	r30
    160c:	9f 5f       	subi	r25, 0xFF	; 255
    160e:	c1 f7       	brne	.-16     	; 0x1600 <__mulsf3_pse+0x8c>
    1610:	fe 2b       	or	r31, r30
    1612:	88 0f       	add	r24, r24
    1614:	91 1d       	adc	r25, r1
    1616:	96 95       	lsr	r25
    1618:	87 95       	ror	r24
    161a:	97 f9       	bld	r25, 7
    161c:	08 95       	ret

0000161e <__tablejump2__>:
    161e:	ee 0f       	add	r30, r30
    1620:	ff 1f       	adc	r31, r31
    1622:	00 24       	eor	r0, r0
    1624:	00 1c       	adc	r0, r0
    1626:	0b be       	out	0x3b, r0	; 59
    1628:	07 90       	elpm	r0, Z+
    162a:	f6 91       	elpm	r31, Z
    162c:	e0 2d       	mov	r30, r0
    162e:	09 94       	ijmp

00001630 <__umulhisi3>:
    1630:	a2 9f       	mul	r26, r18
    1632:	b0 01       	movw	r22, r0
    1634:	b3 9f       	mul	r27, r19
    1636:	c0 01       	movw	r24, r0
    1638:	a3 9f       	mul	r26, r19
    163a:	70 0d       	add	r23, r0
    163c:	81 1d       	adc	r24, r1
    163e:	11 24       	eor	r1, r1
    1640:	91 1d       	adc	r25, r1
    1642:	b2 9f       	mul	r27, r18
    1644:	70 0d       	add	r23, r0
    1646:	81 1d       	adc	r24, r1
    1648:	11 24       	eor	r1, r1
    164a:	91 1d       	adc	r25, r1
    164c:	08 95       	ret

0000164e <eeprom_read_byte>:
    164e:	f9 99       	sbic	0x1f, 1	; 31
    1650:	fe cf       	rjmp	.-4      	; 0x164e <eeprom_read_byte>
    1652:	92 bd       	out	0x22, r25	; 34
    1654:	81 bd       	out	0x21, r24	; 33
    1656:	f8 9a       	sbi	0x1f, 0	; 31
    1658:	99 27       	eor	r25, r25
    165a:	80 b5       	in	r24, 0x20	; 32
    165c:	08 95       	ret

0000165e <eeprom_update_byte>:
    165e:	26 2f       	mov	r18, r22

00001660 <eeprom_update_r18>:
    1660:	f9 99       	sbic	0x1f, 1	; 31
    1662:	fe cf       	rjmp	.-4      	; 0x1660 <eeprom_update_r18>
    1664:	92 bd       	out	0x22, r25	; 34
    1666:	81 bd       	out	0x21, r24	; 33
    1668:	f8 9a       	sbi	0x1f, 0	; 31
    166a:	01 97       	sbiw	r24, 0x01	; 1
    166c:	00 b4       	in	r0, 0x20	; 32
    166e:	02 16       	cp	r0, r18
    1670:	39 f0       	breq	.+14     	; 0x1680 <eeprom_update_r18+0x20>
    1672:	1f ba       	out	0x1f, r1	; 31
    1674:	20 bd       	out	0x20, r18	; 32
    1676:	0f b6       	in	r0, 0x3f	; 63
    1678:	f8 94       	cli
    167a:	fa 9a       	sbi	0x1f, 2	; 31
    167c:	f9 9a       	sbi	0x1f, 1	; 31
    167e:	0f be       	out	0x3f, r0	; 63
    1680:	08 95       	ret

00001682 <_exit>:
    1682:	f8 94       	cli

00001684 <__stop_program>:
    1684:	ff cf       	rjmp	.-2      	; 0x1684 <__stop_program>
