
Rhythm_Game_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000f3c  00800100  0000171c  000017b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000171c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001028  0080103c  0080103c  000026ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000026ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000271c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  00002760  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f71  00000000  00000000  000028d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000afc  00000000  00000000  00004849  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014ca  00000000  00000000  00005345  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000358  00000000  00000000  00006810  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a08  00000000  00000000  00006b68  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f4f  00000000  00000000  00007570  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  000084bf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	61 c0       	rjmp	.+194    	; 0xc4 <__ctors_end>
       2:	00 00       	nop
       4:	7e c0       	rjmp	.+252    	; 0x102 <__bad_interrupt>
       6:	00 00       	nop
       8:	7c c0       	rjmp	.+248    	; 0x102 <__bad_interrupt>
       a:	00 00       	nop
       c:	7a c0       	rjmp	.+244    	; 0x102 <__bad_interrupt>
       e:	00 00       	nop
      10:	78 c0       	rjmp	.+240    	; 0x102 <__bad_interrupt>
      12:	00 00       	nop
      14:	76 c0       	rjmp	.+236    	; 0x102 <__bad_interrupt>
      16:	00 00       	nop
      18:	74 c0       	rjmp	.+232    	; 0x102 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	72 c0       	rjmp	.+228    	; 0x102 <__bad_interrupt>
      1e:	00 00       	nop
      20:	70 c0       	rjmp	.+224    	; 0x102 <__bad_interrupt>
      22:	00 00       	nop
      24:	6e c0       	rjmp	.+220    	; 0x102 <__bad_interrupt>
      26:	00 00       	nop
      28:	6c c0       	rjmp	.+216    	; 0x102 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	6a c0       	rjmp	.+212    	; 0x102 <__bad_interrupt>
      2e:	00 00       	nop
      30:	68 c0       	rjmp	.+208    	; 0x102 <__bad_interrupt>
      32:	00 00       	nop
      34:	78 c5       	rjmp	.+2800   	; 0xb26 <__vector_13>
      36:	00 00       	nop
      38:	64 c0       	rjmp	.+200    	; 0x102 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	62 c0       	rjmp	.+196    	; 0x102 <__bad_interrupt>
      3e:	00 00       	nop
      40:	60 c0       	rjmp	.+192    	; 0x102 <__bad_interrupt>
      42:	00 00       	nop
      44:	5e c0       	rjmp	.+188    	; 0x102 <__bad_interrupt>
      46:	00 00       	nop
      48:	5c c0       	rjmp	.+184    	; 0x102 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	5a c0       	rjmp	.+180    	; 0x102 <__bad_interrupt>
      4e:	00 00       	nop
      50:	58 c0       	rjmp	.+176    	; 0x102 <__bad_interrupt>
      52:	00 00       	nop
      54:	56 c0       	rjmp	.+172    	; 0x102 <__bad_interrupt>
      56:	00 00       	nop
      58:	54 c0       	rjmp	.+168    	; 0x102 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	52 c0       	rjmp	.+164    	; 0x102 <__bad_interrupt>
      5e:	00 00       	nop
      60:	50 c0       	rjmp	.+160    	; 0x102 <__bad_interrupt>
      62:	00 00       	nop
      64:	4e c0       	rjmp	.+156    	; 0x102 <__bad_interrupt>
      66:	00 00       	nop
      68:	4c c0       	rjmp	.+152    	; 0x102 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	4a c0       	rjmp	.+148    	; 0x102 <__bad_interrupt>
      6e:	00 00       	nop
      70:	48 c0       	rjmp	.+144    	; 0x102 <__bad_interrupt>
      72:	00 00       	nop
      74:	46 c0       	rjmp	.+140    	; 0x102 <__bad_interrupt>
      76:	00 00       	nop
      78:	44 c0       	rjmp	.+136    	; 0x102 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	42 c0       	rjmp	.+132    	; 0x102 <__bad_interrupt>
      7e:	00 00       	nop
      80:	40 c0       	rjmp	.+128    	; 0x102 <__bad_interrupt>
      82:	00 00       	nop
      84:	3e c0       	rjmp	.+124    	; 0x102 <__bad_interrupt>
      86:	00 00       	nop
      88:	3c c0       	rjmp	.+120    	; 0x102 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	67 03       	mulsu	r22, r23
      8e:	f2 01       	movw	r30, r4
      90:	06 02       	muls	r16, r22
      92:	18 02       	muls	r17, r24
      94:	77 02       	muls	r23, r23
      96:	65 02       	muls	r22, r21
      98:	89 02       	muls	r24, r25
      9a:	9b 02       	muls	r25, r27
      9c:	bf 02       	muls	r27, r31
      9e:	e3 02       	muls	r30, r19
      a0:	f4 02       	muls	r31, r20
      a2:	02 03       	mulsu	r16, r18
      a4:	0c 03       	fmul	r16, r20
      a6:	3a 03       	fmul	r19, r18
      a8:	4b 03       	fmul	r20, r19
      aa:	67 03       	mulsu	r22, r23
      ac:	19 05       	cpc	r17, r9
      ae:	6f 03       	fmul	r22, r23
      b0:	19 05       	cpc	r17, r9
      b2:	19 05       	cpc	r17, r9
      b4:	19 05       	cpc	r17, r9
      b6:	91 03       	fmuls	r17, r17
      b8:	f3 03       	fmuls	r23, r19
      ba:	19 05       	cpc	r17, r9
      bc:	55 04       	cpc	r5, r5
      be:	6a 04       	cpc	r6, r10
      c0:	a5 04       	cpc	r10, r5
      c2:	ae 04       	cpc	r10, r14

000000c4 <__ctors_end>:
      c4:	11 24       	eor	r1, r1
      c6:	1f be       	out	0x3f, r1	; 63
      c8:	cf ef       	ldi	r28, 0xFF	; 255
      ca:	d0 e4       	ldi	r29, 0x40	; 64
      cc:	de bf       	out	0x3e, r29	; 62
      ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
      d0:	10 e1       	ldi	r17, 0x10	; 16
      d2:	a0 e0       	ldi	r26, 0x00	; 0
      d4:	b1 e0       	ldi	r27, 0x01	; 1
      d6:	ec e1       	ldi	r30, 0x1C	; 28
      d8:	f7 e1       	ldi	r31, 0x17	; 23
      da:	00 e0       	ldi	r16, 0x00	; 0
      dc:	0b bf       	out	0x3b, r16	; 59
      de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x14>
      e0:	07 90       	elpm	r0, Z+
      e2:	0d 92       	st	X+, r0
      e4:	ac 33       	cpi	r26, 0x3C	; 60
      e6:	b1 07       	cpc	r27, r17
      e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0x10>

000000ea <__do_clear_bss>:
      ea:	20 e2       	ldi	r18, 0x20	; 32
      ec:	ac e3       	ldi	r26, 0x3C	; 60
      ee:	b0 e1       	ldi	r27, 0x10	; 16
      f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
      f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
      f4:	a4 36       	cpi	r26, 0x64	; 100
      f6:	b2 07       	cpc	r27, r18
      f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>
      fa:	0e 94 8d 08 	call	0x111a	; 0x111a <main>
      fe:	0c 94 8c 0b 	jmp	0x1718	; 0x1718 <_exit>

00000102 <__bad_interrupt>:
     102:	7e cf       	rjmp	.-260    	; 0x0 <__vectors>

00000104 <Left_Tick>:
unsigned char Set_Bit(unsigned char output, unsigned char in){
    return (output | (1 << in));   
}
unsigned char Clear_Bit(unsigned char output, unsigned char in){
    return (output & ~(1 << in));
} 
     104:	82 30       	cpi	r24, 0x02	; 2
     106:	91 05       	cpc	r25, r1
     108:	18 f0       	brcs	.+6      	; 0x110 <Left_Tick+0xc>
     10a:	81 30       	cpi	r24, 0x01	; 1
     10c:	91 05       	cpc	r25, r1
     10e:	61 f4       	brne	.+24     	; 0x128 <Left_Tick+0x24>
     110:	03 99       	sbic	0x00, 3	; 0
     112:	06 c0       	rjmp	.+12     	; 0x120 <Left_Tick+0x1c>
     114:	81 e0       	ldi	r24, 0x01	; 1
     116:	80 93 5a 10 	sts	0x105A, r24	; 0x80105a <LEFT>
     11a:	81 e0       	ldi	r24, 0x01	; 1
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	08 95       	ret
     120:	10 92 5a 10 	sts	0x105A, r1	; 0x80105a <LEFT>
     124:	81 e0       	ldi	r24, 0x01	; 1
     126:	90 e0       	ldi	r25, 0x00	; 0
     128:	08 95       	ret

0000012a <Right_Tick>:
     12a:	82 30       	cpi	r24, 0x02	; 2
     12c:	91 05       	cpc	r25, r1
     12e:	18 f0       	brcs	.+6      	; 0x136 <Right_Tick+0xc>
     130:	81 30       	cpi	r24, 0x01	; 1
     132:	91 05       	cpc	r25, r1
     134:	61 f4       	brne	.+24     	; 0x14e <Right_Tick+0x24>
     136:	00 99       	sbic	0x00, 0	; 0
     138:	06 c0       	rjmp	.+12     	; 0x146 <Right_Tick+0x1c>
     13a:	81 e0       	ldi	r24, 0x01	; 1
     13c:	80 93 59 10 	sts	0x1059, r24	; 0x801059 <RIGHT>
     140:	81 e0       	ldi	r24, 0x01	; 1
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	08 95       	ret
     146:	10 92 59 10 	sts	0x1059, r1	; 0x801059 <RIGHT>
     14a:	81 e0       	ldi	r24, 0x01	; 1
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	08 95       	ret

00000150 <Up_Tick>:
     150:	82 30       	cpi	r24, 0x02	; 2
     152:	91 05       	cpc	r25, r1
     154:	18 f0       	brcs	.+6      	; 0x15c <Up_Tick+0xc>
     156:	81 30       	cpi	r24, 0x01	; 1
     158:	91 05       	cpc	r25, r1
     15a:	61 f4       	brne	.+24     	; 0x174 <Up_Tick+0x24>
     15c:	01 99       	sbic	0x00, 1	; 0
     15e:	06 c0       	rjmp	.+12     	; 0x16c <Up_Tick+0x1c>
     160:	81 e0       	ldi	r24, 0x01	; 1
     162:	80 93 58 10 	sts	0x1058, r24	; 0x801058 <UP>
     166:	81 e0       	ldi	r24, 0x01	; 1
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	08 95       	ret
     16c:	10 92 58 10 	sts	0x1058, r1	; 0x801058 <UP>
     170:	81 e0       	ldi	r24, 0x01	; 1
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	08 95       	ret

00000176 <Down_Tick>:
     176:	82 30       	cpi	r24, 0x02	; 2
     178:	91 05       	cpc	r25, r1
     17a:	18 f0       	brcs	.+6      	; 0x182 <Down_Tick+0xc>
     17c:	81 30       	cpi	r24, 0x01	; 1
     17e:	91 05       	cpc	r25, r1
     180:	61 f4       	brne	.+24     	; 0x19a <Down_Tick+0x24>
     182:	02 99       	sbic	0x00, 2	; 0
     184:	06 c0       	rjmp	.+12     	; 0x192 <Down_Tick+0x1c>
     186:	81 e0       	ldi	r24, 0x01	; 1
     188:	80 93 57 10 	sts	0x1057, r24	; 0x801057 <DOWN>
     18c:	81 e0       	ldi	r24, 0x01	; 1
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	08 95       	ret
     192:	10 92 57 10 	sts	0x1057, r1	; 0x801057 <DOWN>
     196:	81 e0       	ldi	r24, 0x01	; 1
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	08 95       	ret

0000019c <Player_Tick>:
     19c:	82 30       	cpi	r24, 0x02	; 2
     19e:	91 05       	cpc	r25, r1
     1a0:	20 f0       	brcs	.+8      	; 0x1aa <Player_Tick+0xe>
     1a2:	81 30       	cpi	r24, 0x01	; 1
     1a4:	91 05       	cpc	r25, r1
     1a6:	09 f0       	breq	.+2      	; 0x1aa <Player_Tick+0xe>
     1a8:	4d c0       	rjmp	.+154    	; 0x244 <Player_Tick+0xa8>
     1aa:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <LEFT>
     1ae:	88 23       	and	r24, r24
     1b0:	91 f0       	breq	.+36     	; 0x1d6 <Player_Tick+0x3a>
     1b2:	80 91 59 10 	lds	r24, 0x1059	; 0x801059 <RIGHT>
     1b6:	81 11       	cpse	r24, r1
     1b8:	38 c0       	rjmp	.+112    	; 0x22a <Player_Tick+0x8e>
     1ba:	80 91 58 10 	lds	r24, 0x1058	; 0x801058 <UP>
     1be:	81 11       	cpse	r24, r1
     1c0:	34 c0       	rjmp	.+104    	; 0x22a <Player_Tick+0x8e>
     1c2:	80 91 57 10 	lds	r24, 0x1057	; 0x801057 <DOWN>
     1c6:	81 11       	cpse	r24, r1
     1c8:	30 c0       	rjmp	.+96     	; 0x22a <Player_Tick+0x8e>
     1ca:	88 e0       	ldi	r24, 0x08	; 8
     1cc:	80 93 54 10 	sts	0x1054, r24	; 0x801054 <player_button_press>
     1d0:	81 e0       	ldi	r24, 0x01	; 1
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	08 95       	ret
     1d6:	80 91 59 10 	lds	r24, 0x1059	; 0x801059 <RIGHT>
     1da:	81 11       	cpse	r24, r1
     1dc:	30 c0       	rjmp	.+96     	; 0x23e <Player_Tick+0xa2>
     1de:	80 91 58 10 	lds	r24, 0x1058	; 0x801058 <UP>
     1e2:	81 11       	cpse	r24, r1
     1e4:	27 c0       	rjmp	.+78     	; 0x234 <Player_Tick+0x98>
     1e6:	80 91 57 10 	lds	r24, 0x1057	; 0x801057 <DOWN>
     1ea:	88 23       	and	r24, r24
     1ec:	19 f1       	breq	.+70     	; 0x234 <Player_Tick+0x98>
     1ee:	84 e0       	ldi	r24, 0x04	; 4
     1f0:	80 93 54 10 	sts	0x1054, r24	; 0x801054 <player_button_press>
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	08 95       	ret
     1fa:	80 91 57 10 	lds	r24, 0x1057	; 0x801057 <DOWN>
     1fe:	81 11       	cpse	r24, r1
     200:	14 c0       	rjmp	.+40     	; 0x22a <Player_Tick+0x8e>
     202:	82 e0       	ldi	r24, 0x02	; 2
     204:	80 93 54 10 	sts	0x1054, r24	; 0x801054 <player_button_press>
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	08 95       	ret
     20e:	80 91 58 10 	lds	r24, 0x1058	; 0x801058 <UP>
     212:	81 11       	cpse	r24, r1
     214:	0a c0       	rjmp	.+20     	; 0x22a <Player_Tick+0x8e>
     216:	80 91 57 10 	lds	r24, 0x1057	; 0x801057 <DOWN>
     21a:	81 11       	cpse	r24, r1
     21c:	06 c0       	rjmp	.+12     	; 0x22a <Player_Tick+0x8e>
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	80 93 54 10 	sts	0x1054, r24	; 0x801054 <player_button_press>
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	08 95       	ret
     22a:	10 92 54 10 	sts	0x1054, r1	; 0x801054 <player_button_press>
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	08 95       	ret
     234:	80 91 58 10 	lds	r24, 0x1058	; 0x801058 <UP>
     238:	81 11       	cpse	r24, r1
     23a:	df cf       	rjmp	.-66     	; 0x1fa <Player_Tick+0x5e>
     23c:	f6 cf       	rjmp	.-20     	; 0x22a <Player_Tick+0x8e>
     23e:	81 11       	cpse	r24, r1
     240:	e6 cf       	rjmp	.-52     	; 0x20e <Player_Tick+0x72>
     242:	f3 cf       	rjmp	.-26     	; 0x22a <Player_Tick+0x8e>
     244:	08 95       	ret

00000246 <delay_ms>:
     246:	18 16       	cp	r1, r24
     248:	19 06       	cpc	r1, r25
     24a:	5c f0       	brlt	.+22     	; 0x262 <delay_ms+0x1c>
     24c:	08 95       	ret
     24e:	00 00       	nop
     250:	21 50       	subi	r18, 0x01	; 1
     252:	31 09       	sbc	r19, r1
     254:	e1 f7       	brne	.-8      	; 0x24e <delay_ms+0x8>
     256:	4f 5f       	subi	r20, 0xFF	; 255
     258:	5f 4f       	sbci	r21, 0xFF	; 255
     25a:	84 17       	cp	r24, r20
     25c:	95 07       	cpc	r25, r21
     25e:	19 f4       	brne	.+6      	; 0x266 <delay_ms+0x20>
     260:	08 95       	ret
     262:	40 e0       	ldi	r20, 0x00	; 0
     264:	50 e0       	ldi	r21, 0x00	; 0
     266:	27 e0       	ldi	r18, 0x07	; 7
     268:	33 e0       	ldi	r19, 0x03	; 3
     26a:	f1 cf       	rjmp	.-30     	; 0x24e <delay_ms+0x8>

0000026c <LCD_WriteCommand>:
     26c:	28 98       	cbi	0x05, 0	; 5
     26e:	8b b9       	out	0x0b, r24	; 11
     270:	29 9a       	sbi	0x05, 1	; 5
     272:	00 00       	nop
     274:	29 98       	cbi	0x05, 1	; 5
     276:	82 e0       	ldi	r24, 0x02	; 2
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	e5 cf       	rjmp	.-54     	; 0x246 <delay_ms>
     27c:	08 95       	ret

0000027e <LCD_ClearScreen>:
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	f5 cf       	rjmp	.-22     	; 0x26c <LCD_WriteCommand>
     282:	08 95       	ret

00000284 <LCD_Cursor>:
     284:	81 31       	cpi	r24, 0x11	; 17
     286:	18 f4       	brcc	.+6      	; 0x28e <LCD_Cursor+0xa>
     288:	81 58       	subi	r24, 0x81	; 129
     28a:	f0 cf       	rjmp	.-32     	; 0x26c <LCD_WriteCommand>
     28c:	08 95       	ret
     28e:	81 55       	subi	r24, 0x51	; 81
     290:	ed cf       	rjmp	.-38     	; 0x26c <LCD_WriteCommand>
     292:	08 95       	ret

00000294 <LCD_WriteData>:
     294:	28 9a       	sbi	0x05, 0	; 5
     296:	8b b9       	out	0x0b, r24	; 11
     298:	29 9a       	sbi	0x05, 1	; 5
     29a:	00 00       	nop
     29c:	29 98       	cbi	0x05, 1	; 5
     29e:	81 e0       	ldi	r24, 0x01	; 1
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	d1 cf       	rjmp	.-94     	; 0x246 <delay_ms>
     2a4:	08 95       	ret

000002a6 <LCD_DisplayString>:
     2a6:	0f 93       	push	r16
     2a8:	1f 93       	push	r17
     2aa:	cf 93       	push	r28
     2ac:	df 93       	push	r29
     2ae:	18 2f       	mov	r17, r24
     2b0:	eb 01       	movw	r28, r22
     2b2:	e5 df       	rcall	.-54     	; 0x27e <LCD_ClearScreen>
     2b4:	88 81       	ld	r24, Y
     2b6:	88 23       	and	r24, r24
     2b8:	51 f0       	breq	.+20     	; 0x2ce <LCD_DisplayString+0x28>
     2ba:	01 e0       	ldi	r16, 0x01	; 1
     2bc:	01 0f       	add	r16, r17
     2be:	81 2f       	mov	r24, r17
     2c0:	e1 df       	rcall	.-62     	; 0x284 <LCD_Cursor>
     2c2:	89 91       	ld	r24, Y+
     2c4:	e7 df       	rcall	.-50     	; 0x294 <LCD_WriteData>
     2c6:	10 2f       	mov	r17, r16
     2c8:	88 81       	ld	r24, Y
     2ca:	81 11       	cpse	r24, r1
     2cc:	f6 cf       	rjmp	.-20     	; 0x2ba <LCD_DisplayString+0x14>
     2ce:	df 91       	pop	r29
     2d0:	cf 91       	pop	r28
     2d2:	1f 91       	pop	r17
     2d4:	0f 91       	pop	r16
     2d6:	08 95       	ret

000002d8 <LCD_Write_Single_Line>:
     2d8:	1f 93       	push	r17
     2da:	cf 93       	push	r28
     2dc:	df 93       	push	r29
     2de:	62 30       	cpi	r22, 0x02	; 2
     2e0:	71 05       	cpc	r23, r1
     2e2:	09 f4       	brne	.+2      	; 0x2e6 <LCD_Write_Single_Line+0xe>
     2e4:	80 5f       	subi	r24, 0xF0	; 240
     2e6:	fa 01       	movw	r30, r20
     2e8:	90 81       	ld	r25, Z
     2ea:	99 23       	and	r25, r25
     2ec:	51 f0       	breq	.+20     	; 0x302 <LCD_Write_Single_Line+0x2a>
     2ee:	ea 01       	movw	r28, r20
     2f0:	11 e0       	ldi	r17, 0x01	; 1
     2f2:	18 0f       	add	r17, r24
     2f4:	c7 df       	rcall	.-114    	; 0x284 <LCD_Cursor>
     2f6:	89 91       	ld	r24, Y+
     2f8:	cd df       	rcall	.-102    	; 0x294 <LCD_WriteData>
     2fa:	81 2f       	mov	r24, r17
     2fc:	98 81       	ld	r25, Y
     2fe:	91 11       	cpse	r25, r1
     300:	f7 cf       	rjmp	.-18     	; 0x2f0 <LCD_Write_Single_Line+0x18>
     302:	df 91       	pop	r29
     304:	cf 91       	pop	r28
     306:	1f 91       	pop	r17
     308:	08 95       	ret

0000030a <LCD_Custom_Character>:
     30a:	0f 93       	push	r16
     30c:	1f 93       	push	r17
     30e:	cf 93       	push	r28
     310:	df 93       	push	r29
     312:	8b 01       	movw	r16, r22
     314:	88 30       	cpi	r24, 0x08	; 8
     316:	68 f4       	brcc	.+26     	; 0x332 <LCD_Custom_Character+0x28>
     318:	88 0f       	add	r24, r24
     31a:	88 0f       	add	r24, r24
     31c:	88 0f       	add	r24, r24
     31e:	80 5c       	subi	r24, 0xC0	; 192
     320:	a5 df       	rcall	.-182    	; 0x26c <LCD_WriteCommand>
     322:	e8 01       	movw	r28, r16
     324:	08 5f       	subi	r16, 0xF8	; 248
     326:	1f 4f       	sbci	r17, 0xFF	; 255
     328:	89 91       	ld	r24, Y+
     32a:	b4 df       	rcall	.-152    	; 0x294 <LCD_WriteData>
     32c:	c0 17       	cp	r28, r16
     32e:	d1 07       	cpc	r29, r17
     330:	d9 f7       	brne	.-10     	; 0x328 <LCD_Custom_Character+0x1e>
     332:	80 e8       	ldi	r24, 0x80	; 128
     334:	9b df       	rcall	.-202    	; 0x26c <LCD_WriteCommand>
     336:	df 91       	pop	r29
     338:	cf 91       	pop	r28
     33a:	1f 91       	pop	r17
     33c:	0f 91       	pop	r16
     33e:	08 95       	ret

00000340 <LCD_init>:
     340:	84 e6       	ldi	r24, 0x64	; 100
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	80 df       	rcall	.-256    	; 0x246 <delay_ms>
     346:	88 e3       	ldi	r24, 0x38	; 56
     348:	91 df       	rcall	.-222    	; 0x26c <LCD_WriteCommand>
     34a:	86 e0       	ldi	r24, 0x06	; 6
     34c:	8f df       	rcall	.-226    	; 0x26c <LCD_WriteCommand>
     34e:	8f e0       	ldi	r24, 0x0F	; 15
     350:	8d df       	rcall	.-230    	; 0x26c <LCD_WriteCommand>
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	8b df       	rcall	.-234    	; 0x26c <LCD_WriteCommand>
     356:	8a e0       	ldi	r24, 0x0A	; 10
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	75 df       	rcall	.-278    	; 0x246 <delay_ms>
     35c:	6a ed       	ldi	r22, 0xDA	; 218
     35e:	7f e0       	ldi	r23, 0x0F	; 15
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	d3 df       	rcall	.-90     	; 0x30a <LCD_Custom_Character>
     364:	62 ed       	ldi	r22, 0xD2	; 210
     366:	7f e0       	ldi	r23, 0x0F	; 15
     368:	81 e0       	ldi	r24, 0x01	; 1
     36a:	cf df       	rcall	.-98     	; 0x30a <LCD_Custom_Character>
     36c:	6a ec       	ldi	r22, 0xCA	; 202
     36e:	7f e0       	ldi	r23, 0x0F	; 15
     370:	82 e0       	ldi	r24, 0x02	; 2
     372:	cb df       	rcall	.-106    	; 0x30a <LCD_Custom_Character>
     374:	62 ec       	ldi	r22, 0xC2	; 194
     376:	7f e0       	ldi	r23, 0x0F	; 15
     378:	84 e0       	ldi	r24, 0x04	; 4
     37a:	c7 df       	rcall	.-114    	; 0x30a <LCD_Custom_Character>
     37c:	6a eb       	ldi	r22, 0xBA	; 186
     37e:	7f e0       	ldi	r23, 0x0F	; 15
     380:	85 e0       	ldi	r24, 0x05	; 5
     382:	c3 df       	rcall	.-122    	; 0x30a <LCD_Custom_Character>
     384:	62 eb       	ldi	r22, 0xB2	; 178
     386:	7f e0       	ldi	r23, 0x0F	; 15
     388:	86 e0       	ldi	r24, 0x06	; 6
     38a:	bf cf       	rjmp	.-130    	; 0x30a <LCD_Custom_Character>
     38c:	08 95       	ret

0000038e <LCD_Game_Menu>:
     38e:	8c e0       	ldi	r24, 0x0C	; 12
     390:	6d df       	rcall	.-294    	; 0x26c <LCD_WriteCommand>
     392:	81 e0       	ldi	r24, 0x01	; 1
     394:	77 df       	rcall	.-274    	; 0x284 <LCD_Cursor>
     396:	85 e0       	ldi	r24, 0x05	; 5
     398:	7d df       	rcall	.-262    	; 0x294 <LCD_WriteData>
     39a:	86 e0       	ldi	r24, 0x06	; 6
     39c:	73 df       	rcall	.-282    	; 0x284 <LCD_Cursor>
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	79 df       	rcall	.-270    	; 0x294 <LCD_WriteData>
     3a2:	82 e0       	ldi	r24, 0x02	; 2
     3a4:	77 df       	rcall	.-274    	; 0x294 <LCD_WriteData>
     3a6:	84 e0       	ldi	r24, 0x04	; 4
     3a8:	75 df       	rcall	.-278    	; 0x294 <LCD_WriteData>
     3aa:	80 e0       	ldi	r24, 0x00	; 0
     3ac:	73 df       	rcall	.-282    	; 0x294 <LCD_WriteData>
     3ae:	80 e1       	ldi	r24, 0x10	; 16
     3b0:	69 df       	rcall	.-302    	; 0x284 <LCD_Cursor>
     3b2:	85 e0       	ldi	r24, 0x05	; 5
     3b4:	6f df       	rcall	.-290    	; 0x294 <LCD_WriteData>
     3b6:	42 ee       	ldi	r20, 0xE2	; 226
     3b8:	5f e0       	ldi	r21, 0x0F	; 15
     3ba:	62 e0       	ldi	r22, 0x02	; 2
     3bc:	70 e0       	ldi	r23, 0x00	; 0
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	8b df       	rcall	.-234    	; 0x2d8 <LCD_Write_Single_Line>
     3c2:	87 e1       	ldi	r24, 0x17	; 23
     3c4:	5f df       	rcall	.-322    	; 0x284 <LCD_Cursor>
     3c6:	86 e0       	ldi	r24, 0x06	; 6
     3c8:	65 cf       	rjmp	.-310    	; 0x294 <LCD_WriteData>
     3ca:	08 95       	ret

000003cc <LCD_Menu_Tick>:
     3cc:	0f 93       	push	r16
     3ce:	1f 93       	push	r17
     3d0:	cf 93       	push	r28
     3d2:	8f 30       	cpi	r24, 0x0F	; 15
     3d4:	91 05       	cpc	r25, r1
     3d6:	08 f0       	brcs	.+2      	; 0x3da <LCD_Menu_Tick+0xe>
     3d8:	70 c1       	rjmp	.+736    	; 0x6ba <__LOCK_REGION_LENGTH__+0x2ba>
     3da:	fc 01       	movw	r30, r24
     3dc:	ea 5b       	subi	r30, 0xBA	; 186
     3de:	ff 4f       	sbci	r31, 0xFF	; 255
     3e0:	0c 94 69 0b 	jmp	0x16d2	; 0x16d2 <__tablejump2__>
     3e4:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <LEFT>
     3e8:	88 23       	and	r24, r24
     3ea:	09 f4       	brne	.+2      	; 0x3ee <LCD_Menu_Tick+0x22>
     3ec:	70 c1       	rjmp	.+736    	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
     3ee:	80 91 59 10 	lds	r24, 0x1059	; 0x801059 <RIGHT>
     3f2:	88 23       	and	r24, r24
     3f4:	09 f4       	brne	.+2      	; 0x3f8 <LCD_Menu_Tick+0x2c>
     3f6:	6b c1       	rjmp	.+726    	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
     3f8:	80 91 57 10 	lds	r24, 0x1057	; 0x801057 <DOWN>
     3fc:	88 23       	and	r24, r24
     3fe:	09 f4       	brne	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     400:	66 c1       	rjmp	.+716    	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
     402:	80 91 58 10 	lds	r24, 0x1058	; 0x801058 <UP>
     406:	81 11       	cpse	r24, r1
     408:	ff c2       	rjmp	.+1534   	; 0xa08 <__LOCK_REGION_LENGTH__+0x608>
     40a:	61 c1       	rjmp	.+706    	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
     40c:	20 91 5a 10 	lds	r18, 0x105A	; 0x80105a <LEFT>
     410:	21 11       	cpse	r18, r1
     412:	0f c3       	rjmp	.+1566   	; 0xa32 <__LOCK_REGION_LENGTH__+0x632>
     414:	20 91 59 10 	lds	r18, 0x1059	; 0x801059 <RIGHT>
     418:	21 11       	cpse	r18, r1
     41a:	0b c3       	rjmp	.+1558   	; 0xa32 <__LOCK_REGION_LENGTH__+0x632>
     41c:	20 91 58 10 	lds	r18, 0x1058	; 0x801058 <UP>
     420:	21 11       	cpse	r18, r1
     422:	07 c3       	rjmp	.+1550   	; 0xa32 <__LOCK_REGION_LENGTH__+0x632>
     424:	20 91 57 10 	lds	r18, 0x1057	; 0x801057 <DOWN>
     428:	21 11       	cpse	r18, r1
     42a:	03 c3       	rjmp	.+1542   	; 0xa32 <__LOCK_REGION_LENGTH__+0x632>
     42c:	28 df       	rcall	.-432    	; 0x27e <LCD_ClearScreen>
     42e:	57 c1       	rjmp	.+686    	; 0x6de <__LOCK_REGION_LENGTH__+0x2de>
     430:	20 91 5a 10 	lds	r18, 0x105A	; 0x80105a <LEFT>
     434:	22 23       	and	r18, r18
     436:	71 f0       	breq	.+28     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     438:	30 91 59 10 	lds	r19, 0x1059	; 0x801059 <RIGHT>
     43c:	31 11       	cpse	r19, r1
     43e:	0a c0       	rjmp	.+20     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     440:	30 91 58 10 	lds	r19, 0x1058	; 0x801058 <UP>
     444:	31 11       	cpse	r19, r1
     446:	06 c0       	rjmp	.+12     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     448:	20 91 57 10 	lds	r18, 0x1057	; 0x801057 <DOWN>
     44c:	21 11       	cpse	r18, r1
     44e:	35 c1       	rjmp	.+618    	; 0x6ba <__LOCK_REGION_LENGTH__+0x2ba>
     450:	16 df       	rcall	.-468    	; 0x27e <LCD_ClearScreen>
     452:	3d c1       	rjmp	.+634    	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
     454:	80 91 57 10 	lds	r24, 0x1057	; 0x801057 <DOWN>
     458:	88 23       	and	r24, r24
     45a:	b1 f0       	breq	.+44     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     45c:	80 91 58 10 	lds	r24, 0x1058	; 0x801058 <UP>
     460:	81 11       	cpse	r24, r1
     462:	3d c1       	rjmp	.+634    	; 0x6de <__LOCK_REGION_LENGTH__+0x2de>
     464:	21 11       	cpse	r18, r1
     466:	3b c1       	rjmp	.+630    	; 0x6de <__LOCK_REGION_LENGTH__+0x2de>
     468:	80 91 59 10 	lds	r24, 0x1059	; 0x801059 <RIGHT>
     46c:	81 11       	cpse	r24, r1
     46e:	37 c1       	rjmp	.+622    	; 0x6de <__LOCK_REGION_LENGTH__+0x2de>
     470:	80 91 55 10 	lds	r24, 0x1055	; 0x801055 <current_song_choice>
     474:	88 23       	and	r24, r24
     476:	21 f0       	breq	.+8      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
     478:	81 e0       	ldi	r24, 0x01	; 1
     47a:	80 93 55 10 	sts	0x1055, r24	; 0x801055 <current_song_choice>
     47e:	33 c1       	rjmp	.+614    	; 0x6e6 <__LOCK_REGION_LENGTH__+0x2e6>
     480:	81 e0       	ldi	r24, 0x01	; 1
     482:	80 93 55 10 	sts	0x1055, r24	; 0x801055 <current_song_choice>
     486:	2f c1       	rjmp	.+606    	; 0x6e6 <__LOCK_REGION_LENGTH__+0x2e6>
     488:	80 91 58 10 	lds	r24, 0x1058	; 0x801058 <UP>
     48c:	88 23       	and	r24, r24
     48e:	09 f4       	brne	.+2      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     490:	cd c2       	rjmp	.+1434   	; 0xa2c <__LOCK_REGION_LENGTH__+0x62c>
     492:	21 11       	cpse	r18, r1
     494:	24 c1       	rjmp	.+584    	; 0x6de <__LOCK_REGION_LENGTH__+0x2de>
     496:	80 91 59 10 	lds	r24, 0x1059	; 0x801059 <RIGHT>
     49a:	81 11       	cpse	r24, r1
     49c:	20 c1       	rjmp	.+576    	; 0x6de <__LOCK_REGION_LENGTH__+0x2de>
     49e:	80 91 55 10 	lds	r24, 0x1055	; 0x801055 <current_song_choice>
     4a2:	88 23       	and	r24, r24
     4a4:	09 f4       	brne	.+2      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
     4a6:	26 c1       	rjmp	.+588    	; 0x6f4 <__LOCK_REGION_LENGTH__+0x2f4>
     4a8:	81 50       	subi	r24, 0x01	; 1
     4aa:	80 93 55 10 	sts	0x1055, r24	; 0x801055 <current_song_choice>
     4ae:	17 c1       	rjmp	.+558    	; 0x6de <__LOCK_REGION_LENGTH__+0x2de>
     4b0:	80 91 59 10 	lds	r24, 0x1059	; 0x801059 <RIGHT>
     4b4:	88 23       	and	r24, r24
     4b6:	09 f4       	brne	.+2      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
     4b8:	12 c1       	rjmp	.+548    	; 0x6de <__LOCK_REGION_LENGTH__+0x2de>
     4ba:	80 91 55 10 	lds	r24, 0x1055	; 0x801055 <current_song_choice>
     4be:	88 23       	and	r24, r24
     4c0:	09 f4       	brne	.+2      	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
     4c2:	a5 c2       	rjmp	.+1354   	; 0xa0e <__LOCK_REGION_LENGTH__+0x60e>
     4c4:	85 e0       	ldi	r24, 0x05	; 5
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	b4 c2       	rjmp	.+1384   	; 0xa32 <__LOCK_REGION_LENGTH__+0x632>
     4ca:	20 91 5a 10 	lds	r18, 0x105A	; 0x80105a <LEFT>
     4ce:	21 11       	cpse	r18, r1
     4d0:	b0 c2       	rjmp	.+1376   	; 0xa32 <__LOCK_REGION_LENGTH__+0x632>
     4d2:	20 91 59 10 	lds	r18, 0x1059	; 0x801059 <RIGHT>
     4d6:	21 11       	cpse	r18, r1
     4d8:	ac c2       	rjmp	.+1368   	; 0xa32 <__LOCK_REGION_LENGTH__+0x632>
     4da:	20 91 58 10 	lds	r18, 0x1058	; 0x801058 <UP>
     4de:	21 11       	cpse	r18, r1
     4e0:	a8 c2       	rjmp	.+1360   	; 0xa32 <__LOCK_REGION_LENGTH__+0x632>
     4e2:	20 91 57 10 	lds	r18, 0x1057	; 0x801057 <DOWN>
     4e6:	21 11       	cpse	r18, r1
     4e8:	a4 c2       	rjmp	.+1352   	; 0xa32 <__LOCK_REGION_LENGTH__+0x632>
     4ea:	c9 de       	rcall	.-622    	; 0x27e <LCD_ClearScreen>
     4ec:	7c c1       	rjmp	.+760    	; 0x7e6 <__LOCK_REGION_LENGTH__+0x3e6>
     4ee:	20 91 5a 10 	lds	r18, 0x105A	; 0x80105a <LEFT>
     4f2:	21 11       	cpse	r18, r1
     4f4:	9e c2       	rjmp	.+1340   	; 0xa32 <__LOCK_REGION_LENGTH__+0x632>
     4f6:	20 91 59 10 	lds	r18, 0x1059	; 0x801059 <RIGHT>
     4fa:	21 11       	cpse	r18, r1
     4fc:	9a c2       	rjmp	.+1332   	; 0xa32 <__LOCK_REGION_LENGTH__+0x632>
     4fe:	20 91 58 10 	lds	r18, 0x1058	; 0x801058 <UP>
     502:	21 11       	cpse	r18, r1
     504:	96 c2       	rjmp	.+1324   	; 0xa32 <__LOCK_REGION_LENGTH__+0x632>
     506:	20 91 57 10 	lds	r18, 0x1057	; 0x801057 <DOWN>
     50a:	21 11       	cpse	r18, r1
     50c:	92 c2       	rjmp	.+1316   	; 0xa32 <__LOCK_REGION_LENGTH__+0x632>
     50e:	b7 de       	rcall	.-658    	; 0x27e <LCD_ClearScreen>
     510:	08 c1       	rjmp	.+528    	; 0x722 <__LOCK_REGION_LENGTH__+0x322>
     512:	20 91 5a 10 	lds	r18, 0x105A	; 0x80105a <LEFT>
     516:	21 11       	cpse	r18, r1
     518:	8c c2       	rjmp	.+1304   	; 0xa32 <__LOCK_REGION_LENGTH__+0x632>
     51a:	20 91 59 10 	lds	r18, 0x1059	; 0x801059 <RIGHT>
     51e:	21 11       	cpse	r18, r1
     520:	88 c2       	rjmp	.+1296   	; 0xa32 <__LOCK_REGION_LENGTH__+0x632>
     522:	20 91 58 10 	lds	r18, 0x1058	; 0x801058 <UP>
     526:	21 11       	cpse	r18, r1
     528:	84 c2       	rjmp	.+1288   	; 0xa32 <__LOCK_REGION_LENGTH__+0x632>
     52a:	20 91 57 10 	lds	r18, 0x1057	; 0x801057 <DOWN>
     52e:	21 11       	cpse	r18, r1
     530:	80 c2       	rjmp	.+1280   	; 0xa32 <__LOCK_REGION_LENGTH__+0x632>
     532:	a5 de       	rcall	.-694    	; 0x27e <LCD_ClearScreen>
     534:	d4 c0       	rjmp	.+424    	; 0x6de <__LOCK_REGION_LENGTH__+0x2de>
     536:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <LEFT>
     53a:	88 23       	and	r24, r24
     53c:	79 f0       	breq	.+30     	; 0x55c <__LOCK_REGION_LENGTH__+0x15c>
     53e:	80 91 59 10 	lds	r24, 0x1059	; 0x801059 <RIGHT>
     542:	81 11       	cpse	r24, r1
     544:	ee c0       	rjmp	.+476    	; 0x722 <__LOCK_REGION_LENGTH__+0x322>
     546:	80 91 58 10 	lds	r24, 0x1058	; 0x801058 <UP>
     54a:	81 11       	cpse	r24, r1
     54c:	ea c0       	rjmp	.+468    	; 0x722 <__LOCK_REGION_LENGTH__+0x322>
     54e:	80 91 57 10 	lds	r24, 0x1057	; 0x801057 <DOWN>
     552:	81 11       	cpse	r24, r1
     554:	e6 c0       	rjmp	.+460    	; 0x722 <__LOCK_REGION_LENGTH__+0x322>
     556:	86 e0       	ldi	r24, 0x06	; 6
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	6b c2       	rjmp	.+1238   	; 0xa32 <__LOCK_REGION_LENGTH__+0x632>
     55c:	80 91 59 10 	lds	r24, 0x1059	; 0x801059 <RIGHT>
     560:	88 23       	and	r24, r24
     562:	09 f4       	brne	.+2      	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
     564:	de c0       	rjmp	.+444    	; 0x722 <__LOCK_REGION_LENGTH__+0x322>
     566:	80 91 58 10 	lds	r24, 0x1058	; 0x801058 <UP>
     56a:	81 11       	cpse	r24, r1
     56c:	da c0       	rjmp	.+436    	; 0x722 <__LOCK_REGION_LENGTH__+0x322>
     56e:	80 91 57 10 	lds	r24, 0x1057	; 0x801057 <DOWN>
     572:	81 11       	cpse	r24, r1
     574:	d6 c0       	rjmp	.+428    	; 0x722 <__LOCK_REGION_LENGTH__+0x322>
     576:	83 de       	rcall	.-762    	; 0x27e <LCD_ClearScreen>
     578:	89 e0       	ldi	r24, 0x09	; 9
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	5a c2       	rjmp	.+1204   	; 0xa32 <__LOCK_REGION_LENGTH__+0x632>
     57e:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <LEFT>
     582:	88 23       	and	r24, r24
     584:	79 f0       	breq	.+30     	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     586:	80 91 59 10 	lds	r24, 0x1059	; 0x801059 <RIGHT>
     58a:	81 11       	cpse	r24, r1
     58c:	2c c1       	rjmp	.+600    	; 0x7e6 <__LOCK_REGION_LENGTH__+0x3e6>
     58e:	80 91 58 10 	lds	r24, 0x1058	; 0x801058 <UP>
     592:	81 11       	cpse	r24, r1
     594:	28 c1       	rjmp	.+592    	; 0x7e6 <__LOCK_REGION_LENGTH__+0x3e6>
     596:	80 91 57 10 	lds	r24, 0x1057	; 0x801057 <DOWN>
     59a:	81 11       	cpse	r24, r1
     59c:	24 c1       	rjmp	.+584    	; 0x7e6 <__LOCK_REGION_LENGTH__+0x3e6>
     59e:	86 e0       	ldi	r24, 0x06	; 6
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	47 c2       	rjmp	.+1166   	; 0xa32 <__LOCK_REGION_LENGTH__+0x632>
     5a4:	80 91 59 10 	lds	r24, 0x1059	; 0x801059 <RIGHT>
     5a8:	88 23       	and	r24, r24
     5aa:	09 f4       	brne	.+2      	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
     5ac:	1c c1       	rjmp	.+568    	; 0x7e6 <__LOCK_REGION_LENGTH__+0x3e6>
     5ae:	80 91 58 10 	lds	r24, 0x1058	; 0x801058 <UP>
     5b2:	81 11       	cpse	r24, r1
     5b4:	18 c1       	rjmp	.+560    	; 0x7e6 <__LOCK_REGION_LENGTH__+0x3e6>
     5b6:	80 91 57 10 	lds	r24, 0x1057	; 0x801057 <DOWN>
     5ba:	81 11       	cpse	r24, r1
     5bc:	14 c1       	rjmp	.+552    	; 0x7e6 <__LOCK_REGION_LENGTH__+0x3e6>
     5be:	5f de       	rcall	.-834    	; 0x27e <LCD_ClearScreen>
     5c0:	89 e0       	ldi	r24, 0x09	; 9
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	36 c2       	rjmp	.+1132   	; 0xa32 <__LOCK_REGION_LENGTH__+0x632>
     5c6:	20 91 5a 10 	lds	r18, 0x105A	; 0x80105a <LEFT>
     5ca:	21 11       	cpse	r18, r1
     5cc:	32 c2       	rjmp	.+1124   	; 0xa32 <__LOCK_REGION_LENGTH__+0x632>
     5ce:	20 91 59 10 	lds	r18, 0x1059	; 0x801059 <RIGHT>
     5d2:	21 11       	cpse	r18, r1
     5d4:	2e c2       	rjmp	.+1116   	; 0xa32 <__LOCK_REGION_LENGTH__+0x632>
     5d6:	20 91 58 10 	lds	r18, 0x1058	; 0x801058 <UP>
     5da:	21 11       	cpse	r18, r1
     5dc:	2a c2       	rjmp	.+1108   	; 0xa32 <__LOCK_REGION_LENGTH__+0x632>
     5de:	20 91 57 10 	lds	r18, 0x1057	; 0x801057 <DOWN>
     5e2:	21 11       	cpse	r18, r1
     5e4:	26 c2       	rjmp	.+1100   	; 0xa32 <__LOCK_REGION_LENGTH__+0x632>
     5e6:	61 c1       	rjmp	.+706    	; 0x8aa <__LOCK_REGION_LENGTH__+0x4aa>
     5e8:	80 91 43 10 	lds	r24, 0x1043	; 0x801043 <count_down.2271>
     5ec:	89 31       	cpi	r24, 0x19	; 25
     5ee:	20 f4       	brcc	.+8      	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
     5f0:	8f 5f       	subi	r24, 0xFF	; 255
     5f2:	80 93 43 10 	sts	0x1043, r24	; 0x801043 <count_down.2271>
     5f6:	59 c1       	rjmp	.+690    	; 0x8aa <__LOCK_REGION_LENGTH__+0x4aa>
     5f8:	10 92 43 10 	sts	0x1043, r1	; 0x801043 <count_down.2271>
     5fc:	81 e0       	ldi	r24, 0x01	; 1
     5fe:	80 93 48 10 	sts	0x1048, r24	; 0x801048 <playing>
     602:	68 c1       	rjmp	.+720    	; 0x8d4 <__LOCK_REGION_LENGTH__+0x4d4>
     604:	80 91 4a 10 	lds	r24, 0x104A	; 0x80104a <song_finished>
     608:	88 23       	and	r24, r24
     60a:	09 f4       	brne	.+2      	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
     60c:	63 c1       	rjmp	.+710    	; 0x8d4 <__LOCK_REGION_LENGTH__+0x4d4>
     60e:	80 91 48 10 	lds	r24, 0x1048	; 0x801048 <playing>
     612:	81 11       	cpse	r24, r1
     614:	5f c1       	rjmp	.+702    	; 0x8d4 <__LOCK_REGION_LENGTH__+0x4d4>
     616:	99 c1       	rjmp	.+818    	; 0x94a <__LOCK_REGION_LENGTH__+0x54a>
     618:	20 91 55 10 	lds	r18, 0x1055	; 0x801055 <current_song_choice>
     61c:	82 ed       	ldi	r24, 0xD2	; 210
     61e:	97 e0       	ldi	r25, 0x07	; 7
     620:	28 9f       	mul	r18, r24
     622:	f0 01       	movw	r30, r0
     624:	29 9f       	mul	r18, r25
     626:	f0 0d       	add	r31, r0
     628:	11 24       	eor	r1, r1
     62a:	e0 57       	subi	r30, 0x70	; 112
     62c:	f7 4e       	sbci	r31, 0xE7	; 231
     62e:	90 81       	ld	r25, Z
     630:	80 91 53 10 	lds	r24, 0x1053	; 0x801053 <current_score>
     634:	98 17       	cp	r25, r24
     636:	30 f4       	brcc	.+12     	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
     638:	10 92 4a 10 	sts	0x104A, r1	; 0x80104a <song_finished>
     63c:	10 92 49 10 	sts	0x1049, r1	; 0x801049 <score_increase>
     640:	1e de       	rcall	.-964    	; 0x27e <LCD_ClearScreen>
     642:	8c c1       	rjmp	.+792    	; 0x95c <__LOCK_REGION_LENGTH__+0x55c>
     644:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <LEFT>
     648:	81 11       	cpse	r24, r1
     64a:	0d c0       	rjmp	.+26     	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
     64c:	80 91 59 10 	lds	r24, 0x1059	; 0x801059 <RIGHT>
     650:	81 11       	cpse	r24, r1
     652:	09 c0       	rjmp	.+18     	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
     654:	80 91 58 10 	lds	r24, 0x1058	; 0x801058 <UP>
     658:	81 11       	cpse	r24, r1
     65a:	05 c0       	rjmp	.+10     	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
     65c:	80 91 57 10 	lds	r24, 0x1057	; 0x801057 <DOWN>
     660:	88 23       	and	r24, r24
     662:	09 f4       	brne	.+2      	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
     664:	72 c1       	rjmp	.+740    	; 0x94a <__LOCK_REGION_LENGTH__+0x54a>
     666:	10 92 4a 10 	sts	0x104A, r1	; 0x80104a <song_finished>
     66a:	10 92 49 10 	sts	0x1049, r1	; 0x801049 <score_increase>
     66e:	8e e0       	ldi	r24, 0x0E	; 14
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	df c1       	rjmp	.+958    	; 0xa32 <__LOCK_REGION_LENGTH__+0x632>
     674:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <LEFT>
     678:	81 11       	cpse	r24, r1
     67a:	cc c1       	rjmp	.+920    	; 0xa14 <__LOCK_REGION_LENGTH__+0x614>
     67c:	80 91 59 10 	lds	r24, 0x1059	; 0x801059 <RIGHT>
     680:	81 11       	cpse	r24, r1
     682:	cb c1       	rjmp	.+918    	; 0xa1a <__LOCK_REGION_LENGTH__+0x61a>
     684:	80 91 58 10 	lds	r24, 0x1058	; 0x801058 <UP>
     688:	81 11       	cpse	r24, r1
     68a:	ca c1       	rjmp	.+916    	; 0xa20 <__LOCK_REGION_LENGTH__+0x620>
     68c:	80 91 57 10 	lds	r24, 0x1057	; 0x801057 <DOWN>
     690:	81 11       	cpse	r24, r1
     692:	c9 c1       	rjmp	.+914    	; 0xa26 <__LOCK_REGION_LENGTH__+0x626>
     694:	63 c1       	rjmp	.+710    	; 0x95c <__LOCK_REGION_LENGTH__+0x55c>
     696:	20 91 5a 10 	lds	r18, 0x105A	; 0x80105a <LEFT>
     69a:	21 11       	cpse	r18, r1
     69c:	ca c1       	rjmp	.+916    	; 0xa32 <__LOCK_REGION_LENGTH__+0x632>
     69e:	20 91 59 10 	lds	r18, 0x1059	; 0x801059 <RIGHT>
     6a2:	21 11       	cpse	r18, r1
     6a4:	c6 c1       	rjmp	.+908    	; 0xa32 <__LOCK_REGION_LENGTH__+0x632>
     6a6:	20 91 58 10 	lds	r18, 0x1058	; 0x801058 <UP>
     6aa:	21 11       	cpse	r18, r1
     6ac:	c2 c1       	rjmp	.+900    	; 0xa32 <__LOCK_REGION_LENGTH__+0x632>
     6ae:	20 91 57 10 	lds	r18, 0x1057	; 0x801057 <DOWN>
     6b2:	21 11       	cpse	r18, r1
     6b4:	be c1       	rjmp	.+892    	; 0xa32 <__LOCK_REGION_LENGTH__+0x632>
     6b6:	e3 dd       	rcall	.-1082   	; 0x27e <LCD_ClearScreen>
     6b8:	0a c0       	rjmp	.+20     	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
     6ba:	fc 01       	movw	r30, r24
     6bc:	31 97       	sbiw	r30, 0x01	; 1
     6be:	ed 30       	cpi	r30, 0x0D	; 13
     6c0:	f1 05       	cpc	r31, r1
     6c2:	08 f0       	brcs	.+2      	; 0x6c6 <__LOCK_REGION_LENGTH__+0x2c6>
     6c4:	b6 c1       	rjmp	.+876    	; 0xa32 <__LOCK_REGION_LENGTH__+0x632>
     6c6:	eb 5a       	subi	r30, 0xAB	; 171
     6c8:	ff 4f       	sbci	r31, 0xFF	; 255
     6ca:	0c 94 69 0b 	jmp	0x16d2	; 0x16d2 <__tablejump2__>
     6ce:	10 92 55 10 	sts	0x1055, r1	; 0x801055 <current_song_choice>
     6d2:	10 92 53 10 	sts	0x1053, r1	; 0x801053 <current_score>
     6d6:	5b de       	rcall	.-842    	; 0x38e <LCD_Game_Menu>
     6d8:	81 e0       	ldi	r24, 0x01	; 1
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	aa c1       	rjmp	.+852    	; 0xa32 <__LOCK_REGION_LENGTH__+0x632>
     6de:	80 91 55 10 	lds	r24, 0x1055	; 0x801055 <current_song_choice>
     6e2:	88 23       	and	r24, r24
     6e4:	39 f0       	breq	.+14     	; 0x6f4 <__LOCK_REGION_LENGTH__+0x2f4>
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	cd dd       	rcall	.-1126   	; 0x284 <LCD_Cursor>
     6ea:	80 e2       	ldi	r24, 0x20	; 32
     6ec:	d3 dd       	rcall	.-1114   	; 0x294 <LCD_WriteData>
     6ee:	81 e1       	ldi	r24, 0x11	; 17
     6f0:	c9 dd       	rcall	.-1134   	; 0x284 <LCD_Cursor>
     6f2:	06 c0       	rjmp	.+12     	; 0x700 <__LOCK_REGION_LENGTH__+0x300>
     6f4:	81 e1       	ldi	r24, 0x11	; 17
     6f6:	c6 dd       	rcall	.-1140   	; 0x284 <LCD_Cursor>
     6f8:	80 e2       	ldi	r24, 0x20	; 32
     6fa:	cc dd       	rcall	.-1128   	; 0x294 <LCD_WriteData>
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	c2 dd       	rcall	.-1148   	; 0x284 <LCD_Cursor>
     700:	85 ea       	ldi	r24, 0xA5	; 165
     702:	c8 dd       	rcall	.-1136   	; 0x294 <LCD_WriteData>
     704:	43 ef       	ldi	r20, 0xF3	; 243
     706:	5f e0       	ldi	r21, 0x0F	; 15
     708:	61 e0       	ldi	r22, 0x01	; 1
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	82 e0       	ldi	r24, 0x02	; 2
     70e:	e4 dd       	rcall	.-1080   	; 0x2d8 <LCD_Write_Single_Line>
     710:	41 e0       	ldi	r20, 0x01	; 1
     712:	50 e1       	ldi	r21, 0x10	; 16
     714:	62 e0       	ldi	r22, 0x02	; 2
     716:	70 e0       	ldi	r23, 0x00	; 0
     718:	82 e0       	ldi	r24, 0x02	; 2
     71a:	de dd       	rcall	.-1092   	; 0x2d8 <LCD_Write_Single_Line>
     71c:	83 e0       	ldi	r24, 0x03	; 3
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	88 c1       	rjmp	.+784    	; 0xa32 <__LOCK_REGION_LENGTH__+0x632>
     722:	45 e0       	ldi	r20, 0x05	; 5
     724:	50 e1       	ldi	r21, 0x10	; 16
     726:	61 e0       	ldi	r22, 0x01	; 1
     728:	70 e0       	ldi	r23, 0x00	; 0
     72a:	81 e0       	ldi	r24, 0x01	; 1
     72c:	d5 dd       	rcall	.-1110   	; 0x2d8 <LCD_Write_Single_Line>
     72e:	87 e0       	ldi	r24, 0x07	; 7
     730:	a9 dd       	rcall	.-1198   	; 0x284 <LCD_Cursor>
     732:	80 e0       	ldi	r24, 0x00	; 0
     734:	af dd       	rcall	.-1186   	; 0x294 <LCD_WriteData>
     736:	45 e1       	ldi	r20, 0x15	; 21
     738:	50 e1       	ldi	r21, 0x10	; 16
     73a:	62 e0       	ldi	r22, 0x02	; 2
     73c:	70 e0       	ldi	r23, 0x00	; 0
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	cb dd       	rcall	.-1130   	; 0x2d8 <LCD_Write_Single_Line>
     742:	8c e1       	ldi	r24, 0x1C	; 28
     744:	9f dd       	rcall	.-1218   	; 0x284 <LCD_Cursor>
     746:	80 91 55 10 	lds	r24, 0x1055	; 0x801055 <current_song_choice>
     74a:	02 ed       	ldi	r16, 0xD2	; 210
     74c:	17 e0       	ldi	r17, 0x07	; 7
     74e:	80 9f       	mul	r24, r16
     750:	f0 01       	movw	r30, r0
     752:	81 9f       	mul	r24, r17
     754:	f0 0d       	add	r31, r0
     756:	11 24       	eor	r1, r1
     758:	e0 57       	subi	r30, 0x70	; 112
     75a:	f7 4e       	sbci	r31, 0xE7	; 231
     75c:	80 81       	ld	r24, Z
     75e:	99 e2       	ldi	r25, 0x29	; 41
     760:	89 9f       	mul	r24, r25
     762:	81 2d       	mov	r24, r1
     764:	11 24       	eor	r1, r1
     766:	cd ec       	ldi	r28, 0xCD	; 205
     768:	82 95       	swap	r24
     76a:	8f 70       	andi	r24, 0x0F	; 15
     76c:	80 5d       	subi	r24, 0xD0	; 208
     76e:	92 dd       	rcall	.-1244   	; 0x294 <LCD_WriteData>
     770:	80 91 55 10 	lds	r24, 0x1055	; 0x801055 <current_song_choice>
     774:	80 9f       	mul	r24, r16
     776:	f0 01       	movw	r30, r0
     778:	81 9f       	mul	r24, r17
     77a:	f0 0d       	add	r31, r0
     77c:	11 24       	eor	r1, r1
     77e:	e0 57       	subi	r30, 0x70	; 112
     780:	f7 4e       	sbci	r31, 0xE7	; 231
     782:	80 81       	ld	r24, Z
     784:	8c 9f       	mul	r24, r28
     786:	81 2d       	mov	r24, r1
     788:	11 24       	eor	r1, r1
     78a:	86 95       	lsr	r24
     78c:	86 95       	lsr	r24
     78e:	86 95       	lsr	r24
     790:	8c 9f       	mul	r24, r28
     792:	91 2d       	mov	r25, r1
     794:	11 24       	eor	r1, r1
     796:	96 95       	lsr	r25
     798:	96 95       	lsr	r25
     79a:	96 95       	lsr	r25
     79c:	99 0f       	add	r25, r25
     79e:	29 2f       	mov	r18, r25
     7a0:	22 0f       	add	r18, r18
     7a2:	22 0f       	add	r18, r18
     7a4:	92 0f       	add	r25, r18
     7a6:	89 1b       	sub	r24, r25
     7a8:	80 5d       	subi	r24, 0xD0	; 208
     7aa:	74 dd       	rcall	.-1304   	; 0x294 <LCD_WriteData>
     7ac:	80 91 55 10 	lds	r24, 0x1055	; 0x801055 <current_song_choice>
     7b0:	80 9f       	mul	r24, r16
     7b2:	f0 01       	movw	r30, r0
     7b4:	81 9f       	mul	r24, r17
     7b6:	f0 0d       	add	r31, r0
     7b8:	11 24       	eor	r1, r1
     7ba:	e0 57       	subi	r30, 0x70	; 112
     7bc:	f7 4e       	sbci	r31, 0xE7	; 231
     7be:	80 81       	ld	r24, Z
     7c0:	8c 9f       	mul	r24, r28
     7c2:	c1 2d       	mov	r28, r1
     7c4:	11 24       	eor	r1, r1
     7c6:	c6 95       	lsr	r28
     7c8:	c6 95       	lsr	r28
     7ca:	c6 95       	lsr	r28
     7cc:	cc 0f       	add	r28, r28
     7ce:	9c 2f       	mov	r25, r28
     7d0:	99 0f       	add	r25, r25
     7d2:	99 0f       	add	r25, r25
     7d4:	c9 0f       	add	r28, r25
     7d6:	8c 1b       	sub	r24, r28
     7d8:	80 5d       	subi	r24, 0xD0	; 208
     7da:	5c dd       	rcall	.-1352   	; 0x294 <LCD_WriteData>
     7dc:	81 e2       	ldi	r24, 0x21	; 33
     7de:	52 dd       	rcall	.-1372   	; 0x284 <LCD_Cursor>
     7e0:	87 e0       	ldi	r24, 0x07	; 7
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	26 c1       	rjmp	.+588    	; 0xa32 <__LOCK_REGION_LENGTH__+0x632>
     7e6:	45 e0       	ldi	r20, 0x05	; 5
     7e8:	50 e1       	ldi	r21, 0x10	; 16
     7ea:	61 e0       	ldi	r22, 0x01	; 1
     7ec:	70 e0       	ldi	r23, 0x00	; 0
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	73 dd       	rcall	.-1306   	; 0x2d8 <LCD_Write_Single_Line>
     7f2:	87 e0       	ldi	r24, 0x07	; 7
     7f4:	47 dd       	rcall	.-1394   	; 0x284 <LCD_Cursor>
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	4d dd       	rcall	.-1382   	; 0x294 <LCD_WriteData>
     7fa:	45 e1       	ldi	r20, 0x15	; 21
     7fc:	50 e1       	ldi	r21, 0x10	; 16
     7fe:	62 e0       	ldi	r22, 0x02	; 2
     800:	70 e0       	ldi	r23, 0x00	; 0
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	69 dd       	rcall	.-1326   	; 0x2d8 <LCD_Write_Single_Line>
     806:	8c e1       	ldi	r24, 0x1C	; 28
     808:	3d dd       	rcall	.-1414   	; 0x284 <LCD_Cursor>
     80a:	80 91 55 10 	lds	r24, 0x1055	; 0x801055 <current_song_choice>
     80e:	02 ed       	ldi	r16, 0xD2	; 210
     810:	17 e0       	ldi	r17, 0x07	; 7
     812:	80 9f       	mul	r24, r16
     814:	f0 01       	movw	r30, r0
     816:	81 9f       	mul	r24, r17
     818:	f0 0d       	add	r31, r0
     81a:	11 24       	eor	r1, r1
     81c:	e0 57       	subi	r30, 0x70	; 112
     81e:	f7 4e       	sbci	r31, 0xE7	; 231
     820:	80 81       	ld	r24, Z
     822:	99 e2       	ldi	r25, 0x29	; 41
     824:	89 9f       	mul	r24, r25
     826:	81 2d       	mov	r24, r1
     828:	11 24       	eor	r1, r1
     82a:	cd ec       	ldi	r28, 0xCD	; 205
     82c:	82 95       	swap	r24
     82e:	8f 70       	andi	r24, 0x0F	; 15
     830:	80 5d       	subi	r24, 0xD0	; 208
     832:	30 dd       	rcall	.-1440   	; 0x294 <LCD_WriteData>
     834:	80 91 55 10 	lds	r24, 0x1055	; 0x801055 <current_song_choice>
     838:	80 9f       	mul	r24, r16
     83a:	f0 01       	movw	r30, r0
     83c:	81 9f       	mul	r24, r17
     83e:	f0 0d       	add	r31, r0
     840:	11 24       	eor	r1, r1
     842:	e0 57       	subi	r30, 0x70	; 112
     844:	f7 4e       	sbci	r31, 0xE7	; 231
     846:	80 81       	ld	r24, Z
     848:	8c 9f       	mul	r24, r28
     84a:	81 2d       	mov	r24, r1
     84c:	11 24       	eor	r1, r1
     84e:	86 95       	lsr	r24
     850:	86 95       	lsr	r24
     852:	86 95       	lsr	r24
     854:	8c 9f       	mul	r24, r28
     856:	91 2d       	mov	r25, r1
     858:	11 24       	eor	r1, r1
     85a:	96 95       	lsr	r25
     85c:	96 95       	lsr	r25
     85e:	96 95       	lsr	r25
     860:	99 0f       	add	r25, r25
     862:	29 2f       	mov	r18, r25
     864:	22 0f       	add	r18, r18
     866:	22 0f       	add	r18, r18
     868:	92 0f       	add	r25, r18
     86a:	89 1b       	sub	r24, r25
     86c:	80 5d       	subi	r24, 0xD0	; 208
     86e:	12 dd       	rcall	.-1500   	; 0x294 <LCD_WriteData>
     870:	80 91 55 10 	lds	r24, 0x1055	; 0x801055 <current_song_choice>
     874:	80 9f       	mul	r24, r16
     876:	f0 01       	movw	r30, r0
     878:	81 9f       	mul	r24, r17
     87a:	f0 0d       	add	r31, r0
     87c:	11 24       	eor	r1, r1
     87e:	e0 57       	subi	r30, 0x70	; 112
     880:	f7 4e       	sbci	r31, 0xE7	; 231
     882:	80 81       	ld	r24, Z
     884:	8c 9f       	mul	r24, r28
     886:	c1 2d       	mov	r28, r1
     888:	11 24       	eor	r1, r1
     88a:	c6 95       	lsr	r28
     88c:	c6 95       	lsr	r28
     88e:	c6 95       	lsr	r28
     890:	cc 0f       	add	r28, r28
     892:	9c 2f       	mov	r25, r28
     894:	99 0f       	add	r25, r25
     896:	99 0f       	add	r25, r25
     898:	c9 0f       	add	r28, r25
     89a:	8c 1b       	sub	r24, r28
     89c:	80 5d       	subi	r24, 0xD0	; 208
     89e:	fa dc       	rcall	.-1548   	; 0x294 <LCD_WriteData>
     8a0:	81 e2       	ldi	r24, 0x21	; 33
     8a2:	f0 dc       	rcall	.-1568   	; 0x284 <LCD_Cursor>
     8a4:	88 e0       	ldi	r24, 0x08	; 8
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	c4 c0       	rjmp	.+392    	; 0xa32 <__LOCK_REGION_LENGTH__+0x632>
     8aa:	6a e1       	ldi	r22, 0x1A	; 26
     8ac:	70 e1       	ldi	r23, 0x10	; 16
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	fa dc       	rcall	.-1548   	; 0x2a6 <LCD_DisplayString>
     8b2:	89 e0       	ldi	r24, 0x09	; 9
     8b4:	e7 dc       	rcall	.-1586   	; 0x284 <LCD_Cursor>
     8b6:	80 91 53 10 	lds	r24, 0x1053	; 0x801053 <current_score>
     8ba:	80 5d       	subi	r24, 0xD0	; 208
     8bc:	eb dc       	rcall	.-1578   	; 0x294 <LCD_WriteData>
     8be:	80 91 53 10 	lds	r24, 0x1053	; 0x801053 <current_score>
     8c2:	80 5d       	subi	r24, 0xD0	; 208
     8c4:	e7 dc       	rcall	.-1586   	; 0x294 <LCD_WriteData>
     8c6:	80 91 53 10 	lds	r24, 0x1053	; 0x801053 <current_score>
     8ca:	80 5d       	subi	r24, 0xD0	; 208
     8cc:	e3 dc       	rcall	.-1594   	; 0x294 <LCD_WriteData>
     8ce:	8a e0       	ldi	r24, 0x0A	; 10
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	af c0       	rjmp	.+350    	; 0xa32 <__LOCK_REGION_LENGTH__+0x632>
     8d4:	80 91 49 10 	lds	r24, 0x1049	; 0x801049 <score_increase>
     8d8:	88 23       	and	r24, r24
     8da:	09 f4       	brne	.+2      	; 0x8de <__LOCK_REGION_LENGTH__+0x4de>
     8dc:	92 c0       	rjmp	.+292    	; 0xa02 <__LOCK_REGION_LENGTH__+0x602>
     8de:	89 e0       	ldi	r24, 0x09	; 9
     8e0:	d1 dc       	rcall	.-1630   	; 0x284 <LCD_Cursor>
     8e2:	80 91 53 10 	lds	r24, 0x1053	; 0x801053 <current_score>
     8e6:	99 e2       	ldi	r25, 0x29	; 41
     8e8:	89 9f       	mul	r24, r25
     8ea:	81 2d       	mov	r24, r1
     8ec:	11 24       	eor	r1, r1
     8ee:	cd ec       	ldi	r28, 0xCD	; 205
     8f0:	82 95       	swap	r24
     8f2:	8f 70       	andi	r24, 0x0F	; 15
     8f4:	80 5d       	subi	r24, 0xD0	; 208
     8f6:	ce dc       	rcall	.-1636   	; 0x294 <LCD_WriteData>
     8f8:	80 91 53 10 	lds	r24, 0x1053	; 0x801053 <current_score>
     8fc:	8c 9f       	mul	r24, r28
     8fe:	81 2d       	mov	r24, r1
     900:	11 24       	eor	r1, r1
     902:	86 95       	lsr	r24
     904:	86 95       	lsr	r24
     906:	86 95       	lsr	r24
     908:	8c 9f       	mul	r24, r28
     90a:	91 2d       	mov	r25, r1
     90c:	11 24       	eor	r1, r1
     90e:	96 95       	lsr	r25
     910:	96 95       	lsr	r25
     912:	96 95       	lsr	r25
     914:	99 0f       	add	r25, r25
     916:	29 2f       	mov	r18, r25
     918:	22 0f       	add	r18, r18
     91a:	22 0f       	add	r18, r18
     91c:	92 0f       	add	r25, r18
     91e:	89 1b       	sub	r24, r25
     920:	80 5d       	subi	r24, 0xD0	; 208
     922:	b8 dc       	rcall	.-1680   	; 0x294 <LCD_WriteData>
     924:	80 91 53 10 	lds	r24, 0x1053	; 0x801053 <current_score>
     928:	8c 9f       	mul	r24, r28
     92a:	c1 2d       	mov	r28, r1
     92c:	11 24       	eor	r1, r1
     92e:	c6 95       	lsr	r28
     930:	c6 95       	lsr	r28
     932:	c6 95       	lsr	r28
     934:	cc 0f       	add	r28, r28
     936:	9c 2f       	mov	r25, r28
     938:	99 0f       	add	r25, r25
     93a:	99 0f       	add	r25, r25
     93c:	c9 0f       	add	r28, r25
     93e:	8c 1b       	sub	r24, r28
     940:	80 5d       	subi	r24, 0xD0	; 208
     942:	a8 dc       	rcall	.-1712   	; 0x294 <LCD_WriteData>
     944:	8b e0       	ldi	r24, 0x0B	; 11
     946:	90 e0       	ldi	r25, 0x00	; 0
     948:	74 c0       	rjmp	.+232    	; 0xa32 <__LOCK_REGION_LENGTH__+0x632>
     94a:	41 e2       	ldi	r20, 0x21	; 33
     94c:	50 e1       	ldi	r21, 0x10	; 16
     94e:	62 e0       	ldi	r22, 0x02	; 2
     950:	70 e0       	ldi	r23, 0x00	; 0
     952:	81 e0       	ldi	r24, 0x01	; 1
     954:	c1 dc       	rcall	.-1662   	; 0x2d8 <LCD_Write_Single_Line>
     956:	8c e0       	ldi	r24, 0x0C	; 12
     958:	90 e0       	ldi	r25, 0x00	; 0
     95a:	6b c0       	rjmp	.+214    	; 0xa32 <__LOCK_REGION_LENGTH__+0x632>
     95c:	6e e2       	ldi	r22, 0x2E	; 46
     95e:	70 e1       	ldi	r23, 0x10	; 16
     960:	81 e0       	ldi	r24, 0x01	; 1
     962:	a1 dc       	rcall	.-1726   	; 0x2a6 <LCD_DisplayString>
     964:	8d e0       	ldi	r24, 0x0D	; 13
     966:	8e dc       	rcall	.-1764   	; 0x284 <LCD_Cursor>
     968:	80 91 53 10 	lds	r24, 0x1053	; 0x801053 <current_score>
     96c:	99 e2       	ldi	r25, 0x29	; 41
     96e:	89 9f       	mul	r24, r25
     970:	81 2d       	mov	r24, r1
     972:	11 24       	eor	r1, r1
     974:	cd ec       	ldi	r28, 0xCD	; 205
     976:	82 95       	swap	r24
     978:	8f 70       	andi	r24, 0x0F	; 15
     97a:	80 5d       	subi	r24, 0xD0	; 208
     97c:	8b dc       	rcall	.-1770   	; 0x294 <LCD_WriteData>
     97e:	80 91 53 10 	lds	r24, 0x1053	; 0x801053 <current_score>
     982:	8c 9f       	mul	r24, r28
     984:	81 2d       	mov	r24, r1
     986:	11 24       	eor	r1, r1
     988:	86 95       	lsr	r24
     98a:	86 95       	lsr	r24
     98c:	86 95       	lsr	r24
     98e:	8c 9f       	mul	r24, r28
     990:	91 2d       	mov	r25, r1
     992:	11 24       	eor	r1, r1
     994:	96 95       	lsr	r25
     996:	96 95       	lsr	r25
     998:	96 95       	lsr	r25
     99a:	99 0f       	add	r25, r25
     99c:	29 2f       	mov	r18, r25
     99e:	22 0f       	add	r18, r18
     9a0:	22 0f       	add	r18, r18
     9a2:	92 0f       	add	r25, r18
     9a4:	89 1b       	sub	r24, r25
     9a6:	80 5d       	subi	r24, 0xD0	; 208
     9a8:	75 dc       	rcall	.-1814   	; 0x294 <LCD_WriteData>
     9aa:	80 91 53 10 	lds	r24, 0x1053	; 0x801053 <current_score>
     9ae:	8c 9f       	mul	r24, r28
     9b0:	c1 2d       	mov	r28, r1
     9b2:	11 24       	eor	r1, r1
     9b4:	c6 95       	lsr	r28
     9b6:	c6 95       	lsr	r28
     9b8:	c6 95       	lsr	r28
     9ba:	cc 0f       	add	r28, r28
     9bc:	9c 2f       	mov	r25, r28
     9be:	99 0f       	add	r25, r25
     9c0:	99 0f       	add	r25, r25
     9c2:	c9 0f       	add	r28, r25
     9c4:	8c 1b       	sub	r24, r28
     9c6:	80 5d       	subi	r24, 0xD0	; 208
     9c8:	65 dc       	rcall	.-1846   	; 0x294 <LCD_WriteData>
     9ca:	80 91 55 10 	lds	r24, 0x1055	; 0x801055 <current_song_choice>
     9ce:	60 91 53 10 	lds	r22, 0x1053	; 0x801053 <current_score>
     9d2:	22 ed       	ldi	r18, 0xD2	; 210
     9d4:	37 e0       	ldi	r19, 0x07	; 7
     9d6:	82 9f       	mul	r24, r18
     9d8:	f0 01       	movw	r30, r0
     9da:	83 9f       	mul	r24, r19
     9dc:	f0 0d       	add	r31, r0
     9de:	11 24       	eor	r1, r1
     9e0:	e0 57       	subi	r30, 0x70	; 112
     9e2:	f7 4e       	sbci	r31, 0xE7	; 231
     9e4:	60 83       	st	Z, r22
     9e6:	81 11       	cpse	r24, r1
     9e8:	06 c0       	rjmp	.+12     	; 0x9f6 <__LOCK_REGION_LENGTH__+0x5f6>
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	90 e0       	ldi	r25, 0x00	; 0
     9ee:	82 d6       	rcall	.+3332   	; 0x16f4 <eeprom_update_byte>
     9f0:	8d e0       	ldi	r24, 0x0D	; 13
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	1e c0       	rjmp	.+60     	; 0xa32 <__LOCK_REGION_LENGTH__+0x632>
     9f6:	82 e0       	ldi	r24, 0x02	; 2
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	7c d6       	rcall	.+3320   	; 0x16f4 <eeprom_update_byte>
     9fc:	8d e0       	ldi	r24, 0x0D	; 13
     9fe:	90 e0       	ldi	r25, 0x00	; 0
     a00:	18 c0       	rjmp	.+48     	; 0xa32 <__LOCK_REGION_LENGTH__+0x632>
     a02:	8b e0       	ldi	r24, 0x0B	; 11
     a04:	90 e0       	ldi	r25, 0x00	; 0
     a06:	15 c0       	rjmp	.+42     	; 0xa32 <__LOCK_REGION_LENGTH__+0x632>
     a08:	82 e0       	ldi	r24, 0x02	; 2
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__LOCK_REGION_LENGTH__+0x632>
     a0e:	84 e0       	ldi	r24, 0x04	; 4
     a10:	90 e0       	ldi	r25, 0x00	; 0
     a12:	0f c0       	rjmp	.+30     	; 0xa32 <__LOCK_REGION_LENGTH__+0x632>
     a14:	8e e0       	ldi	r24, 0x0E	; 14
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	0c c0       	rjmp	.+24     	; 0xa32 <__LOCK_REGION_LENGTH__+0x632>
     a1a:	8e e0       	ldi	r24, 0x0E	; 14
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	09 c0       	rjmp	.+18     	; 0xa32 <__LOCK_REGION_LENGTH__+0x632>
     a20:	8e e0       	ldi	r24, 0x0E	; 14
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	06 c0       	rjmp	.+12     	; 0xa32 <__LOCK_REGION_LENGTH__+0x632>
     a26:	8e e0       	ldi	r24, 0x0E	; 14
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	03 c0       	rjmp	.+6      	; 0xa32 <__LOCK_REGION_LENGTH__+0x632>
     a2c:	21 11       	cpse	r18, r1
     a2e:	57 ce       	rjmp	.-850    	; 0x6de <__LOCK_REGION_LENGTH__+0x2de>
     a30:	3f cd       	rjmp	.-1410   	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
     a32:	cf 91       	pop	r28
     a34:	1f 91       	pop	r17
     a36:	0f 91       	pop	r16
     a38:	08 95       	ret

00000a3a <TimerSet>:
     a3a:	60 93 ae 0f 	sts	0x0FAE, r22	; 0x800fae <_avr_timer_M>
     a3e:	70 93 af 0f 	sts	0x0FAF, r23	; 0x800faf <_avr_timer_M+0x1>
     a42:	80 93 b0 0f 	sts	0x0FB0, r24	; 0x800fb0 <_avr_timer_M+0x2>
     a46:	90 93 b1 0f 	sts	0x0FB1, r25	; 0x800fb1 <_avr_timer_M+0x3>
     a4a:	60 93 5b 10 	sts	0x105B, r22	; 0x80105b <_avr_timer_cntcurr>
     a4e:	70 93 5c 10 	sts	0x105C, r23	; 0x80105c <_avr_timer_cntcurr+0x1>
     a52:	80 93 5d 10 	sts	0x105D, r24	; 0x80105d <_avr_timer_cntcurr+0x2>
     a56:	90 93 5e 10 	sts	0x105E, r25	; 0x80105e <_avr_timer_cntcurr+0x3>
     a5a:	08 95       	ret

00000a5c <TimerOn>:
     a5c:	8b e0       	ldi	r24, 0x0B	; 11
     a5e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     a62:	8d e7       	ldi	r24, 0x7D	; 125
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     a6a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     a6e:	82 e0       	ldi	r24, 0x02	; 2
     a70:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     a74:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     a78:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     a7c:	80 91 ae 0f 	lds	r24, 0x0FAE	; 0x800fae <_avr_timer_M>
     a80:	90 91 af 0f 	lds	r25, 0x0FAF	; 0x800faf <_avr_timer_M+0x1>
     a84:	a0 91 b0 0f 	lds	r26, 0x0FB0	; 0x800fb0 <_avr_timer_M+0x2>
     a88:	b0 91 b1 0f 	lds	r27, 0x0FB1	; 0x800fb1 <_avr_timer_M+0x3>
     a8c:	80 93 5b 10 	sts	0x105B, r24	; 0x80105b <_avr_timer_cntcurr>
     a90:	90 93 5c 10 	sts	0x105C, r25	; 0x80105c <_avr_timer_cntcurr+0x1>
     a94:	a0 93 5d 10 	sts	0x105D, r26	; 0x80105d <_avr_timer_cntcurr+0x2>
     a98:	b0 93 5e 10 	sts	0x105E, r27	; 0x80105e <_avr_timer_cntcurr+0x3>
     a9c:	8f b7       	in	r24, 0x3f	; 63
     a9e:	80 68       	ori	r24, 0x80	; 128
     aa0:	8f bf       	out	0x3f, r24	; 63
     aa2:	08 95       	ret

00000aa4 <TimerISR>:
     aa4:	ef 92       	push	r14
     aa6:	ff 92       	push	r15
     aa8:	0f 93       	push	r16
     aaa:	1f 93       	push	r17
     aac:	cf 93       	push	r28
     aae:	df 93       	push	r29
     ab0:	81 e0       	ldi	r24, 0x01	; 1
     ab2:	80 93 5f 10 	sts	0x105F, r24	; 0x80105f <TimerFlag>
     ab6:	c0 e6       	ldi	r28, 0x60	; 96
     ab8:	d0 e1       	ldi	r29, 0x10	; 16
     aba:	0f 2e       	mov	r0, r31
     abc:	f0 ec       	ldi	r31, 0xC0	; 192
     abe:	ef 2e       	mov	r14, r31
     ac0:	f0 e1       	ldi	r31, 0x10	; 16
     ac2:	ff 2e       	mov	r15, r31
     ac4:	f0 2d       	mov	r31, r0
     ac6:	8e 01       	movw	r16, r28
     ac8:	4e 81       	ldd	r20, Y+6	; 0x06
     aca:	5f 81       	ldd	r21, Y+7	; 0x07
     acc:	68 85       	ldd	r22, Y+8	; 0x08
     ace:	79 85       	ldd	r23, Y+9	; 0x09
     ad0:	8a 81       	ldd	r24, Y+2	; 0x02
     ad2:	9b 81       	ldd	r25, Y+3	; 0x03
     ad4:	ac 81       	ldd	r26, Y+4	; 0x04
     ad6:	bd 81       	ldd	r27, Y+5	; 0x05
     ad8:	48 17       	cp	r20, r24
     ada:	59 07       	cpc	r21, r25
     adc:	6a 07       	cpc	r22, r26
     ade:	7b 07       	cpc	r23, r27
     ae0:	58 f0       	brcs	.+22     	; 0xaf8 <TimerISR+0x54>
     ae2:	ea 85       	ldd	r30, Y+10	; 0x0a
     ae4:	fb 85       	ldd	r31, Y+11	; 0x0b
     ae6:	88 81       	ld	r24, Y
     ae8:	99 81       	ldd	r25, Y+1	; 0x01
     aea:	09 95       	icall
     aec:	99 83       	std	Y+1, r25	; 0x01
     aee:	88 83       	st	Y, r24
     af0:	1e 82       	std	Y+6, r1	; 0x06
     af2:	1f 82       	std	Y+7, r1	; 0x07
     af4:	18 86       	std	Y+8, r1	; 0x08
     af6:	19 86       	std	Y+9, r1	; 0x09
     af8:	f8 01       	movw	r30, r16
     afa:	86 81       	ldd	r24, Z+6	; 0x06
     afc:	97 81       	ldd	r25, Z+7	; 0x07
     afe:	a0 85       	ldd	r26, Z+8	; 0x08
     b00:	b1 85       	ldd	r27, Z+9	; 0x09
     b02:	05 96       	adiw	r24, 0x05	; 5
     b04:	a1 1d       	adc	r26, r1
     b06:	b1 1d       	adc	r27, r1
     b08:	86 83       	std	Z+6, r24	; 0x06
     b0a:	97 83       	std	Z+7, r25	; 0x07
     b0c:	a0 87       	std	Z+8, r26	; 0x08
     b0e:	b1 87       	std	Z+9, r27	; 0x09
     b10:	2c 96       	adiw	r28, 0x0c	; 12
     b12:	ce 15       	cp	r28, r14
     b14:	df 05       	cpc	r29, r15
     b16:	b9 f6       	brne	.-82     	; 0xac6 <TimerISR+0x22>
     b18:	df 91       	pop	r29
     b1a:	cf 91       	pop	r28
     b1c:	1f 91       	pop	r17
     b1e:	0f 91       	pop	r16
     b20:	ff 90       	pop	r15
     b22:	ef 90       	pop	r14
     b24:	08 95       	ret

00000b26 <__vector_13>:
     b26:	1f 92       	push	r1
     b28:	0f 92       	push	r0
     b2a:	0f b6       	in	r0, 0x3f	; 63
     b2c:	0f 92       	push	r0
     b2e:	11 24       	eor	r1, r1
     b30:	0b b6       	in	r0, 0x3b	; 59
     b32:	0f 92       	push	r0
     b34:	2f 93       	push	r18
     b36:	3f 93       	push	r19
     b38:	4f 93       	push	r20
     b3a:	5f 93       	push	r21
     b3c:	6f 93       	push	r22
     b3e:	7f 93       	push	r23
     b40:	8f 93       	push	r24
     b42:	9f 93       	push	r25
     b44:	af 93       	push	r26
     b46:	bf 93       	push	r27
     b48:	ef 93       	push	r30
     b4a:	ff 93       	push	r31
     b4c:	80 91 5b 10 	lds	r24, 0x105B	; 0x80105b <_avr_timer_cntcurr>
     b50:	90 91 5c 10 	lds	r25, 0x105C	; 0x80105c <_avr_timer_cntcurr+0x1>
     b54:	a0 91 5d 10 	lds	r26, 0x105D	; 0x80105d <_avr_timer_cntcurr+0x2>
     b58:	b0 91 5e 10 	lds	r27, 0x105E	; 0x80105e <_avr_timer_cntcurr+0x3>
     b5c:	01 97       	sbiw	r24, 0x01	; 1
     b5e:	a1 09       	sbc	r26, r1
     b60:	b1 09       	sbc	r27, r1
     b62:	80 93 5b 10 	sts	0x105B, r24	; 0x80105b <_avr_timer_cntcurr>
     b66:	90 93 5c 10 	sts	0x105C, r25	; 0x80105c <_avr_timer_cntcurr+0x1>
     b6a:	a0 93 5d 10 	sts	0x105D, r26	; 0x80105d <_avr_timer_cntcurr+0x2>
     b6e:	b0 93 5e 10 	sts	0x105E, r27	; 0x80105e <_avr_timer_cntcurr+0x3>
     b72:	89 2b       	or	r24, r25
     b74:	8a 2b       	or	r24, r26
     b76:	8b 2b       	or	r24, r27
     b78:	89 f4       	brne	.+34     	; 0xb9c <__vector_13+0x76>
     b7a:	94 df       	rcall	.-216    	; 0xaa4 <TimerISR>
     b7c:	80 91 ae 0f 	lds	r24, 0x0FAE	; 0x800fae <_avr_timer_M>
     b80:	90 91 af 0f 	lds	r25, 0x0FAF	; 0x800faf <_avr_timer_M+0x1>
     b84:	a0 91 b0 0f 	lds	r26, 0x0FB0	; 0x800fb0 <_avr_timer_M+0x2>
     b88:	b0 91 b1 0f 	lds	r27, 0x0FB1	; 0x800fb1 <_avr_timer_M+0x3>
     b8c:	80 93 5b 10 	sts	0x105B, r24	; 0x80105b <_avr_timer_cntcurr>
     b90:	90 93 5c 10 	sts	0x105C, r25	; 0x80105c <_avr_timer_cntcurr+0x1>
     b94:	a0 93 5d 10 	sts	0x105D, r26	; 0x80105d <_avr_timer_cntcurr+0x2>
     b98:	b0 93 5e 10 	sts	0x105E, r27	; 0x80105e <_avr_timer_cntcurr+0x3>
     b9c:	ff 91       	pop	r31
     b9e:	ef 91       	pop	r30
     ba0:	bf 91       	pop	r27
     ba2:	af 91       	pop	r26
     ba4:	9f 91       	pop	r25
     ba6:	8f 91       	pop	r24
     ba8:	7f 91       	pop	r23
     baa:	6f 91       	pop	r22
     bac:	5f 91       	pop	r21
     bae:	4f 91       	pop	r20
     bb0:	3f 91       	pop	r19
     bb2:	2f 91       	pop	r18
     bb4:	0f 90       	pop	r0
     bb6:	0b be       	out	0x3b, r0	; 59
     bb8:	0f 90       	pop	r0
     bba:	0f be       	out	0x3f, r0	; 63
     bbc:	0f 90       	pop	r0
     bbe:	1f 90       	pop	r1
     bc0:	18 95       	reti

00000bc2 <Shift_Init>:

void Shift_Init() {
    DDRC = Set_Bit(DDRC, DATA);
     bc2:	3a 9a       	sbi	0x07, 2	; 7
    DDRC = Set_Bit(DDRC, SHIFT);
     bc4:	3b 9a       	sbi	0x07, 3	; 7
    DDRC = Set_Bit(DDRC, STORE);
     bc6:	3c 9a       	sbi	0x07, 4	; 7
     bc8:	08 95       	ret

00000bca <Shift_Data_High>:
}

//Set Data line high
void Shift_Data_High() {
    PORTC = Set_Bit(PORTC, DATA);
     bca:	42 9a       	sbi	0x08, 2	; 8
     bcc:	08 95       	ret

00000bce <Shift_Data_Low>:
}

//Set Data line low
void Shift_Data_Low() {
    PORTC = Clear_Bit(PORTC, DATA);
     bce:	42 98       	cbi	0x08, 2	; 8
     bd0:	08 95       	ret

00000bd2 <Shift_Pulse>:
}

//Pulse Shift Clock
void Shift_Pulse() {
    PORTC = Set_Bit(PORTC, SHIFT);
     bd2:	43 9a       	sbi	0x08, 3	; 8
    PORTC = Clear_Bit(PORTC, SHIFT);
     bd4:	43 98       	cbi	0x08, 3	; 8
     bd6:	08 95       	ret

00000bd8 <Shift_Store>:
}

//Pulse Store Clock
void Shift_Store() {
    PORTC = Set_Bit(PORTC, STORE);
     bd8:	44 9a       	sbi	0x08, 4	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     bda:	81 e0       	ldi	r24, 0x01	; 1
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	fc 01       	movw	r30, r24
     be0:	31 97       	sbiw	r30, 0x01	; 1
     be2:	f1 f7       	brne	.-4      	; 0xbe0 <Shift_Store+0x8>
    //SET_BIT(SHIFT_PORT,STORE_LINE);
    _delay_loop_2(1);

    //CLR_BIT(SHIFT_PORT,STORE_LINE);
    PORTC = Clear_Bit(PORTC, STORE);
     be4:	44 98       	cbi	0x08, 4	; 8
     be6:	01 97       	sbiw	r24, 0x01	; 1
     be8:	f1 f7       	brne	.-4      	; 0xbe6 <Shift_Store+0xe>
     bea:	08 95       	ret

00000bec <Shift_transmit_data>:
    _delay_loop_2(1);
}


void Shift_transmit_data(unsigned char data) {
     bec:	cf 93       	push	r28
     bee:	df 93       	push	r29
     bf0:	d8 2f       	mov	r29, r24
     bf2:	c8 e0       	ldi	r28, 0x08	; 8
    for(unsigned char i=0;i<8;i++) {
        if(data & 0x80) {
     bf4:	dd 23       	and	r29, r29
     bf6:	14 f4       	brge	.+4      	; 0xbfc <Shift_transmit_data+0x10>
            Shift_Data_High();
     bf8:	e8 df       	rcall	.-48     	; 0xbca <Shift_Data_High>
     bfa:	01 c0       	rjmp	.+2      	; 0xbfe <Shift_transmit_data+0x12>
            } else {
            Shift_Data_Low();
     bfc:	e8 df       	rcall	.-48     	; 0xbce <Shift_Data_Low>
        }

        Shift_Pulse();
     bfe:	e9 df       	rcall	.-46     	; 0xbd2 <Shift_Pulse>
     c00:	dd 0f       	add	r29, r29
        data=data << 1;
     c02:	c1 50       	subi	r28, 0x01	; 1
    _delay_loop_2(1);
}


void Shift_transmit_data(unsigned char data) {
    for(unsigned char i=0;i<8;i++) {
     c04:	b9 f7       	brne	.-18     	; 0xbf4 <Shift_transmit_data+0x8>

        Shift_Pulse();
        data=data << 1;
    }

    Shift_Store();
     c06:	e8 df       	rcall	.-48     	; 0xbd8 <Shift_Store>
     c08:	df 91       	pop	r29
     c0a:	cf 91       	pop	r28
     c0c:	08 95       	ret

00000c0e <RGB_Matrix_Tick>:
     c0e:	ef 92       	push	r14
    }

    return state;
}

int RGB_Matrix_Tick(int state){
     c10:	ff 92       	push	r15
     c12:	0f 93       	push	r16
     c14:	1f 93       	push	r17
     c16:	cf 93       	push	r28
     c18:	df 93       	push	r29
    static unsigned char play_note;
    static unsigned char rest_note;
    static unsigned char note_to_hit;
    switch(state){
     c1a:	81 30       	cpi	r24, 0x01	; 1
     c1c:	91 05       	cpc	r25, r1
     c1e:	59 f0       	breq	.+22     	; 0xc36 <RGB_Matrix_Tick+0x28>
     c20:	1c f4       	brge	.+6      	; 0xc28 <RGB_Matrix_Tick+0x1a>
     c22:	00 97       	sbiw	r24, 0x00	; 0
     c24:	81 f1       	breq	.+96     	; 0xc86 <RGB_Matrix_Tick+0x78>
     c26:	19 c0       	rjmp	.+50     	; 0xc5a <RGB_Matrix_Tick+0x4c>
     c28:	82 30       	cpi	r24, 0x02	; 2
     c2a:	91 05       	cpc	r25, r1
     c2c:	69 f0       	breq	.+26     	; 0xc48 <RGB_Matrix_Tick+0x3a>
     c2e:	83 30       	cpi	r24, 0x03	; 3
     c30:	91 05       	cpc	r25, r1
     c32:	49 f1       	breq	.+82     	; 0xc86 <RGB_Matrix_Tick+0x78>
     c34:	12 c0       	rjmp	.+36     	; 0xc5a <RGB_Matrix_Tick+0x4c>
        case RGB_INIT:
            state = RGB_MENU;
            break;
        case RGB_MENU:
            if(playing){
     c36:	80 91 48 10 	lds	r24, 0x1048	; 0x801048 <playing>
     c3a:	88 23       	and	r24, r24
     c3c:	21 f1       	breq	.+72     	; 0xc86 <RGB_Matrix_Tick+0x78>
                play_note = 0;
     c3e:	10 92 42 10 	sts	0x1042, r1	; 0x801042 <play_note.2306>
                rest_note = 0;
     c42:	10 92 41 10 	sts	0x1041, r1	; 0x801041 <rest_note.2307>
                state = RGB_SONG;
                break;
     c46:	14 c0       	rjmp	.+40     	; 0xc70 <RGB_Matrix_Tick+0x62>
            else{
                state = RGB_MENU;
                break;
            }    
        case RGB_SONG:
            if(song_finished || !playing){
     c48:	80 91 4a 10 	lds	r24, 0x104A	; 0x80104a <song_finished>
     c4c:	81 11       	cpse	r24, r1
     c4e:	16 c0       	rjmp	.+44     	; 0xc7c <RGB_Matrix_Tick+0x6e>
     c50:	80 91 48 10 	lds	r24, 0x1048	; 0x801048 <playing>
     c54:	81 11       	cpse	r24, r1
     c56:	0c c0       	rjmp	.+24     	; 0xc70 <RGB_Matrix_Tick+0x62>
     c58:	11 c0       	rjmp	.+34     	; 0xc7c <RGB_Matrix_Tick+0x6e>
            }
        case RGB_RESET:
            state = RGB_MENU;
            break;
    }
    switch(state){
     c5a:	82 30       	cpi	r24, 0x02	; 2
     c5c:	91 05       	cpc	r25, r1
     c5e:	41 f0       	breq	.+16     	; 0xc70 <RGB_Matrix_Tick+0x62>
     c60:	83 30       	cpi	r24, 0x03	; 3
     c62:	91 05       	cpc	r25, r1
     c64:	59 f0       	breq	.+22     	; 0xc7c <RGB_Matrix_Tick+0x6e>
     c66:	81 30       	cpi	r24, 0x01	; 1
     c68:	91 05       	cpc	r25, r1
     c6a:	09 f0       	breq	.+2      	; 0xc6e <RGB_Matrix_Tick+0x60>
     c6c:	dc c0       	rjmp	.+440    	; 0xe26 <RGB_Matrix_Tick+0x218>
     c6e:	0b c0       	rjmp	.+22     	; 0xc86 <RGB_Matrix_Tick+0x78>
     c70:	0b e4       	ldi	r16, 0x4B	; 75
     c72:	10 e1       	ldi	r17, 0x10	; 16
     c74:	23 e5       	ldi	r18, 0x53	; 83
     c76:	30 e1       	ldi	r19, 0x10	; 16
    }

    return state;
}

int RGB_Matrix_Tick(int state){
     c78:	f8 01       	movw	r30, r16
     c7a:	3a c0       	rjmp	.+116    	; 0xcf0 <RGB_Matrix_Tick+0xe2>
     c7c:	eb e4       	ldi	r30, 0x4B	; 75
     c7e:	f0 e1       	ldi	r31, 0x10	; 16
     c80:	83 e5       	ldi	r24, 0x53	; 83
     c82:	90 e1       	ldi	r25, 0x10	; 16
     c84:	c2 c0       	rjmp	.+388    	; 0xe0a <RGB_Matrix_Tick+0x1fc>
    }
    switch(state){
        case RGB_INIT:
            break;
        case RGB_MENU:
            if(LEFT || RIGHT || UP || DOWN){
     c86:	80 91 5a 10 	lds	r24, 0x105A	; 0x80105a <LEFT>
     c8a:	88 23       	and	r24, r24
     c8c:	49 f0       	breq	.+18     	; 0xca0 <RGB_Matrix_Tick+0x92>
     c8e:	00 e0       	ldi	r16, 0x00	; 0
     c90:	11 e0       	ldi	r17, 0x01	; 1
    }

    return state;
}

int RGB_Matrix_Tick(int state){
     c92:	c0 e0       	ldi	r28, 0x00	; 0
     c94:	d0 e0       	ldi	r29, 0x00	; 0
        case RGB_INIT:
            break;
        case RGB_MENU:
            if(LEFT || RIGHT || UP || DOWN){
                for(unsigned char i = 0; i < 8; i++){
                    Shift_transmit_data(128 >> i);
     c96:	68 94       	set
     c98:	ee 24       	eor	r14, r14
     c9a:	e7 f8       	bld	r14, 7
     c9c:	f1 2c       	mov	r15, r1
     c9e:	0d c0       	rjmp	.+26     	; 0xcba <RGB_Matrix_Tick+0xac>
    }
    switch(state){
        case RGB_INIT:
            break;
        case RGB_MENU:
            if(LEFT || RIGHT || UP || DOWN){
     ca0:	80 91 59 10 	lds	r24, 0x1059	; 0x801059 <RIGHT>
     ca4:	81 11       	cpse	r24, r1
     ca6:	f3 cf       	rjmp	.-26     	; 0xc8e <RGB_Matrix_Tick+0x80>
     ca8:	80 91 58 10 	lds	r24, 0x1058	; 0x801058 <UP>
     cac:	81 11       	cpse	r24, r1
     cae:	ef cf       	rjmp	.-34     	; 0xc8e <RGB_Matrix_Tick+0x80>
     cb0:	80 91 57 10 	lds	r24, 0x1057	; 0x801057 <DOWN>
     cb4:	81 11       	cpse	r24, r1
     cb6:	eb cf       	rjmp	.-42     	; 0xc8e <RGB_Matrix_Tick+0x80>
     cb8:	14 c0       	rjmp	.+40     	; 0xce2 <RGB_Matrix_Tick+0xd4>
                for(unsigned char i = 0; i < 8; i++){
                    Shift_transmit_data(128 >> i);
     cba:	c7 01       	movw	r24, r14
     cbc:	0c 2e       	mov	r0, r28
     cbe:	02 c0       	rjmp	.+4      	; 0xcc4 <RGB_Matrix_Tick+0xb6>
     cc0:	95 95       	asr	r25
     cc2:	87 95       	ror	r24
     cc4:	0a 94       	dec	r0
     cc6:	e2 f7       	brpl	.-8      	; 0xcc0 <RGB_Matrix_Tick+0xb2>
     cc8:	91 df       	rcall	.-222    	; 0xbec <Shift_transmit_data>
                    Shift_transmit_data(~pic[i]);
     cca:	f8 01       	movw	r30, r16
     ccc:	81 91       	ld	r24, Z+
     cce:	8f 01       	movw	r16, r30
     cd0:	80 95       	com	r24
     cd2:	8c df       	rcall	.-232    	; 0xbec <Shift_transmit_data>
                    delay_ms(3);
     cd4:	83 e0       	ldi	r24, 0x03	; 3
     cd6:	90 e0       	ldi	r25, 0x00	; 0
     cd8:	b6 da       	rcall	.-2708   	; 0x246 <delay_ms>
     cda:	21 96       	adiw	r28, 0x01	; 1
    switch(state){
        case RGB_INIT:
            break;
        case RGB_MENU:
            if(LEFT || RIGHT || UP || DOWN){
                for(unsigned char i = 0; i < 8; i++){
     cdc:	c8 30       	cpi	r28, 0x08	; 8
     cde:	d1 05       	cpc	r29, r1
                    Shift_transmit_data(128 >> i);
                    Shift_transmit_data(~pic[i]);
                    delay_ms(3);
                }
            }
            Shift_transmit_data(0);
     ce0:	61 f7       	brne	.-40     	; 0xcba <RGB_Matrix_Tick+0xac>
     ce2:	80 e0       	ldi	r24, 0x00	; 0
            Shift_transmit_data(0);
     ce4:	83 df       	rcall	.-250    	; 0xbec <Shift_transmit_data>
     ce6:	80 e0       	ldi	r24, 0x00	; 0
     ce8:	81 df       	rcall	.-254    	; 0xbec <Shift_transmit_data>
            
            break;
     cea:	81 e0       	ldi	r24, 0x01	; 1
     cec:	90 e0       	ldi	r25, 0x00	; 0
     cee:	9b c0       	rjmp	.+310    	; 0xe26 <RGB_Matrix_Tick+0x218>
        case RGB_SONG:
            for(unsigned j = 0; j < 8; j++){
                RGB_DISPLAY_NOTES[j] <<= 1;
     cf0:	80 81       	ld	r24, Z
     cf2:	88 0f       	add	r24, r24
     cf4:	81 93       	st	Z+, r24
            Shift_transmit_data(0);
            Shift_transmit_data(0);
            
            break;
        case RGB_SONG:
            for(unsigned j = 0; j < 8; j++){
     cf6:	e2 17       	cp	r30, r18
     cf8:	f3 07       	cpc	r31, r19
     cfa:	d1 f7       	brne	.-12     	; 0xcf0 <RGB_Matrix_Tick+0xe2>
                RGB_DISPLAY_NOTES[j] <<= 1;
            }
            if(play_note < songs[current_song_choice].timing[current_note]){
     cfc:	20 91 55 10 	lds	r18, 0x1055	; 0x801055 <current_song_choice>
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	80 91 56 10 	lds	r24, 0x1056	; 0x801056 <current_note>
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	40 91 42 10 	lds	r20, 0x1042	; 0x801042 <play_note.2306>
     d0c:	62 ed       	ldi	r22, 0xD2	; 210
     d0e:	77 e0       	ldi	r23, 0x07	; 7
     d10:	26 9f       	mul	r18, r22
     d12:	f0 01       	movw	r30, r0
     d14:	27 9f       	mul	r18, r23
     d16:	f0 0d       	add	r31, r0
     d18:	36 9f       	mul	r19, r22
     d1a:	f0 0d       	add	r31, r0
     d1c:	11 24       	eor	r1, r1
     d1e:	e8 0f       	add	r30, r24
     d20:	f9 1f       	adc	r31, r25
     d22:	e8 55       	subi	r30, 0x58	; 88
     d24:	fb 4e       	sbci	r31, 0xEB	; 235
     d26:	50 81       	ld	r21, Z
     d28:	45 17       	cp	r20, r21
     d2a:	e0 f5       	brcc	.+120    	; 0xda4 <RGB_Matrix_Tick+0x196>
                note_to_hit = songs[current_song_choice].hit[current_note];
     d2c:	26 9f       	mul	r18, r22
     d2e:	f0 01       	movw	r30, r0
     d30:	27 9f       	mul	r18, r23
     d32:	f0 0d       	add	r31, r0
     d34:	36 9f       	mul	r19, r22
     d36:	f0 0d       	add	r31, r0
     d38:	11 24       	eor	r1, r1
     d3a:	8e 0f       	add	r24, r30
     d3c:	9f 1f       	adc	r25, r31
     d3e:	fc 01       	movw	r30, r24
     d40:	e4 56       	subi	r30, 0x64	; 100
     d42:	f9 4e       	sbci	r31, 0xE9	; 233
     d44:	80 81       	ld	r24, Z
                
                if(note_to_hit == 8){
     d46:	88 30       	cpi	r24, 0x08	; 8
     d48:	49 f4       	brne	.+18     	; 0xd5c <RGB_Matrix_Tick+0x14e>
                    RGB_DISPLAY_NOTES[7] |= 3;
     d4a:	eb e4       	ldi	r30, 0x4B	; 75
     d4c:	f0 e1       	ldi	r31, 0x10	; 16
     d4e:	87 81       	ldd	r24, Z+7	; 0x07
     d50:	83 60       	ori	r24, 0x03	; 3
     d52:	87 83       	std	Z+7, r24	; 0x07
                    RGB_DISPLAY_NOTES[6] |= 3;
     d54:	86 81       	ldd	r24, Z+6	; 0x06
     d56:	83 60       	ori	r24, 0x03	; 3
     d58:	86 83       	std	Z+6, r24	; 0x06
     d5a:	20 c0       	rjmp	.+64     	; 0xd9c <RGB_Matrix_Tick+0x18e>
                }
                else if(note_to_hit == 4){
     d5c:	84 30       	cpi	r24, 0x04	; 4
     d5e:	49 f4       	brne	.+18     	; 0xd72 <RGB_Matrix_Tick+0x164>
                    RGB_DISPLAY_NOTES[5] |= 3;
     d60:	eb e4       	ldi	r30, 0x4B	; 75
     d62:	f0 e1       	ldi	r31, 0x10	; 16
     d64:	85 81       	ldd	r24, Z+5	; 0x05
     d66:	83 60       	ori	r24, 0x03	; 3
     d68:	85 83       	std	Z+5, r24	; 0x05
                    RGB_DISPLAY_NOTES[4] |= 3;
     d6a:	84 81       	ldd	r24, Z+4	; 0x04
     d6c:	83 60       	ori	r24, 0x03	; 3
     d6e:	84 83       	std	Z+4, r24	; 0x04
     d70:	15 c0       	rjmp	.+42     	; 0xd9c <RGB_Matrix_Tick+0x18e>
                }
                else if(note_to_hit == 2){
     d72:	82 30       	cpi	r24, 0x02	; 2
     d74:	49 f4       	brne	.+18     	; 0xd88 <RGB_Matrix_Tick+0x17a>
                    RGB_DISPLAY_NOTES[3] |= 3;
     d76:	eb e4       	ldi	r30, 0x4B	; 75
     d78:	f0 e1       	ldi	r31, 0x10	; 16
     d7a:	83 81       	ldd	r24, Z+3	; 0x03
     d7c:	83 60       	ori	r24, 0x03	; 3
     d7e:	83 83       	std	Z+3, r24	; 0x03
                    RGB_DISPLAY_NOTES[2] |= 3;
     d80:	82 81       	ldd	r24, Z+2	; 0x02
     d82:	83 60       	ori	r24, 0x03	; 3
     d84:	82 83       	std	Z+2, r24	; 0x02
     d86:	0a c0       	rjmp	.+20     	; 0xd9c <RGB_Matrix_Tick+0x18e>
                }    
                else if(note_to_hit == 1){
     d88:	81 30       	cpi	r24, 0x01	; 1
     d8a:	41 f4       	brne	.+16     	; 0xd9c <RGB_Matrix_Tick+0x18e>
                    RGB_DISPLAY_NOTES[1] |= 3;
     d8c:	eb e4       	ldi	r30, 0x4B	; 75
     d8e:	f0 e1       	ldi	r31, 0x10	; 16
     d90:	81 81       	ldd	r24, Z+1	; 0x01
     d92:	83 60       	ori	r24, 0x03	; 3
     d94:	81 83       	std	Z+1, r24	; 0x01
                    RGB_DISPLAY_NOTES[0] |= 3;
     d96:	80 81       	ld	r24, Z
     d98:	83 60       	ori	r24, 0x03	; 3
     d9a:	80 83       	st	Z, r24
                }    
                play_note++;        
     d9c:	4f 5f       	subi	r20, 0xFF	; 255
     d9e:	40 93 42 10 	sts	0x1042, r20	; 0x801042 <play_note.2306>
     da2:	3a c0       	rjmp	.+116    	; 0xe18 <RGB_Matrix_Tick+0x20a>
            }
            else{
                note_to_hit = 0;
                if(rest_note < songs[current_song_choice].rest_timing[current_note]){
     da4:	40 91 41 10 	lds	r20, 0x1041	; 0x801041 <rest_note.2307>
     da8:	62 ed       	ldi	r22, 0xD2	; 210
     daa:	77 e0       	ldi	r23, 0x07	; 7
     dac:	26 9f       	mul	r18, r22
     dae:	f0 01       	movw	r30, r0
     db0:	27 9f       	mul	r18, r23
     db2:	f0 0d       	add	r31, r0
     db4:	36 9f       	mul	r19, r22
     db6:	f0 0d       	add	r31, r0
     db8:	11 24       	eor	r1, r1
     dba:	8e 0f       	add	r24, r30
     dbc:	9f 1f       	adc	r25, r31
     dbe:	fc 01       	movw	r30, r24
     dc0:	ee 55       	subi	r30, 0x5E	; 94
     dc2:	fa 4e       	sbci	r31, 0xEA	; 234
     dc4:	80 81       	ld	r24, Z
     dc6:	48 17       	cp	r20, r24
     dc8:	20 f4       	brcc	.+8      	; 0xdd2 <RGB_Matrix_Tick+0x1c4>
                    rest_note++;
     dca:	4f 5f       	subi	r20, 0xFF	; 255
     dcc:	40 93 41 10 	sts	0x1041, r20	; 0x801041 <rest_note.2307>
     dd0:	23 c0       	rjmp	.+70     	; 0xe18 <RGB_Matrix_Tick+0x20a>
                }
                else{
                    play_note = 0;
     dd2:	10 92 42 10 	sts	0x1042, r1	; 0x801042 <play_note.2306>
                    rest_note = 0;   
     dd6:	10 92 41 10 	sts	0x1041, r1	; 0x801041 <rest_note.2307>
     dda:	1e c0       	rjmp	.+60     	; 0xe18 <RGB_Matrix_Tick+0x20a>
                }     
            }                   
            for(unsigned char i = 0; i < 8; i++){
                Shift_transmit_data(128 >> i);
     ddc:	c7 01       	movw	r24, r14
     dde:	0c 2e       	mov	r0, r28
     de0:	02 c0       	rjmp	.+4      	; 0xde6 <RGB_Matrix_Tick+0x1d8>
     de2:	95 95       	asr	r25
     de4:	87 95       	ror	r24
     de6:	0a 94       	dec	r0
     de8:	e2 f7       	brpl	.-8      	; 0xde2 <RGB_Matrix_Tick+0x1d4>
                Shift_transmit_data(~RGB_DISPLAY_NOTES[i]);
     dea:	00 df       	rcall	.-512    	; 0xbec <Shift_transmit_data>
     dec:	f8 01       	movw	r30, r16
     dee:	81 91       	ld	r24, Z+
     df0:	8f 01       	movw	r16, r30
     df2:	80 95       	com	r24
                delay_ms(5);
     df4:	fb de       	rcall	.-522    	; 0xbec <Shift_transmit_data>
     df6:	85 e0       	ldi	r24, 0x05	; 5
     df8:	90 e0       	ldi	r25, 0x00	; 0
     dfa:	25 da       	rcall	.-2998   	; 0x246 <delay_ms>
     dfc:	21 96       	adiw	r28, 0x01	; 1
                else{
                    play_note = 0;
                    rest_note = 0;   
                }     
            }                   
            for(unsigned char i = 0; i < 8; i++){
     dfe:	c8 30       	cpi	r28, 0x08	; 8
     e00:	d1 05       	cpc	r29, r1
     e02:	61 f7       	brne	.-40     	; 0xddc <RGB_Matrix_Tick+0x1ce>
     e04:	82 e0       	ldi	r24, 0x02	; 2
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	0e c0       	rjmp	.+28     	; 0xe26 <RGB_Matrix_Tick+0x218>
            
            }
            break;
        case RGB_RESET:
            for(unsigned char r = 0; r < 8; r++){
                RGB_DISPLAY_NOTES[r] = 0;
     e0a:	11 92       	st	Z+, r1
                delay_ms(5);
            
            }
            break;
        case RGB_RESET:
            for(unsigned char r = 0; r < 8; r++){
     e0c:	e8 17       	cp	r30, r24
     e0e:	f9 07       	cpc	r31, r25
     e10:	e1 f7       	brne	.-8      	; 0xe0a <RGB_Matrix_Tick+0x1fc>
     e12:	83 e0       	ldi	r24, 0x03	; 3
     e14:	90 e0       	ldi	r25, 0x00	; 0
                RGB_DISPLAY_NOTES[r] = 0;
            }
            break;
    }
    
    return state;
     e16:	07 c0       	rjmp	.+14     	; 0xe26 <RGB_Matrix_Tick+0x218>
    }

    return state;
}

int RGB_Matrix_Tick(int state){
     e18:	c0 e0       	ldi	r28, 0x00	; 0
     e1a:	d0 e0       	ldi	r29, 0x00	; 0
                    play_note = 0;
                    rest_note = 0;   
                }     
            }                   
            for(unsigned char i = 0; i < 8; i++){
                Shift_transmit_data(128 >> i);
     e1c:	68 94       	set
     e1e:	ee 24       	eor	r14, r14
     e20:	e7 f8       	bld	r14, 7
     e22:	f1 2c       	mov	r15, r1
     e24:	db cf       	rjmp	.-74     	; 0xddc <RGB_Matrix_Tick+0x1ce>
            }
            break;
    }
    
    return state;
}
     e26:	df 91       	pop	r29
     e28:	cf 91       	pop	r28
     e2a:	1f 91       	pop	r17
     e2c:	0f 91       	pop	r16
     e2e:	ff 90       	pop	r15
     e30:	ef 90       	pop	r14
     e32:	08 95       	ret

00000e34 <set_PWM>:

// 0.954 hz is lowest frequency possible with this function,
// based on settings in PWM_on()
// Passing in 0 as the frequency will stop the speaker from generating sound
void set_PWM(double frequency) {
     e34:	cf 92       	push	r12
     e36:	df 92       	push	r13
     e38:	ef 92       	push	r14
     e3a:	ff 92       	push	r15
     e3c:	6b 01       	movw	r12, r22
     e3e:	7c 01       	movw	r14, r24
	static double current_frequency; // Keeps track of the currently set frequency
	// Will only update the registers when the frequency changes, otherwise allows
	// music to play uninterrupted.
	if (frequency != current_frequency) {
     e40:	9b 01       	movw	r18, r22
     e42:	ac 01       	movw	r20, r24
     e44:	60 91 44 10 	lds	r22, 0x1044	; 0x801044 <current_frequency.2121>
     e48:	70 91 45 10 	lds	r23, 0x1045	; 0x801045 <current_frequency.2121+0x1>
     e4c:	80 91 46 10 	lds	r24, 0x1046	; 0x801046 <current_frequency.2121+0x2>
     e50:	90 91 47 10 	lds	r25, 0x1047	; 0x801047 <current_frequency.2121+0x3>
     e54:	c5 d2       	rcall	.+1418   	; 0x13e0 <__cmpsf2>
     e56:	88 23       	and	r24, r24
     e58:	09 f4       	brne	.+2      	; 0xe5c <set_PWM+0x28>
     e5a:	52 c0       	rjmp	.+164    	; 0xf00 <set_PWM+0xcc>
		if (!frequency) { TCCR3B &= 0x08; } //stops timer/counter
     e5c:	20 e0       	ldi	r18, 0x00	; 0
     e5e:	30 e0       	ldi	r19, 0x00	; 0
     e60:	a9 01       	movw	r20, r18
     e62:	c7 01       	movw	r24, r14
     e64:	b6 01       	movw	r22, r12
     e66:	bc d2       	rcall	.+1400   	; 0x13e0 <__cmpsf2>
     e68:	81 11       	cpse	r24, r1
     e6a:	06 c0       	rjmp	.+12     	; 0xe78 <set_PWM+0x44>
     e6c:	e1 e9       	ldi	r30, 0x91	; 145
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	88 70       	andi	r24, 0x08	; 8
     e74:	80 83       	st	Z, r24
     e76:	05 c0       	rjmp	.+10     	; 0xe82 <set_PWM+0x4e>
		else { TCCR3B |= 0x03; } // resumes/continues timer/counter
     e78:	e1 e9       	ldi	r30, 0x91	; 145
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	80 81       	ld	r24, Z
     e7e:	83 60       	ori	r24, 0x03	; 3
     e80:	80 83       	st	Z, r24
		
		// prevents OCR3A from overflowing, using prescaler 64
		// 0.954 is smallest frequency that will not result in overflow
		if (frequency < 0.954) { OCR3A = 0xFFFF; }
     e82:	28 e5       	ldi	r18, 0x58	; 88
     e84:	39 e3       	ldi	r19, 0x39	; 57
     e86:	44 e7       	ldi	r20, 0x74	; 116
     e88:	5f e3       	ldi	r21, 0x3F	; 63
     e8a:	c7 01       	movw	r24, r14
     e8c:	b6 01       	movw	r22, r12
     e8e:	a8 d2       	rcall	.+1360   	; 0x13e0 <__cmpsf2>
     e90:	88 23       	and	r24, r24
     e92:	3c f4       	brge	.+14     	; 0xea2 <set_PWM+0x6e>
     e94:	8f ef       	ldi	r24, 0xFF	; 255
     e96:	9f ef       	ldi	r25, 0xFF	; 255
     e98:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     e9c:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
     ea0:	23 c0       	rjmp	.+70     	; 0xee8 <set_PWM+0xb4>
		
		// prevents OCR0A from underflowing, using prescaler 64					
		// 31250 is largest frequency that will not result in underflow
		else if (frequency > 31250) { OCR3A = 0x0000; }
     ea2:	20 e0       	ldi	r18, 0x00	; 0
     ea4:	34 e2       	ldi	r19, 0x24	; 36
     ea6:	44 ef       	ldi	r20, 0xF4	; 244
     ea8:	56 e4       	ldi	r21, 0x46	; 70
     eaa:	c7 01       	movw	r24, r14
     eac:	b6 01       	movw	r22, r12
     eae:	aa d3       	rcall	.+1876   	; 0x1604 <__gesf2>
     eb0:	18 16       	cp	r1, r24
     eb2:	2c f4       	brge	.+10     	; 0xebe <set_PWM+0x8a>
     eb4:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     eb8:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
     ebc:	15 c0       	rjmp	.+42     	; 0xee8 <set_PWM+0xb4>
		
		// set OCR3A based on desired frequency
		else { OCR3A = (short)(8000000 / (128 * frequency)) - 1; }
     ebe:	20 e0       	ldi	r18, 0x00	; 0
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	40 e0       	ldi	r20, 0x00	; 0
     ec4:	53 e4       	ldi	r21, 0x43	; 67
     ec6:	c7 01       	movw	r24, r14
     ec8:	b6 01       	movw	r22, r12
     eca:	a0 d3       	rcall	.+1856   	; 0x160c <__mulsf3>
     ecc:	9b 01       	movw	r18, r22
     ece:	ac 01       	movw	r20, r24
     ed0:	60 e0       	ldi	r22, 0x00	; 0
     ed2:	74 e2       	ldi	r23, 0x24	; 36
     ed4:	84 ef       	ldi	r24, 0xF4	; 244
     ed6:	9a e4       	ldi	r25, 0x4A	; 74
     ed8:	87 d2       	rcall	.+1294   	; 0x13e8 <__divsf3>
     eda:	ee d2       	rcall	.+1500   	; 0x14b8 <__fixsfsi>
     edc:	61 50       	subi	r22, 0x01	; 1
     ede:	71 09       	sbc	r23, r1
     ee0:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     ee4:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>

		TCNT3 = 0; // resets counter
     ee8:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
     eec:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
		current_frequency = frequency; // Updates the current frequency
     ef0:	c0 92 44 10 	sts	0x1044, r12	; 0x801044 <current_frequency.2121>
     ef4:	d0 92 45 10 	sts	0x1045, r13	; 0x801045 <current_frequency.2121+0x1>
     ef8:	e0 92 46 10 	sts	0x1046, r14	; 0x801046 <current_frequency.2121+0x2>
     efc:	f0 92 47 10 	sts	0x1047, r15	; 0x801047 <current_frequency.2121+0x3>
	}
}
     f00:	ff 90       	pop	r15
     f02:	ef 90       	pop	r14
     f04:	df 90       	pop	r13
     f06:	cf 90       	pop	r12
     f08:	08 95       	ret

00000f0a <PWM_on>:

void PWM_on() {
	TCCR3A = (1 << COM3A0);
     f0a:	80 e4       	ldi	r24, 0x40	; 64
     f0c:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	// COM3A0: Toggle PB3 on compare match between counter and OCR0A
	TCCR3B = (1 << WGM32) | (1 << CS31) | (1 << CS30);
     f10:	8b e0       	ldi	r24, 0x0B	; 11
     f12:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
	// WGM02: When counter (TCNT0) matches OCR0A, reset counter
	// CS01 & CS30: Set a prescaler of 64
	set_PWM(0);
     f16:	60 e0       	ldi	r22, 0x00	; 0
     f18:	70 e0       	ldi	r23, 0x00	; 0
     f1a:	cb 01       	movw	r24, r22
     f1c:	8b cf       	rjmp	.-234    	; 0xe34 <set_PWM>
     f1e:	08 95       	ret

00000f20 <PWM_off>:
}

void PWM_off() {
	TCCR3A = 0x00;
     f20:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	TCCR3B = 0x00;
     f24:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
     f28:	08 95       	ret

00000f2a <Note_Tick>:
    static unsigned char rest_note;
    static unsigned char note_to_hit;
    static unsigned char hitting_note;
    static bool already_hit;
    
    switch(state){
     f2a:	81 30       	cpi	r24, 0x01	; 1
     f2c:	91 05       	cpc	r25, r1
     f2e:	59 f0       	breq	.+22     	; 0xf46 <Note_Tick+0x1c>
     f30:	1c f4       	brge	.+6      	; 0xf38 <Note_Tick+0xe>
     f32:	00 97       	sbiw	r24, 0x00	; 0
     f34:	f1 f0       	breq	.+60     	; 0xf72 <Note_Tick+0x48>
     f36:	12 c0       	rjmp	.+36     	; 0xf5c <Note_Tick+0x32>
     f38:	82 30       	cpi	r24, 0x02	; 2
     f3a:	91 05       	cpc	r25, r1
     f3c:	51 f0       	breq	.+20     	; 0xf52 <Note_Tick+0x28>
     f3e:	83 30       	cpi	r24, 0x03	; 3
     f40:	91 05       	cpc	r25, r1
     f42:	b9 f0       	breq	.+46     	; 0xf72 <Note_Tick+0x48>
     f44:	0b c0       	rjmp	.+22     	; 0xf5c <Note_Tick+0x32>
        case Note_INIT:
            state = Note_Wait;
            break;
        case Note_Wait:
            if(playing){
     f46:	80 91 48 10 	lds	r24, 0x1048	; 0x801048 <playing>
     f4a:	88 23       	and	r24, r24
     f4c:	91 f0       	breq	.+36     	; 0xf72 <Note_Tick+0x48>
                PWM_on();
     f4e:	dd df       	rcall	.-70     	; 0xf0a <PWM_on>
                state = Note_Play_Song;
                break;
     f50:	1b c0       	rjmp	.+54     	; 0xf88 <Note_Tick+0x5e>
            else{
                state = Note_Wait;
                break;
            }
        case Note_Play_Song:
            if(song_finished){
     f52:	80 91 4a 10 	lds	r24, 0x104A	; 0x80104a <song_finished>
     f56:	81 11       	cpse	r24, r1
     f58:	d8 c0       	rjmp	.+432    	; 0x110a <Note_Tick+0x1e0>
     f5a:	16 c0       	rjmp	.+44     	; 0xf88 <Note_Tick+0x5e>
            }
        case Note_Reset:
            state = Note_Wait;
            break;
    }
    switch(state){
     f5c:	82 30       	cpi	r24, 0x02	; 2
     f5e:	91 05       	cpc	r25, r1
     f60:	99 f0       	breq	.+38     	; 0xf88 <Note_Tick+0x5e>
     f62:	83 30       	cpi	r24, 0x03	; 3
     f64:	91 05       	cpc	r25, r1
     f66:	09 f4       	brne	.+2      	; 0xf6a <Note_Tick+0x40>
     f68:	d0 c0       	rjmp	.+416    	; 0x110a <Note_Tick+0x1e0>
     f6a:	81 30       	cpi	r24, 0x01	; 1
     f6c:	91 05       	cpc	r25, r1
     f6e:	09 f0       	breq	.+2      	; 0xf72 <Note_Tick+0x48>
     f70:	d3 c0       	rjmp	.+422    	; 0x1118 <Note_Tick+0x1ee>
        case Note_INIT:
            break;
        case Note_Wait:
            play_note = 0;
     f72:	10 92 40 10 	sts	0x1040, r1	; 0x801040 <play_note.2338>
            rest_note = 0;
     f76:	10 92 3f 10 	sts	0x103F, r1	; 0x80103f <rest_note.2339>
            hitting_note = 0;
     f7a:	10 92 3e 10 	sts	0x103E, r1	; 0x80103e <hitting_note.2341>
            already_hit = false;
     f7e:	10 92 3d 10 	sts	0x103D, r1	; 0x80103d <already_hit.2342>
            break;
     f82:	81 e0       	ldi	r24, 0x01	; 1
     f84:	90 e0       	ldi	r25, 0x00	; 0
     f86:	08 95       	ret
        case Note_Play_Song:
            note_to_hit = songs[current_song_choice].hit[current_note];
     f88:	30 91 55 10 	lds	r19, 0x1055	; 0x801055 <current_song_choice>
     f8c:	20 91 56 10 	lds	r18, 0x1056	; 0x801056 <current_note>
     f90:	42 ed       	ldi	r20, 0xD2	; 210
     f92:	57 e0       	ldi	r21, 0x07	; 7
     f94:	34 9f       	mul	r19, r20
     f96:	c0 01       	movw	r24, r0
     f98:	35 9f       	mul	r19, r21
     f9a:	90 0d       	add	r25, r0
     f9c:	11 24       	eor	r1, r1
     f9e:	80 54       	subi	r24, 0x40	; 64
     fa0:	9f 4e       	sbci	r25, 0xEF	; 239
     fa2:	82 0f       	add	r24, r18
     fa4:	91 1d       	adc	r25, r1
     fa6:	fc 01       	movw	r30, r24
     fa8:	e4 52       	subi	r30, 0x24	; 36
     faa:	fa 4f       	sbci	r31, 0xFA	; 250
     fac:	20 81       	ld	r18, Z
     fae:	20 93 3c 10 	sts	0x103C, r18	; 0x80103c <__data_end>
            if(hitting_note < songs[current_song_choice].timing_hit[current_note] && (already_hit == false)){
     fb2:	e6 50       	subi	r30, 0x06	; 6
     fb4:	ff 4f       	sbci	r31, 0xFF	; 255
     fb6:	90 81       	ld	r25, Z
     fb8:	80 91 3e 10 	lds	r24, 0x103E	; 0x80103e <hitting_note.2341>
     fbc:	89 17       	cp	r24, r25
     fbe:	c0 f4       	brcc	.+48     	; 0xff0 <Note_Tick+0xc6>
     fc0:	80 91 3d 10 	lds	r24, 0x103D	; 0x80103d <already_hit.2342>
     fc4:	81 11       	cpse	r24, r1
     fc6:	14 c0       	rjmp	.+40     	; 0xff0 <Note_Tick+0xc6>
                if(player_button_press == note_to_hit){
     fc8:	80 91 54 10 	lds	r24, 0x1054	; 0x801054 <player_button_press>
     fcc:	28 13       	cpse	r18, r24
     fce:	09 c0       	rjmp	.+18     	; 0xfe2 <Note_Tick+0xb8>
                    current_score++;
     fd0:	80 91 53 10 	lds	r24, 0x1053	; 0x801053 <current_score>
     fd4:	8f 5f       	subi	r24, 0xFF	; 255
     fd6:	80 93 53 10 	sts	0x1053, r24	; 0x801053 <current_score>
                    score_increase = true;
     fda:	81 e0       	ldi	r24, 0x01	; 1
     fdc:	80 93 49 10 	sts	0x1049, r24	; 0x801049 <score_increase>
     fe0:	02 c0       	rjmp	.+4      	; 0xfe6 <Note_Tick+0xbc>
                }
                else{
                    score_increase = false;
     fe2:	10 92 49 10 	sts	0x1049, r1	; 0x801049 <score_increase>
                }
                hitting_note++;
     fe6:	80 91 3e 10 	lds	r24, 0x103E	; 0x80103e <hitting_note.2341>
     fea:	8f 5f       	subi	r24, 0xFF	; 255
     fec:	80 93 3e 10 	sts	0x103E, r24	; 0x80103e <hitting_note.2341>
            }
            if(play_note < songs[current_song_choice].timing[current_note]){
     ff0:	90 91 55 10 	lds	r25, 0x1055	; 0x801055 <current_song_choice>
     ff4:	80 91 56 10 	lds	r24, 0x1056	; 0x801056 <current_note>
     ff8:	22 ed       	ldi	r18, 0xD2	; 210
     ffa:	37 e0       	ldi	r19, 0x07	; 7
     ffc:	92 9f       	mul	r25, r18
     ffe:	f0 01       	movw	r30, r0
    1000:	93 9f       	mul	r25, r19
    1002:	f0 0d       	add	r31, r0
    1004:	11 24       	eor	r1, r1
    1006:	e0 54       	subi	r30, 0x40	; 64
    1008:	ff 4e       	sbci	r31, 0xEF	; 239
    100a:	e8 0f       	add	r30, r24
    100c:	f1 1d       	adc	r31, r1
    100e:	e8 51       	subi	r30, 0x18	; 24
    1010:	fc 4f       	sbci	r31, 0xFC	; 252
    1012:	90 81       	ld	r25, Z
    1014:	80 91 40 10 	lds	r24, 0x1040	; 0x801040 <play_note.2338>
    1018:	89 17       	cp	r24, r25
    101a:	80 f5       	brcc	.+96     	; 0x107c <Note_Tick+0x152>
                if(player_button_press == note_to_hit){
    101c:	90 91 54 10 	lds	r25, 0x1054	; 0x801054 <player_button_press>
    1020:	80 91 3c 10 	lds	r24, 0x103C	; 0x80103c <__data_end>
    1024:	98 13       	cpse	r25, r24
    1026:	09 c0       	rjmp	.+18     	; 0x103a <Note_Tick+0x110>
                    current_score++;
    1028:	80 91 53 10 	lds	r24, 0x1053	; 0x801053 <current_score>
    102c:	8f 5f       	subi	r24, 0xFF	; 255
    102e:	80 93 53 10 	sts	0x1053, r24	; 0x801053 <current_score>
                    score_increase = true;
    1032:	81 e0       	ldi	r24, 0x01	; 1
    1034:	80 93 49 10 	sts	0x1049, r24	; 0x801049 <score_increase>
    1038:	02 c0       	rjmp	.+4      	; 0x103e <Note_Tick+0x114>
                }
                else{
                    score_increase = false;
    103a:	10 92 49 10 	sts	0x1049, r1	; 0x801049 <score_increase>
                }
                set_PWM(songs[current_song_choice].notes[current_note]);
    103e:	80 91 56 10 	lds	r24, 0x1056	; 0x801056 <current_note>
    1042:	90 91 55 10 	lds	r25, 0x1055	; 0x801055 <current_song_choice>
    1046:	22 ed       	ldi	r18, 0xD2	; 210
    1048:	37 e0       	ldi	r19, 0x07	; 7
    104a:	92 9f       	mul	r25, r18
    104c:	f0 01       	movw	r30, r0
    104e:	93 9f       	mul	r25, r19
    1050:	f0 0d       	add	r31, r0
    1052:	11 24       	eor	r1, r1
    1054:	94 e0       	ldi	r25, 0x04	; 4
    1056:	89 9f       	mul	r24, r25
    1058:	e0 0d       	add	r30, r0
    105a:	f1 1d       	adc	r31, r1
    105c:	11 24       	eor	r1, r1
    105e:	e0 54       	subi	r30, 0x40	; 64
    1060:	ff 4e       	sbci	r31, 0xEF	; 239
    1062:	60 81       	ld	r22, Z
    1064:	71 81       	ldd	r23, Z+1	; 0x01
    1066:	82 81       	ldd	r24, Z+2	; 0x02
    1068:	93 81       	ldd	r25, Z+3	; 0x03
    106a:	e4 de       	rcall	.-568    	; 0xe34 <set_PWM>
                play_note++;
    106c:	80 91 40 10 	lds	r24, 0x1040	; 0x801040 <play_note.2338>
    1070:	8f 5f       	subi	r24, 0xFF	; 255
    1072:	80 93 40 10 	sts	0x1040, r24	; 0x801040 <play_note.2338>
                break;
    1076:	82 e0       	ldi	r24, 0x02	; 2
    1078:	90 e0       	ldi	r25, 0x00	; 0
    107a:	08 95       	ret
            }
            else{
                set_PWM(0);
    107c:	60 e0       	ldi	r22, 0x00	; 0
    107e:	70 e0       	ldi	r23, 0x00	; 0
    1080:	cb 01       	movw	r24, r22
    1082:	d8 de       	rcall	.-592    	; 0xe34 <set_PWM>
                if(rest_note < songs[current_song_choice].rest_timing[current_note]){
    1084:	80 91 55 10 	lds	r24, 0x1055	; 0x801055 <current_song_choice>
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	20 91 56 10 	lds	r18, 0x1056	; 0x801056 <current_note>
    108e:	30 91 3f 10 	lds	r19, 0x103F	; 0x80103f <rest_note.2339>
    1092:	42 ed       	ldi	r20, 0xD2	; 210
    1094:	57 e0       	ldi	r21, 0x07	; 7
    1096:	84 9f       	mul	r24, r20
    1098:	f0 01       	movw	r30, r0
    109a:	85 9f       	mul	r24, r21
    109c:	f0 0d       	add	r31, r0
    109e:	94 9f       	mul	r25, r20
    10a0:	f0 0d       	add	r31, r0
    10a2:	11 24       	eor	r1, r1
    10a4:	e0 54       	subi	r30, 0x40	; 64
    10a6:	ff 4e       	sbci	r31, 0xEF	; 239
    10a8:	e2 0f       	add	r30, r18
    10aa:	f1 1d       	adc	r31, r1
    10ac:	ee 51       	subi	r30, 0x1E	; 30
    10ae:	fb 4f       	sbci	r31, 0xFB	; 251
    10b0:	40 81       	ld	r20, Z
    10b2:	34 17       	cp	r19, r20
    10b4:	30 f4       	brcc	.+12     	; 0x10c2 <Note_Tick+0x198>
                    rest_note++;
    10b6:	3f 5f       	subi	r19, 0xFF	; 255
    10b8:	30 93 3f 10 	sts	0x103F, r19	; 0x80103f <rest_note.2339>
    10bc:	82 e0       	ldi	r24, 0x02	; 2
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	08 95       	ret
                }
                else{
                    play_note = 0;
    10c2:	10 92 40 10 	sts	0x1040, r1	; 0x801040 <play_note.2338>
                    rest_note = 0;
    10c6:	10 92 3f 10 	sts	0x103F, r1	; 0x80103f <rest_note.2339>
                    hitting_note = 0;
    10ca:	10 92 3e 10 	sts	0x103E, r1	; 0x80103e <hitting_note.2341>
                    already_hit = false;
    10ce:	10 92 3d 10 	sts	0x103D, r1	; 0x80103d <already_hit.2342>
                    if(current_note < songs[current_song_choice].length){
    10d2:	42 ed       	ldi	r20, 0xD2	; 210
    10d4:	57 e0       	ldi	r21, 0x07	; 7
    10d6:	84 9f       	mul	r24, r20
    10d8:	f0 01       	movw	r30, r0
    10da:	85 9f       	mul	r24, r21
    10dc:	f0 0d       	add	r31, r0
    10de:	94 9f       	mul	r25, r20
    10e0:	f0 0d       	add	r31, r0
    10e2:	11 24       	eor	r1, r1
    10e4:	ef 56       	subi	r30, 0x6F	; 111
    10e6:	f7 4e       	sbci	r31, 0xE7	; 231
    10e8:	80 81       	ld	r24, Z
    10ea:	28 17       	cp	r18, r24
    10ec:	30 f4       	brcc	.+12     	; 0x10fa <Note_Tick+0x1d0>
                        current_note++;
    10ee:	2f 5f       	subi	r18, 0xFF	; 255
    10f0:	20 93 56 10 	sts	0x1056, r18	; 0x801056 <current_note>
    10f4:	82 e0       	ldi	r24, 0x02	; 2
    10f6:	90 e0       	ldi	r25, 0x00	; 0
    10f8:	08 95       	ret
                    }
                    else{
                        playing = false;
    10fa:	10 92 48 10 	sts	0x1048, r1	; 0x801048 <playing>
                        song_finished = true;
    10fe:	81 e0       	ldi	r24, 0x01	; 1
    1100:	80 93 4a 10 	sts	0x104A, r24	; 0x80104a <song_finished>
                        break;
    1104:	82 e0       	ldi	r24, 0x02	; 2
    1106:	90 e0       	ldi	r25, 0x00	; 0
                    }
                }
            }
            break;
        case Note_Reset:
            PWM_off();
    1108:	08 95       	ret
    110a:	0a df       	rcall	.-492    	; 0xf20 <PWM_off>
            current_note = 0;
    110c:	10 92 56 10 	sts	0x1056, r1	; 0x801056 <current_note>
            score_increase = false;
    1110:	10 92 49 10 	sts	0x1049, r1	; 0x801049 <score_increase>
            break;
    1114:	83 e0       	ldi	r24, 0x03	; 3
    1116:	90 e0       	ldi	r25, 0x00	; 0
    }
    return state;
}
    1118:	08 95       	ret

0000111a <main>:


int main(void)
{
    //LCD PORTS & RGB MATRIX
    DDRD = 0xFF; PORTD = 0x00;
    111a:	8f ef       	ldi	r24, 0xFF	; 255
    111c:	8a b9       	out	0x0a, r24	; 10
    111e:	1b b8       	out	0x0b, r1	; 11
    DDRC = 0XFF; PORTC = 0x00; //0 & 1 are LCD Control Lines, 2,3,4 are RGB PORTS
    1120:	87 b9       	out	0x07, r24	; 7
    1122:	18 b8       	out	0x08, r1	; 8
    
    //BUTTON INPUT PORTS
    DDRA = 0x00; PORTA = 0xFF;
    1124:	11 b8       	out	0x01, r1	; 1
    1126:	82 b9       	out	0x02, r24	; 2
    
    //BUZZER PORT
    DDRB = 0x0FF; PORTB = 0x00; //PB6 is buzzer
    1128:	84 b9       	out	0x04, r24	; 4
    112a:	15 b8       	out	0x05, r1	; 5
    
    //Initialize LCD and Matrix
    LCD_init();
    112c:	09 d9       	rcall	.-3566   	; 0x340 <LCD_init>
    Shift_Init();   
    112e:	49 dd       	rcall	.-1390   	; 0xbc2 <Shift_Init>
    Shift_transmit_data(0);
    1130:	80 e0       	ldi	r24, 0x00	; 0
    1132:	5c dd       	rcall	.-1352   	; 0xbec <Shift_transmit_data>
    Shift_transmit_data(255);
    1134:	8f ef       	ldi	r24, 0xFF	; 255
    1136:	5a dd       	rcall	.-1356   	; 0xbec <Shift_transmit_data>
    
    //eeprom
    if(eeprom_read_byte((uint8_t*)1) == 255) {
    1138:	81 e0       	ldi	r24, 0x01	; 1
    113a:	90 e0       	ldi	r25, 0x00	; 0
    113c:	d3 d2       	rcall	.+1446   	; 0x16e4 <eeprom_read_byte>
    113e:	8f 3f       	cpi	r24, 0xFF	; 255
    1140:	21 f4       	brne	.+8      	; 0x114a <main+0x30>
        eeprom_update_byte((uint8_t*)1, (uint8_t) 0);
    1142:	60 e0       	ldi	r22, 0x00	; 0
    1144:	81 e0       	ldi	r24, 0x01	; 1
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	d5 d2       	rcall	.+1450   	; 0x16f4 <eeprom_update_byte>
    }
    if(eeprom_read_byte((uint8_t*)2) == 255) {
    114a:	82 e0       	ldi	r24, 0x02	; 2
    114c:	90 e0       	ldi	r25, 0x00	; 0
    114e:	ca d2       	rcall	.+1428   	; 0x16e4 <eeprom_read_byte>
    1150:	8f 3f       	cpi	r24, 0xFF	; 255
    1152:	21 f4       	brne	.+8      	; 0x115c <main+0x42>
        eeprom_update_byte((uint8_t*)2, (uint8_t) 0);
    1154:	60 e0       	ldi	r22, 0x00	; 0
    1156:	82 e0       	ldi	r24, 0x02	; 2
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	cc d2       	rcall	.+1432   	; 0x16f4 <eeprom_update_byte>
    }
    
    songs[0].high_score = (unsigned)(char)eeprom_read_byte((uint8_t*) 1);
    115c:	81 e0       	ldi	r24, 0x01	; 1
    115e:	90 e0       	ldi	r25, 0x00	; 0
    1160:	c1 d2       	rcall	.+1410   	; 0x16e4 <eeprom_read_byte>
    1162:	80 93 90 18 	sts	0x1890, r24	; 0x801890 <songs+0x7d0>
    1166:	82 e0       	ldi	r24, 0x02	; 2
    songs[1].high_score = (unsigned)(char)eeprom_read_byte((uint8_t*) 2);
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	bc d2       	rcall	.+1400   	; 0x16e4 <eeprom_read_byte>
    116c:	80 93 62 20 	sts	0x2062, r24	; 0x802062 <songs+0xfa2>
    1170:	8a ef       	ldi	r24, 0xFA	; 250
    1172:	80 93 91 18 	sts	0x1891, r24	; 0x801891 <songs+0x7d1>
    
    songs[0].length = SONG_LENGTH;
    1176:	89 e0       	ldi	r24, 0x09	; 9
    1178:	80 93 63 20 	sts	0x2063, r24	; 0x802063 <songs+0xfa3>
    songs[1].length = 9;    
    117c:	0f 2e       	mov	r0, r31
    117e:	f6 ec       	ldi	r31, 0xC6	; 198
    1180:	cf 2e       	mov	r12, r31
    1182:	fb e0       	ldi	r31, 0x0B	; 11
    1184:	df 2e       	mov	r13, r31
    1186:	f0 2d       	mov	r31, r0
    1188:	0f 2e       	mov	r0, r31
    118a:	f0 ec       	ldi	r31, 0xC0	; 192
    118c:	ef 2e       	mov	r14, r31
    118e:	f0 e1       	ldi	r31, 0x10	; 16
    1190:	ff 2e       	mov	r15, r31
    1192:	f0 2d       	mov	r31, r0
    1194:	0c ec       	ldi	r16, 0xCC	; 204
    1196:	1a e0       	ldi	r17, 0x0A	; 10
    1198:	68 ea       	ldi	r22, 0xA8	; 168
    119a:	74 e1       	ldi	r23, 0x14	; 20
    119c:	42 ed       	ldi	r20, 0xD2	; 210
    119e:	59 e0       	ldi	r21, 0x09	; 9
    11a0:	22 ea       	ldi	r18, 0xA2	; 162
    11a2:	35 e1       	ldi	r19, 0x15	; 21
    11a4:	0f 2e       	mov	r0, r31
    11a6:	f8 ed       	ldi	r31, 0xD8	; 216
    11a8:	4f 2e       	mov	r4, r31
    11aa:	f8 e0       	ldi	r31, 0x08	; 8
    11ac:	5f 2e       	mov	r5, r31
    11ae:	f0 2d       	mov	r31, r0
    11b0:	8c e9       	ldi	r24, 0x9C	; 156
    11b2:	96 e1       	ldi	r25, 0x16	; 22
    11b4:	ce ed       	ldi	r28, 0xDE	; 222
    11b6:	d7 e0       	ldi	r29, 0x07	; 7
    11b8:	a6 e9       	ldi	r26, 0x96	; 150
    11ba:	b7 e1       	ldi	r27, 0x17	; 23
    11bc:	12 01       	movw	r2, r4
    11be:	0f 2e       	mov	r0, r31
    11c0:	f6 e9       	ldi	r31, 0x96	; 150
    11c2:	7f 2e       	mov	r7, r31
    11c4:	f0 2d       	mov	r31, r0
    11c6:	f6 01       	movw	r30, r12
    11c8:	81 90       	ld	r8, Z+
    //tasks
    for(unsigned char j = 0; j < 150; j++) {
        songs[0].notes[j] = notes_zense[j];
    11ca:	91 90       	ld	r9, Z+
    11cc:	a1 90       	ld	r10, Z+
    11ce:	b1 90       	ld	r11, Z+
    11d0:	6f 01       	movw	r12, r30
    11d2:	f7 01       	movw	r30, r14
    11d4:	81 92       	st	Z+, r8
    11d6:	91 92       	st	Z+, r9
    11d8:	a1 92       	st	Z+, r10
    11da:	b1 92       	st	Z+, r11
    11dc:	7f 01       	movw	r14, r30
    11de:	f8 01       	movw	r30, r16
    11e0:	b1 90       	ld	r11, Z+
        songs[0].timing[j] = timing_zense[j];
    11e2:	8f 01       	movw	r16, r30
    11e4:	fb 01       	movw	r30, r22
    11e6:	b1 92       	st	Z+, r11
    11e8:	bf 01       	movw	r22, r30
    11ea:	fa 01       	movw	r30, r20
    11ec:	b1 90       	ld	r11, Z+
        songs[0].rest_timing[j] = rests_zense[j];
    11ee:	af 01       	movw	r20, r30
    11f0:	f9 01       	movw	r30, r18
    11f2:	b1 92       	st	Z+, r11
    11f4:	9f 01       	movw	r18, r30
    11f6:	f1 01       	movw	r30, r2
    11f8:	b1 90       	ld	r11, Z+
        songs[0].hit[j] = hit_zense[j];
    11fa:	1f 01       	movw	r2, r30
    11fc:	fc 01       	movw	r30, r24
    11fe:	b1 92       	st	Z+, r11
    1200:	cf 01       	movw	r24, r30
    1202:	b9 90       	ld	r11, Y+
    1204:	bd 92       	st	X+, r11
        songs[0].timing_hit[j] = timing_hit_zense[j];
    1206:	7a 94       	dec	r7
    1208:	71 10       	cpse	r7, r1
    120a:	dd cf       	rjmp	.-70     	; 0x11c6 <main+0xac>
    songs[1].high_score = (unsigned)(char)eeprom_read_byte((uint8_t*) 2);
    
    songs[0].length = SONG_LENGTH;
    songs[1].length = 9;    
    //tasks
    for(unsigned char j = 0; j < 150; j++) {
    120c:	0f 2e       	mov	r0, r31
    120e:	f6 ef       	ldi	r31, 0xF6	; 246
    1210:	ef 2e       	mov	r14, r31
    1212:	f3 e0       	ldi	r31, 0x03	; 3
    1214:	ff 2e       	mov	r15, r31
    1216:	f0 2d       	mov	r31, r0
    1218:	02 e9       	ldi	r16, 0x92	; 146
    121a:	18 e1       	ldi	r17, 0x18	; 24
    121c:	6c ef       	ldi	r22, 0xFC	; 252
    121e:	72 e0       	ldi	r23, 0x02	; 2
    1220:	4a e7       	ldi	r20, 0x7A	; 122
    1222:	5c e1       	ldi	r21, 0x1C	; 28
    1224:	22 e0       	ldi	r18, 0x02	; 2
    1226:	32 e0       	ldi	r19, 0x02	; 2
    1228:	84 e7       	ldi	r24, 0x74	; 116
    122a:	9d e1       	ldi	r25, 0x1D	; 29
    122c:	ce e6       	ldi	r28, 0x6E	; 110
    122e:	de e1       	ldi	r29, 0x1E	; 30
    1230:	a8 e0       	ldi	r26, 0x08	; 8
    1232:	b1 e0       	ldi	r27, 0x01	; 1
    1234:	0f 2e       	mov	r0, r31
    1236:	f8 e6       	ldi	r31, 0x68	; 104
    1238:	2f 2e       	mov	r2, r31
    123a:	ff e1       	ldi	r31, 0x1F	; 31
    123c:	3f 2e       	mov	r3, r31
    123e:	f0 2d       	mov	r31, r0
    1240:	d1 2c       	mov	r13, r1
    1242:	f7 01       	movw	r30, r14
    1244:	81 90       	ld	r8, Z+
        songs[0].hit[j] = hit_zense[j];
        songs[0].timing_hit[j] = timing_hit_zense[j];
    }
    
    for(unsigned char i = 0; i < 9; i++) {
        songs[1].notes[i] = notes_mii[i];
    1246:	91 90       	ld	r9, Z+
    1248:	a1 90       	ld	r10, Z+
    124a:	b1 90       	ld	r11, Z+
    124c:	7f 01       	movw	r14, r30
    124e:	f8 01       	movw	r30, r16
    1250:	81 92       	st	Z+, r8
    1252:	91 92       	st	Z+, r9
    1254:	a1 92       	st	Z+, r10
    1256:	b1 92       	st	Z+, r11
    1258:	8f 01       	movw	r16, r30
    125a:	fb 01       	movw	r30, r22
    125c:	c1 90       	ld	r12, Z+
        songs[1].timing[i] = timing_mii[i];
    125e:	bf 01       	movw	r22, r30
    1260:	fa 01       	movw	r30, r20
    1262:	c1 92       	st	Z+, r12
    1264:	af 01       	movw	r20, r30
    1266:	f9 01       	movw	r30, r18
    1268:	c1 90       	ld	r12, Z+
        songs[1].rest_timing[i] = rests_mii[i];
    126a:	9f 01       	movw	r18, r30
    126c:	fc 01       	movw	r30, r24
    126e:	c1 92       	st	Z+, r12
    1270:	cf 01       	movw	r24, r30
    1272:	f2 01       	movw	r30, r4
    1274:	c1 90       	ld	r12, Z+
        songs[1].hit[i] = hit_zense[i];
    1276:	2f 01       	movw	r4, r30
    1278:	c9 92       	st	Y+, r12
    127a:	cd 90       	ld	r12, X+
    127c:	f1 01       	movw	r30, r2
        songs[1].timing_hit[i] = timing_hit_mii[i];
    127e:	c1 92       	st	Z+, r12
    1280:	1f 01       	movw	r2, r30
    1282:	d3 94       	inc	r13
    1284:	f9 e0       	ldi	r31, 0x09	; 9
        songs[0].rest_timing[j] = rests_zense[j];
        songs[0].hit[j] = hit_zense[j];
        songs[0].timing_hit[j] = timing_hit_zense[j];
    }
    
    for(unsigned char i = 0; i < 9; i++) {
    1286:	df 12       	cpse	r13, r31
    1288:	dc cf       	rjmp	.-72     	; 0x1242 <main+0x128>
    128a:	e0 e6       	ldi	r30, 0x60	; 96
    128c:	f0 e1       	ldi	r31, 0x10	; 16
    
    
    //Task Code
    unsigned char tasks_increment = 0;
    
    tasks[tasks_increment].state = LFT_INIT;
    128e:	11 82       	std	Z+1, r1	; 0x01
    1290:	10 82       	st	Z, r1
    1292:	84 e1       	ldi	r24, 0x14	; 20
    1294:	90 e0       	ldi	r25, 0x00	; 0
    tasks[tasks_increment].period = 20;
    1296:	a0 e0       	ldi	r26, 0x00	; 0
    1298:	b0 e0       	ldi	r27, 0x00	; 0
    129a:	82 83       	std	Z+2, r24	; 0x02
    129c:	93 83       	std	Z+3, r25	; 0x03
    129e:	a4 83       	std	Z+4, r26	; 0x04
    12a0:	b5 83       	std	Z+5, r27	; 0x05
    12a2:	86 83       	std	Z+6, r24	; 0x06
    12a4:	97 83       	std	Z+7, r25	; 0x07
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
    12a6:	a0 87       	std	Z+8, r26	; 0x08
    12a8:	b1 87       	std	Z+9, r27	; 0x09
    12aa:	22 e8       	ldi	r18, 0x82	; 130
    12ac:	30 e0       	ldi	r19, 0x00	; 0
    tasks[tasks_increment].TickFct = &Left_Tick;
    12ae:	33 87       	std	Z+11, r19	; 0x0b
    12b0:	22 87       	std	Z+10, r18	; 0x0a
    12b2:	15 86       	std	Z+13, r1	; 0x0d
    12b4:	14 86       	std	Z+12, r1	; 0x0c
    
    tasks_increment++;
    
    tasks[tasks_increment].state = RGHT_INIT;
    12b6:	86 87       	std	Z+14, r24	; 0x0e
    12b8:	97 87       	std	Z+15, r25	; 0x0f
    tasks[tasks_increment].period = 20;
    12ba:	a0 8b       	std	Z+16, r26	; 0x10
    12bc:	b1 8b       	std	Z+17, r27	; 0x11
    12be:	82 8b       	std	Z+18, r24	; 0x12
    12c0:	93 8b       	std	Z+19, r25	; 0x13
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
    12c2:	a4 8b       	std	Z+20, r26	; 0x14
    12c4:	b5 8b       	std	Z+21, r27	; 0x15
    12c6:	25 e9       	ldi	r18, 0x95	; 149
    12c8:	30 e0       	ldi	r19, 0x00	; 0
    tasks[tasks_increment].TickFct = &Right_Tick;
    12ca:	37 8b       	std	Z+23, r19	; 0x17
    12cc:	26 8b       	std	Z+22, r18	; 0x16
    12ce:	11 8e       	std	Z+25, r1	; 0x19
    12d0:	10 8e       	std	Z+24, r1	; 0x18
    
    tasks_increment++;
    
    tasks[tasks_increment].state = UP_INIT;
    12d2:	82 8f       	std	Z+26, r24	; 0x1a
    12d4:	93 8f       	std	Z+27, r25	; 0x1b
    tasks[tasks_increment].period = 20;
    12d6:	a4 8f       	std	Z+28, r26	; 0x1c
    12d8:	b5 8f       	std	Z+29, r27	; 0x1d
    12da:	86 8f       	std	Z+30, r24	; 0x1e
    12dc:	97 8f       	std	Z+31, r25	; 0x1f
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
    12de:	a0 a3       	std	Z+32, r26	; 0x20
    12e0:	b1 a3       	std	Z+33, r27	; 0x21
    12e2:	28 ea       	ldi	r18, 0xA8	; 168
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    tasks[tasks_increment].TickFct = &Up_Tick;
    12e6:	33 a3       	std	Z+35, r19	; 0x23
    12e8:	22 a3       	std	Z+34, r18	; 0x22
    12ea:	15 a2       	std	Z+37, r1	; 0x25
    12ec:	14 a2       	std	Z+36, r1	; 0x24
    
    
    tasks_increment++;
    
    tasks[tasks_increment].state = DOWN_INIT;
    12ee:	86 a3       	std	Z+38, r24	; 0x26
    12f0:	97 a3       	std	Z+39, r25	; 0x27
    tasks[tasks_increment].period = 20;
    12f2:	a0 a7       	std	Z+40, r26	; 0x28
    12f4:	b1 a7       	std	Z+41, r27	; 0x29
    12f6:	82 a7       	std	Z+42, r24	; 0x2a
    12f8:	93 a7       	std	Z+43, r25	; 0x2b
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
    12fa:	a4 a7       	std	Z+44, r26	; 0x2c
    12fc:	b5 a7       	std	Z+45, r27	; 0x2d
    12fe:	8b eb       	ldi	r24, 0xBB	; 187
    1300:	90 e0       	ldi	r25, 0x00	; 0
    tasks[tasks_increment].TickFct = &Down_Tick;
    1302:	97 a7       	std	Z+47, r25	; 0x2f
    1304:	86 a7       	std	Z+46, r24	; 0x2e
    1306:	11 aa       	std	Z+49, r1	; 0x31
    1308:	10 aa       	std	Z+48, r1	; 0x30
    
    
    tasks_increment++;
    
    tasks[tasks_increment].state = RGB_INIT;
    130a:	8a e0       	ldi	r24, 0x0A	; 10
    130c:	90 e0       	ldi	r25, 0x00	; 0
    tasks[tasks_increment].period = 10;
    130e:	a0 e0       	ldi	r26, 0x00	; 0
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	82 ab       	std	Z+50, r24	; 0x32
    1314:	93 ab       	std	Z+51, r25	; 0x33
    1316:	a4 ab       	std	Z+52, r26	; 0x34
    1318:	b5 ab       	std	Z+53, r27	; 0x35
    131a:	86 ab       	std	Z+54, r24	; 0x36
    131c:	97 ab       	std	Z+55, r25	; 0x37
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
    131e:	a0 af       	std	Z+56, r26	; 0x38
    1320:	b1 af       	std	Z+57, r27	; 0x39
    1322:	27 e0       	ldi	r18, 0x07	; 7
    1324:	36 e0       	ldi	r19, 0x06	; 6
    tasks[tasks_increment].TickFct = &RGB_Matrix_Tick;
    1326:	33 af       	std	Z+59, r19	; 0x3b
    1328:	22 af       	std	Z+58, r18	; 0x3a
    132a:	15 ae       	std	Z+61, r1	; 0x3d
    132c:	14 ae       	std	Z+60, r1	; 0x3c
    
    
    tasks_increment++;
    
    tasks[tasks_increment].state = LCD_Menu_Init;
    132e:	4e e1       	ldi	r20, 0x1E	; 30
    1330:	50 e0       	ldi	r21, 0x00	; 0
    tasks[tasks_increment].period = 30;
    1332:	60 e0       	ldi	r22, 0x00	; 0
    1334:	70 e0       	ldi	r23, 0x00	; 0
    1336:	40 93 9e 10 	sts	0x109E, r20	; 0x80109e <tasks+0x3e>
    133a:	50 93 9f 10 	sts	0x109F, r21	; 0x80109f <tasks+0x3f>
    133e:	60 93 a0 10 	sts	0x10A0, r22	; 0x8010a0 <tasks+0x40>
    1342:	70 93 a1 10 	sts	0x10A1, r23	; 0x8010a1 <tasks+0x41>
    1346:	40 93 a2 10 	sts	0x10A2, r20	; 0x8010a2 <tasks+0x42>
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
    134a:	50 93 a3 10 	sts	0x10A3, r21	; 0x8010a3 <tasks+0x43>
    134e:	60 93 a4 10 	sts	0x10A4, r22	; 0x8010a4 <tasks+0x44>
    1352:	70 93 a5 10 	sts	0x10A5, r23	; 0x8010a5 <tasks+0x45>
    1356:	26 ee       	ldi	r18, 0xE6	; 230
    1358:	31 e0       	ldi	r19, 0x01	; 1
    tasks[tasks_increment].TickFct = &LCD_Menu_Tick;
    135a:	30 93 a7 10 	sts	0x10A7, r19	; 0x8010a7 <tasks+0x47>
    135e:	20 93 a6 10 	sts	0x10A6, r18	; 0x8010a6 <tasks+0x46>
    1362:	10 92 a9 10 	sts	0x10A9, r1	; 0x8010a9 <tasks+0x49>
    
    tasks_increment++;
    
    tasks[tasks_increment].state = Note_INIT;
    1366:	10 92 a8 10 	sts	0x10A8, r1	; 0x8010a8 <tasks+0x48>
    136a:	80 93 aa 10 	sts	0x10AA, r24	; 0x8010aa <tasks+0x4a>
    tasks[tasks_increment].period = 10;
    136e:	90 93 ab 10 	sts	0x10AB, r25	; 0x8010ab <tasks+0x4b>
    1372:	a0 93 ac 10 	sts	0x10AC, r26	; 0x8010ac <tasks+0x4c>
    1376:	b0 93 ad 10 	sts	0x10AD, r27	; 0x8010ad <tasks+0x4d>
    137a:	80 93 ae 10 	sts	0x10AE, r24	; 0x8010ae <tasks+0x4e>
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
    137e:	90 93 af 10 	sts	0x10AF, r25	; 0x8010af <tasks+0x4f>
    1382:	a0 93 b0 10 	sts	0x10B0, r26	; 0x8010b0 <tasks+0x50>
    1386:	b0 93 b1 10 	sts	0x10B1, r27	; 0x8010b1 <tasks+0x51>
    138a:	85 e9       	ldi	r24, 0x95	; 149
    138c:	97 e0       	ldi	r25, 0x07	; 7
    tasks[tasks_increment].TickFct = &Note_Tick;
    138e:	90 93 b3 10 	sts	0x10B3, r25	; 0x8010b3 <tasks+0x53>
    1392:	80 93 b2 10 	sts	0x10B2, r24	; 0x8010b2 <tasks+0x52>
    1396:	10 92 b5 10 	sts	0x10B5, r1	; 0x8010b5 <tasks+0x55>
    
    tasks_increment++;
    
    tasks[tasks_increment].state = Player_Init;
    139a:	10 92 b4 10 	sts	0x10B4, r1	; 0x8010b4 <tasks+0x54>
    139e:	85 e0       	ldi	r24, 0x05	; 5
    13a0:	90 e0       	ldi	r25, 0x00	; 0
    tasks[tasks_increment].period = 5;
    13a2:	a0 e0       	ldi	r26, 0x00	; 0
    13a4:	b0 e0       	ldi	r27, 0x00	; 0
    13a6:	80 93 b6 10 	sts	0x10B6, r24	; 0x8010b6 <tasks+0x56>
    13aa:	90 93 b7 10 	sts	0x10B7, r25	; 0x8010b7 <tasks+0x57>
    13ae:	a0 93 b8 10 	sts	0x10B8, r26	; 0x8010b8 <tasks+0x58>
    13b2:	b0 93 b9 10 	sts	0x10B9, r27	; 0x8010b9 <tasks+0x59>
    13b6:	80 93 ba 10 	sts	0x10BA, r24	; 0x8010ba <tasks+0x5a>
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
    13ba:	90 93 bb 10 	sts	0x10BB, r25	; 0x8010bb <tasks+0x5b>
    13be:	a0 93 bc 10 	sts	0x10BC, r26	; 0x8010bc <tasks+0x5c>
    13c2:	b0 93 bd 10 	sts	0x10BD, r27	; 0x8010bd <tasks+0x5d>
    13c6:	8e ec       	ldi	r24, 0xCE	; 206
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    tasks[tasks_increment].TickFct = &Player_Tick;
    13ca:	90 93 bf 10 	sts	0x10BF, r25	; 0x8010bf <tasks+0x5f>
    13ce:	80 93 be 10 	sts	0x10BE, r24	; 0x8010be <tasks+0x5e>
    tasks[tasks_increment].period = 60;
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
    tasks[tasks_increment].TickFct = &EZ_TICK;
    */
    //Timer
    TimerSet(tasksPeriodGCD);
    13d2:	65 e0       	ldi	r22, 0x05	; 5
    13d4:	70 e0       	ldi	r23, 0x00	; 0
    13d6:	80 e0       	ldi	r24, 0x00	; 0
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	2f db       	rcall	.-2466   	; 0xa3a <TimerSet>
    13dc:	3f db       	rcall	.-2434   	; 0xa5c <TimerOn>
    TimerOn();
    13de:	ff cf       	rjmp	.-2      	; 0x13de <main+0x2c4>

000013e0 <__cmpsf2>:
    13e0:	9c d0       	rcall	.+312    	; 0x151a <__fp_cmp>
    13e2:	08 f4       	brcc	.+2      	; 0x13e6 <__cmpsf2+0x6>
    13e4:	81 e0       	ldi	r24, 0x01	; 1
    13e6:	08 95       	ret

000013e8 <__divsf3>:
    13e8:	0c d0       	rcall	.+24     	; 0x1402 <__divsf3x>
    13ea:	d2 c0       	rjmp	.+420    	; 0x1590 <__fp_round>
    13ec:	ca d0       	rcall	.+404    	; 0x1582 <__fp_pscB>
    13ee:	40 f0       	brcs	.+16     	; 0x1400 <__divsf3+0x18>
    13f0:	c1 d0       	rcall	.+386    	; 0x1574 <__fp_pscA>
    13f2:	30 f0       	brcs	.+12     	; 0x1400 <__divsf3+0x18>
    13f4:	21 f4       	brne	.+8      	; 0x13fe <__divsf3+0x16>
    13f6:	5f 3f       	cpi	r21, 0xFF	; 255
    13f8:	19 f0       	breq	.+6      	; 0x1400 <__divsf3+0x18>
    13fa:	b3 c0       	rjmp	.+358    	; 0x1562 <__fp_inf>
    13fc:	51 11       	cpse	r21, r1
    13fe:	fc c0       	rjmp	.+504    	; 0x15f8 <__fp_szero>
    1400:	b6 c0       	rjmp	.+364    	; 0x156e <__fp_nan>

00001402 <__divsf3x>:
    1402:	d7 d0       	rcall	.+430    	; 0x15b2 <__fp_split3>
    1404:	98 f3       	brcs	.-26     	; 0x13ec <__divsf3+0x4>

00001406 <__divsf3_pse>:
    1406:	99 23       	and	r25, r25
    1408:	c9 f3       	breq	.-14     	; 0x13fc <__divsf3+0x14>
    140a:	55 23       	and	r21, r21
    140c:	b1 f3       	breq	.-20     	; 0x13fa <__divsf3+0x12>
    140e:	95 1b       	sub	r25, r21
    1410:	55 0b       	sbc	r21, r21
    1412:	bb 27       	eor	r27, r27
    1414:	aa 27       	eor	r26, r26
    1416:	62 17       	cp	r22, r18
    1418:	73 07       	cpc	r23, r19
    141a:	84 07       	cpc	r24, r20
    141c:	38 f0       	brcs	.+14     	; 0x142c <__divsf3_pse+0x26>
    141e:	9f 5f       	subi	r25, 0xFF	; 255
    1420:	5f 4f       	sbci	r21, 0xFF	; 255
    1422:	22 0f       	add	r18, r18
    1424:	33 1f       	adc	r19, r19
    1426:	44 1f       	adc	r20, r20
    1428:	aa 1f       	adc	r26, r26
    142a:	a9 f3       	breq	.-22     	; 0x1416 <__divsf3_pse+0x10>
    142c:	33 d0       	rcall	.+102    	; 0x1494 <__divsf3_pse+0x8e>
    142e:	0e 2e       	mov	r0, r30
    1430:	3a f0       	brmi	.+14     	; 0x1440 <__divsf3_pse+0x3a>
    1432:	e0 e8       	ldi	r30, 0x80	; 128
    1434:	30 d0       	rcall	.+96     	; 0x1496 <__divsf3_pse+0x90>
    1436:	91 50       	subi	r25, 0x01	; 1
    1438:	50 40       	sbci	r21, 0x00	; 0
    143a:	e6 95       	lsr	r30
    143c:	00 1c       	adc	r0, r0
    143e:	ca f7       	brpl	.-14     	; 0x1432 <__divsf3_pse+0x2c>
    1440:	29 d0       	rcall	.+82     	; 0x1494 <__divsf3_pse+0x8e>
    1442:	fe 2f       	mov	r31, r30
    1444:	27 d0       	rcall	.+78     	; 0x1494 <__divsf3_pse+0x8e>
    1446:	66 0f       	add	r22, r22
    1448:	77 1f       	adc	r23, r23
    144a:	88 1f       	adc	r24, r24
    144c:	bb 1f       	adc	r27, r27
    144e:	26 17       	cp	r18, r22
    1450:	37 07       	cpc	r19, r23
    1452:	48 07       	cpc	r20, r24
    1454:	ab 07       	cpc	r26, r27
    1456:	b0 e8       	ldi	r27, 0x80	; 128
    1458:	09 f0       	breq	.+2      	; 0x145c <__divsf3_pse+0x56>
    145a:	bb 0b       	sbc	r27, r27
    145c:	80 2d       	mov	r24, r0
    145e:	bf 01       	movw	r22, r30
    1460:	ff 27       	eor	r31, r31
    1462:	93 58       	subi	r25, 0x83	; 131
    1464:	5f 4f       	sbci	r21, 0xFF	; 255
    1466:	2a f0       	brmi	.+10     	; 0x1472 <__divsf3_pse+0x6c>
    1468:	9e 3f       	cpi	r25, 0xFE	; 254
    146a:	51 05       	cpc	r21, r1
    146c:	68 f0       	brcs	.+26     	; 0x1488 <__divsf3_pse+0x82>
    146e:	79 c0       	rjmp	.+242    	; 0x1562 <__fp_inf>
    1470:	c3 c0       	rjmp	.+390    	; 0x15f8 <__fp_szero>
    1472:	5f 3f       	cpi	r21, 0xFF	; 255
    1474:	ec f3       	brlt	.-6      	; 0x1470 <__divsf3_pse+0x6a>
    1476:	98 3e       	cpi	r25, 0xE8	; 232
    1478:	dc f3       	brlt	.-10     	; 0x1470 <__divsf3_pse+0x6a>
    147a:	86 95       	lsr	r24
    147c:	77 95       	ror	r23
    147e:	67 95       	ror	r22
    1480:	b7 95       	ror	r27
    1482:	f7 95       	ror	r31
    1484:	9f 5f       	subi	r25, 0xFF	; 255
    1486:	c9 f7       	brne	.-14     	; 0x147a <__divsf3_pse+0x74>
    1488:	88 0f       	add	r24, r24
    148a:	91 1d       	adc	r25, r1
    148c:	96 95       	lsr	r25
    148e:	87 95       	ror	r24
    1490:	97 f9       	bld	r25, 7
    1492:	08 95       	ret
    1494:	e1 e0       	ldi	r30, 0x01	; 1
    1496:	66 0f       	add	r22, r22
    1498:	77 1f       	adc	r23, r23
    149a:	88 1f       	adc	r24, r24
    149c:	bb 1f       	adc	r27, r27
    149e:	62 17       	cp	r22, r18
    14a0:	73 07       	cpc	r23, r19
    14a2:	84 07       	cpc	r24, r20
    14a4:	ba 07       	cpc	r27, r26
    14a6:	20 f0       	brcs	.+8      	; 0x14b0 <__divsf3_pse+0xaa>
    14a8:	62 1b       	sub	r22, r18
    14aa:	73 0b       	sbc	r23, r19
    14ac:	84 0b       	sbc	r24, r20
    14ae:	ba 0b       	sbc	r27, r26
    14b0:	ee 1f       	adc	r30, r30
    14b2:	88 f7       	brcc	.-30     	; 0x1496 <__divsf3_pse+0x90>
    14b4:	e0 95       	com	r30
    14b6:	08 95       	ret

000014b8 <__fixsfsi>:
    14b8:	04 d0       	rcall	.+8      	; 0x14c2 <__fixunssfsi>
    14ba:	68 94       	set
    14bc:	b1 11       	cpse	r27, r1
    14be:	9c c0       	rjmp	.+312    	; 0x15f8 <__fp_szero>
    14c0:	08 95       	ret

000014c2 <__fixunssfsi>:
    14c2:	7f d0       	rcall	.+254    	; 0x15c2 <__fp_splitA>
    14c4:	88 f0       	brcs	.+34     	; 0x14e8 <__fixunssfsi+0x26>
    14c6:	9f 57       	subi	r25, 0x7F	; 127
    14c8:	90 f0       	brcs	.+36     	; 0x14ee <__fixunssfsi+0x2c>
    14ca:	b9 2f       	mov	r27, r25
    14cc:	99 27       	eor	r25, r25
    14ce:	b7 51       	subi	r27, 0x17	; 23
    14d0:	a0 f0       	brcs	.+40     	; 0x14fa <__fixunssfsi+0x38>
    14d2:	d1 f0       	breq	.+52     	; 0x1508 <__fixunssfsi+0x46>
    14d4:	66 0f       	add	r22, r22
    14d6:	77 1f       	adc	r23, r23
    14d8:	88 1f       	adc	r24, r24
    14da:	99 1f       	adc	r25, r25
    14dc:	1a f0       	brmi	.+6      	; 0x14e4 <__fixunssfsi+0x22>
    14de:	ba 95       	dec	r27
    14e0:	c9 f7       	brne	.-14     	; 0x14d4 <__fixunssfsi+0x12>
    14e2:	12 c0       	rjmp	.+36     	; 0x1508 <__fixunssfsi+0x46>
    14e4:	b1 30       	cpi	r27, 0x01	; 1
    14e6:	81 f0       	breq	.+32     	; 0x1508 <__fixunssfsi+0x46>
    14e8:	86 d0       	rcall	.+268    	; 0x15f6 <__fp_zero>
    14ea:	b1 e0       	ldi	r27, 0x01	; 1
    14ec:	08 95       	ret
    14ee:	83 c0       	rjmp	.+262    	; 0x15f6 <__fp_zero>
    14f0:	67 2f       	mov	r22, r23
    14f2:	78 2f       	mov	r23, r24
    14f4:	88 27       	eor	r24, r24
    14f6:	b8 5f       	subi	r27, 0xF8	; 248
    14f8:	39 f0       	breq	.+14     	; 0x1508 <__fixunssfsi+0x46>
    14fa:	b9 3f       	cpi	r27, 0xF9	; 249
    14fc:	cc f3       	brlt	.-14     	; 0x14f0 <__fixunssfsi+0x2e>
    14fe:	86 95       	lsr	r24
    1500:	77 95       	ror	r23
    1502:	67 95       	ror	r22
    1504:	b3 95       	inc	r27
    1506:	d9 f7       	brne	.-10     	; 0x14fe <__fixunssfsi+0x3c>
    1508:	3e f4       	brtc	.+14     	; 0x1518 <__fixunssfsi+0x56>
    150a:	90 95       	com	r25
    150c:	80 95       	com	r24
    150e:	70 95       	com	r23
    1510:	61 95       	neg	r22
    1512:	7f 4f       	sbci	r23, 0xFF	; 255
    1514:	8f 4f       	sbci	r24, 0xFF	; 255
    1516:	9f 4f       	sbci	r25, 0xFF	; 255
    1518:	08 95       	ret

0000151a <__fp_cmp>:
    151a:	99 0f       	add	r25, r25
    151c:	00 08       	sbc	r0, r0
    151e:	55 0f       	add	r21, r21
    1520:	aa 0b       	sbc	r26, r26
    1522:	e0 e8       	ldi	r30, 0x80	; 128
    1524:	fe ef       	ldi	r31, 0xFE	; 254
    1526:	16 16       	cp	r1, r22
    1528:	17 06       	cpc	r1, r23
    152a:	e8 07       	cpc	r30, r24
    152c:	f9 07       	cpc	r31, r25
    152e:	c0 f0       	brcs	.+48     	; 0x1560 <__fp_cmp+0x46>
    1530:	12 16       	cp	r1, r18
    1532:	13 06       	cpc	r1, r19
    1534:	e4 07       	cpc	r30, r20
    1536:	f5 07       	cpc	r31, r21
    1538:	98 f0       	brcs	.+38     	; 0x1560 <__fp_cmp+0x46>
    153a:	62 1b       	sub	r22, r18
    153c:	73 0b       	sbc	r23, r19
    153e:	84 0b       	sbc	r24, r20
    1540:	95 0b       	sbc	r25, r21
    1542:	39 f4       	brne	.+14     	; 0x1552 <__fp_cmp+0x38>
    1544:	0a 26       	eor	r0, r26
    1546:	61 f0       	breq	.+24     	; 0x1560 <__fp_cmp+0x46>
    1548:	23 2b       	or	r18, r19
    154a:	24 2b       	or	r18, r20
    154c:	25 2b       	or	r18, r21
    154e:	21 f4       	brne	.+8      	; 0x1558 <__fp_cmp+0x3e>
    1550:	08 95       	ret
    1552:	0a 26       	eor	r0, r26
    1554:	09 f4       	brne	.+2      	; 0x1558 <__fp_cmp+0x3e>
    1556:	a1 40       	sbci	r26, 0x01	; 1
    1558:	a6 95       	lsr	r26
    155a:	8f ef       	ldi	r24, 0xFF	; 255
    155c:	81 1d       	adc	r24, r1
    155e:	81 1d       	adc	r24, r1
    1560:	08 95       	ret

00001562 <__fp_inf>:
    1562:	97 f9       	bld	r25, 7
    1564:	9f 67       	ori	r25, 0x7F	; 127
    1566:	80 e8       	ldi	r24, 0x80	; 128
    1568:	70 e0       	ldi	r23, 0x00	; 0
    156a:	60 e0       	ldi	r22, 0x00	; 0
    156c:	08 95       	ret

0000156e <__fp_nan>:
    156e:	9f ef       	ldi	r25, 0xFF	; 255
    1570:	80 ec       	ldi	r24, 0xC0	; 192
    1572:	08 95       	ret

00001574 <__fp_pscA>:
    1574:	00 24       	eor	r0, r0
    1576:	0a 94       	dec	r0
    1578:	16 16       	cp	r1, r22
    157a:	17 06       	cpc	r1, r23
    157c:	18 06       	cpc	r1, r24
    157e:	09 06       	cpc	r0, r25
    1580:	08 95       	ret

00001582 <__fp_pscB>:
    1582:	00 24       	eor	r0, r0
    1584:	0a 94       	dec	r0
    1586:	12 16       	cp	r1, r18
    1588:	13 06       	cpc	r1, r19
    158a:	14 06       	cpc	r1, r20
    158c:	05 06       	cpc	r0, r21
    158e:	08 95       	ret

00001590 <__fp_round>:
    1590:	09 2e       	mov	r0, r25
    1592:	03 94       	inc	r0
    1594:	00 0c       	add	r0, r0
    1596:	11 f4       	brne	.+4      	; 0x159c <__fp_round+0xc>
    1598:	88 23       	and	r24, r24
    159a:	52 f0       	brmi	.+20     	; 0x15b0 <__fp_round+0x20>
    159c:	bb 0f       	add	r27, r27
    159e:	40 f4       	brcc	.+16     	; 0x15b0 <__fp_round+0x20>
    15a0:	bf 2b       	or	r27, r31
    15a2:	11 f4       	brne	.+4      	; 0x15a8 <__fp_round+0x18>
    15a4:	60 ff       	sbrs	r22, 0
    15a6:	04 c0       	rjmp	.+8      	; 0x15b0 <__fp_round+0x20>
    15a8:	6f 5f       	subi	r22, 0xFF	; 255
    15aa:	7f 4f       	sbci	r23, 0xFF	; 255
    15ac:	8f 4f       	sbci	r24, 0xFF	; 255
    15ae:	9f 4f       	sbci	r25, 0xFF	; 255
    15b0:	08 95       	ret

000015b2 <__fp_split3>:
    15b2:	57 fd       	sbrc	r21, 7
    15b4:	90 58       	subi	r25, 0x80	; 128
    15b6:	44 0f       	add	r20, r20
    15b8:	55 1f       	adc	r21, r21
    15ba:	59 f0       	breq	.+22     	; 0x15d2 <__fp_splitA+0x10>
    15bc:	5f 3f       	cpi	r21, 0xFF	; 255
    15be:	71 f0       	breq	.+28     	; 0x15dc <__fp_splitA+0x1a>
    15c0:	47 95       	ror	r20

000015c2 <__fp_splitA>:
    15c2:	88 0f       	add	r24, r24
    15c4:	97 fb       	bst	r25, 7
    15c6:	99 1f       	adc	r25, r25
    15c8:	61 f0       	breq	.+24     	; 0x15e2 <__fp_splitA+0x20>
    15ca:	9f 3f       	cpi	r25, 0xFF	; 255
    15cc:	79 f0       	breq	.+30     	; 0x15ec <__fp_splitA+0x2a>
    15ce:	87 95       	ror	r24
    15d0:	08 95       	ret
    15d2:	12 16       	cp	r1, r18
    15d4:	13 06       	cpc	r1, r19
    15d6:	14 06       	cpc	r1, r20
    15d8:	55 1f       	adc	r21, r21
    15da:	f2 cf       	rjmp	.-28     	; 0x15c0 <__fp_split3+0xe>
    15dc:	46 95       	lsr	r20
    15de:	f1 df       	rcall	.-30     	; 0x15c2 <__fp_splitA>
    15e0:	08 c0       	rjmp	.+16     	; 0x15f2 <__fp_splitA+0x30>
    15e2:	16 16       	cp	r1, r22
    15e4:	17 06       	cpc	r1, r23
    15e6:	18 06       	cpc	r1, r24
    15e8:	99 1f       	adc	r25, r25
    15ea:	f1 cf       	rjmp	.-30     	; 0x15ce <__fp_splitA+0xc>
    15ec:	86 95       	lsr	r24
    15ee:	71 05       	cpc	r23, r1
    15f0:	61 05       	cpc	r22, r1
    15f2:	08 94       	sec
    15f4:	08 95       	ret

000015f6 <__fp_zero>:
    15f6:	e8 94       	clt

000015f8 <__fp_szero>:
    15f8:	bb 27       	eor	r27, r27
    15fa:	66 27       	eor	r22, r22
    15fc:	77 27       	eor	r23, r23
    15fe:	cb 01       	movw	r24, r22
    1600:	97 f9       	bld	r25, 7
    1602:	08 95       	ret

00001604 <__gesf2>:
    1604:	8a df       	rcall	.-236    	; 0x151a <__fp_cmp>
    1606:	08 f4       	brcc	.+2      	; 0x160a <__gesf2+0x6>
    1608:	8f ef       	ldi	r24, 0xFF	; 255
    160a:	08 95       	ret

0000160c <__mulsf3>:
    160c:	0b d0       	rcall	.+22     	; 0x1624 <__mulsf3x>
    160e:	c0 cf       	rjmp	.-128    	; 0x1590 <__fp_round>
    1610:	b1 df       	rcall	.-158    	; 0x1574 <__fp_pscA>
    1612:	28 f0       	brcs	.+10     	; 0x161e <__mulsf3+0x12>
    1614:	b6 df       	rcall	.-148    	; 0x1582 <__fp_pscB>
    1616:	18 f0       	brcs	.+6      	; 0x161e <__mulsf3+0x12>
    1618:	95 23       	and	r25, r21
    161a:	09 f0       	breq	.+2      	; 0x161e <__mulsf3+0x12>
    161c:	a2 cf       	rjmp	.-188    	; 0x1562 <__fp_inf>
    161e:	a7 cf       	rjmp	.-178    	; 0x156e <__fp_nan>
    1620:	11 24       	eor	r1, r1
    1622:	ea cf       	rjmp	.-44     	; 0x15f8 <__fp_szero>

00001624 <__mulsf3x>:
    1624:	c6 df       	rcall	.-116    	; 0x15b2 <__fp_split3>
    1626:	a0 f3       	brcs	.-24     	; 0x1610 <__mulsf3+0x4>

00001628 <__mulsf3_pse>:
    1628:	95 9f       	mul	r25, r21
    162a:	d1 f3       	breq	.-12     	; 0x1620 <__mulsf3+0x14>
    162c:	95 0f       	add	r25, r21
    162e:	50 e0       	ldi	r21, 0x00	; 0
    1630:	55 1f       	adc	r21, r21
    1632:	62 9f       	mul	r22, r18
    1634:	f0 01       	movw	r30, r0
    1636:	72 9f       	mul	r23, r18
    1638:	bb 27       	eor	r27, r27
    163a:	f0 0d       	add	r31, r0
    163c:	b1 1d       	adc	r27, r1
    163e:	63 9f       	mul	r22, r19
    1640:	aa 27       	eor	r26, r26
    1642:	f0 0d       	add	r31, r0
    1644:	b1 1d       	adc	r27, r1
    1646:	aa 1f       	adc	r26, r26
    1648:	64 9f       	mul	r22, r20
    164a:	66 27       	eor	r22, r22
    164c:	b0 0d       	add	r27, r0
    164e:	a1 1d       	adc	r26, r1
    1650:	66 1f       	adc	r22, r22
    1652:	82 9f       	mul	r24, r18
    1654:	22 27       	eor	r18, r18
    1656:	b0 0d       	add	r27, r0
    1658:	a1 1d       	adc	r26, r1
    165a:	62 1f       	adc	r22, r18
    165c:	73 9f       	mul	r23, r19
    165e:	b0 0d       	add	r27, r0
    1660:	a1 1d       	adc	r26, r1
    1662:	62 1f       	adc	r22, r18
    1664:	83 9f       	mul	r24, r19
    1666:	a0 0d       	add	r26, r0
    1668:	61 1d       	adc	r22, r1
    166a:	22 1f       	adc	r18, r18
    166c:	74 9f       	mul	r23, r20
    166e:	33 27       	eor	r19, r19
    1670:	a0 0d       	add	r26, r0
    1672:	61 1d       	adc	r22, r1
    1674:	23 1f       	adc	r18, r19
    1676:	84 9f       	mul	r24, r20
    1678:	60 0d       	add	r22, r0
    167a:	21 1d       	adc	r18, r1
    167c:	82 2f       	mov	r24, r18
    167e:	76 2f       	mov	r23, r22
    1680:	6a 2f       	mov	r22, r26
    1682:	11 24       	eor	r1, r1
    1684:	9f 57       	subi	r25, 0x7F	; 127
    1686:	50 40       	sbci	r21, 0x00	; 0
    1688:	8a f0       	brmi	.+34     	; 0x16ac <__mulsf3_pse+0x84>
    168a:	e1 f0       	breq	.+56     	; 0x16c4 <__mulsf3_pse+0x9c>
    168c:	88 23       	and	r24, r24
    168e:	4a f0       	brmi	.+18     	; 0x16a2 <__mulsf3_pse+0x7a>
    1690:	ee 0f       	add	r30, r30
    1692:	ff 1f       	adc	r31, r31
    1694:	bb 1f       	adc	r27, r27
    1696:	66 1f       	adc	r22, r22
    1698:	77 1f       	adc	r23, r23
    169a:	88 1f       	adc	r24, r24
    169c:	91 50       	subi	r25, 0x01	; 1
    169e:	50 40       	sbci	r21, 0x00	; 0
    16a0:	a9 f7       	brne	.-22     	; 0x168c <__mulsf3_pse+0x64>
    16a2:	9e 3f       	cpi	r25, 0xFE	; 254
    16a4:	51 05       	cpc	r21, r1
    16a6:	70 f0       	brcs	.+28     	; 0x16c4 <__mulsf3_pse+0x9c>
    16a8:	5c cf       	rjmp	.-328    	; 0x1562 <__fp_inf>
    16aa:	a6 cf       	rjmp	.-180    	; 0x15f8 <__fp_szero>
    16ac:	5f 3f       	cpi	r21, 0xFF	; 255
    16ae:	ec f3       	brlt	.-6      	; 0x16aa <__mulsf3_pse+0x82>
    16b0:	98 3e       	cpi	r25, 0xE8	; 232
    16b2:	dc f3       	brlt	.-10     	; 0x16aa <__mulsf3_pse+0x82>
    16b4:	86 95       	lsr	r24
    16b6:	77 95       	ror	r23
    16b8:	67 95       	ror	r22
    16ba:	b7 95       	ror	r27
    16bc:	f7 95       	ror	r31
    16be:	e7 95       	ror	r30
    16c0:	9f 5f       	subi	r25, 0xFF	; 255
    16c2:	c1 f7       	brne	.-16     	; 0x16b4 <__mulsf3_pse+0x8c>
    16c4:	fe 2b       	or	r31, r30
    16c6:	88 0f       	add	r24, r24
    16c8:	91 1d       	adc	r25, r1
    16ca:	96 95       	lsr	r25
    16cc:	87 95       	ror	r24
    16ce:	97 f9       	bld	r25, 7
    16d0:	08 95       	ret

000016d2 <__tablejump2__>:
    16d2:	ee 0f       	add	r30, r30
    16d4:	ff 1f       	adc	r31, r31
    16d6:	00 24       	eor	r0, r0
    16d8:	00 1c       	adc	r0, r0
    16da:	0b be       	out	0x3b, r0	; 59
    16dc:	07 90       	elpm	r0, Z+
    16de:	f6 91       	elpm	r31, Z
    16e0:	e0 2d       	mov	r30, r0
    16e2:	09 94       	ijmp

000016e4 <eeprom_read_byte>:
    16e4:	f9 99       	sbic	0x1f, 1	; 31
    16e6:	fe cf       	rjmp	.-4      	; 0x16e4 <eeprom_read_byte>
    16e8:	92 bd       	out	0x22, r25	; 34
    16ea:	81 bd       	out	0x21, r24	; 33
    16ec:	f8 9a       	sbi	0x1f, 0	; 31
    16ee:	99 27       	eor	r25, r25
    16f0:	80 b5       	in	r24, 0x20	; 32
    16f2:	08 95       	ret

000016f4 <eeprom_update_byte>:
    16f4:	26 2f       	mov	r18, r22

000016f6 <eeprom_update_r18>:
    16f6:	f9 99       	sbic	0x1f, 1	; 31
    16f8:	fe cf       	rjmp	.-4      	; 0x16f6 <eeprom_update_r18>
    16fa:	92 bd       	out	0x22, r25	; 34
    16fc:	81 bd       	out	0x21, r24	; 33
    16fe:	f8 9a       	sbi	0x1f, 0	; 31
    1700:	01 97       	sbiw	r24, 0x01	; 1
    1702:	00 b4       	in	r0, 0x20	; 32
    1704:	02 16       	cp	r0, r18
    1706:	39 f0       	breq	.+14     	; 0x1716 <eeprom_update_r18+0x20>
    1708:	1f ba       	out	0x1f, r1	; 31
    170a:	20 bd       	out	0x20, r18	; 32
    170c:	0f b6       	in	r0, 0x3f	; 63
    170e:	f8 94       	cli
    1710:	fa 9a       	sbi	0x1f, 2	; 31
    1712:	f9 9a       	sbi	0x1f, 1	; 31
    1714:	0f be       	out	0x3f, r0	; 63
    1716:	08 95       	ret

00001718 <_exit>:
    1718:	f8 94       	cli

0000171a <__stop_program>:
    171a:	ff cf       	rjmp	.-2      	; 0x171a <__stop_program>
