
Rhythm_Game_Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000096e  00800100  00001750  000017e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001750  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000009e8  00800a6e  00800a6e  00002152  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002152  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002184  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000178  00000000  00000000  000021c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001fce  00000000  00000000  00002340  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000afc  00000000  00000000  0000430e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014e8  00000000  00000000  00004e0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000358  00000000  00000000  000062f4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000a0e  00000000  00000000  0000664c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000f43  00000000  00000000  0000705a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00007f9d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	61 c0       	rjmp	.+194    	; 0xc4 <__ctors_end>
       2:	00 00       	nop
       4:	7e c0       	rjmp	.+252    	; 0x102 <__bad_interrupt>
       6:	00 00       	nop
       8:	7c c0       	rjmp	.+248    	; 0x102 <__bad_interrupt>
       a:	00 00       	nop
       c:	7a c0       	rjmp	.+244    	; 0x102 <__bad_interrupt>
       e:	00 00       	nop
      10:	78 c0       	rjmp	.+240    	; 0x102 <__bad_interrupt>
      12:	00 00       	nop
      14:	76 c0       	rjmp	.+236    	; 0x102 <__bad_interrupt>
      16:	00 00       	nop
      18:	74 c0       	rjmp	.+232    	; 0x102 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	72 c0       	rjmp	.+228    	; 0x102 <__bad_interrupt>
      1e:	00 00       	nop
      20:	70 c0       	rjmp	.+224    	; 0x102 <__bad_interrupt>
      22:	00 00       	nop
      24:	6e c0       	rjmp	.+220    	; 0x102 <__bad_interrupt>
      26:	00 00       	nop
      28:	6c c0       	rjmp	.+216    	; 0x102 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	6a c0       	rjmp	.+212    	; 0x102 <__bad_interrupt>
      2e:	00 00       	nop
      30:	68 c0       	rjmp	.+208    	; 0x102 <__bad_interrupt>
      32:	00 00       	nop
      34:	8a c5       	rjmp	.+2836   	; 0xb4a <__vector_13>
      36:	00 00       	nop
      38:	64 c0       	rjmp	.+200    	; 0x102 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	62 c0       	rjmp	.+196    	; 0x102 <__bad_interrupt>
      3e:	00 00       	nop
      40:	60 c0       	rjmp	.+192    	; 0x102 <__bad_interrupt>
      42:	00 00       	nop
      44:	5e c0       	rjmp	.+188    	; 0x102 <__bad_interrupt>
      46:	00 00       	nop
      48:	5c c0       	rjmp	.+184    	; 0x102 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	5a c0       	rjmp	.+180    	; 0x102 <__bad_interrupt>
      4e:	00 00       	nop
      50:	58 c0       	rjmp	.+176    	; 0x102 <__bad_interrupt>
      52:	00 00       	nop
      54:	56 c0       	rjmp	.+172    	; 0x102 <__bad_interrupt>
      56:	00 00       	nop
      58:	54 c0       	rjmp	.+168    	; 0x102 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	52 c0       	rjmp	.+164    	; 0x102 <__bad_interrupt>
      5e:	00 00       	nop
      60:	50 c0       	rjmp	.+160    	; 0x102 <__bad_interrupt>
      62:	00 00       	nop
      64:	4e c0       	rjmp	.+156    	; 0x102 <__bad_interrupt>
      66:	00 00       	nop
      68:	4c c0       	rjmp	.+152    	; 0x102 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	4a c0       	rjmp	.+148    	; 0x102 <__bad_interrupt>
      6e:	00 00       	nop
      70:	48 c0       	rjmp	.+144    	; 0x102 <__bad_interrupt>
      72:	00 00       	nop
      74:	46 c0       	rjmp	.+140    	; 0x102 <__bad_interrupt>
      76:	00 00       	nop
      78:	44 c0       	rjmp	.+136    	; 0x102 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	42 c0       	rjmp	.+132    	; 0x102 <__bad_interrupt>
      7e:	00 00       	nop
      80:	40 c0       	rjmp	.+128    	; 0x102 <__bad_interrupt>
      82:	00 00       	nop
      84:	3e c0       	rjmp	.+124    	; 0x102 <__bad_interrupt>
      86:	00 00       	nop
      88:	3c c0       	rjmp	.+120    	; 0x102 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	67 03       	mulsu	r22, r23
      8e:	f2 01       	movw	r30, r4
      90:	06 02       	muls	r16, r22
      92:	18 02       	muls	r17, r24
      94:	77 02       	muls	r23, r23
      96:	65 02       	muls	r22, r21
      98:	89 02       	muls	r24, r25
      9a:	9b 02       	muls	r25, r27
      9c:	bf 02       	muls	r27, r31
      9e:	e3 02       	muls	r30, r19
      a0:	f4 02       	muls	r31, r20
      a2:	02 03       	mulsu	r16, r18
      a4:	0c 03       	fmul	r16, r20
      a6:	3a 03       	fmul	r19, r18
      a8:	4b 03       	fmul	r20, r19
      aa:	67 03       	mulsu	r22, r23
      ac:	2b 05       	cpc	r18, r11
      ae:	6f 03       	fmul	r22, r23
      b0:	2b 05       	cpc	r18, r11
      b2:	2b 05       	cpc	r18, r11
      b4:	2b 05       	cpc	r18, r11
      b6:	91 03       	fmuls	r17, r17
      b8:	f3 03       	fmuls	r23, r19
      ba:	2b 05       	cpc	r18, r11
      bc:	55 04       	cpc	r5, r5
      be:	6a 04       	cpc	r6, r10
      c0:	ba 04       	cpc	r11, r10
      c2:	c3 04       	cpc	r12, r3

000000c4 <__ctors_end>:
      c4:	11 24       	eor	r1, r1
      c6:	1f be       	out	0x3f, r1	; 63
      c8:	cf ef       	ldi	r28, 0xFF	; 255
      ca:	d0 e4       	ldi	r29, 0x40	; 64
      cc:	de bf       	out	0x3e, r29	; 62
      ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
      d0:	1a e0       	ldi	r17, 0x0A	; 10
      d2:	a0 e0       	ldi	r26, 0x00	; 0
      d4:	b1 e0       	ldi	r27, 0x01	; 1
      d6:	e0 e5       	ldi	r30, 0x50	; 80
      d8:	f7 e1       	ldi	r31, 0x17	; 23
      da:	00 e0       	ldi	r16, 0x00	; 0
      dc:	0b bf       	out	0x3b, r16	; 59
      de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x14>
      e0:	07 90       	elpm	r0, Z+
      e2:	0d 92       	st	X+, r0
      e4:	ae 36       	cpi	r26, 0x6E	; 110
      e6:	b1 07       	cpc	r27, r17
      e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0x10>

000000ea <__do_clear_bss>:
      ea:	24 e1       	ldi	r18, 0x14	; 20
      ec:	ae e6       	ldi	r26, 0x6E	; 110
      ee:	ba e0       	ldi	r27, 0x0A	; 10
      f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
      f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
      f4:	a6 35       	cpi	r26, 0x56	; 86
      f6:	b2 07       	cpc	r27, r18
      f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>
      fa:	0e 94 a7 08 	call	0x114e	; 0x114e <main>
      fe:	0c 94 a6 0b 	jmp	0x174c	; 0x174c <_exit>

00000102 <__bad_interrupt>:
     102:	7e cf       	rjmp	.-260    	; 0x0 <__vectors>

00000104 <Left_Tick>:
unsigned char Set_Bit(unsigned char output, unsigned char in){
    return (output | (1 << in));   
}
unsigned char Clear_Bit(unsigned char output, unsigned char in){
    return (output & ~(1 << in));
} 
     104:	82 30       	cpi	r24, 0x02	; 2
     106:	91 05       	cpc	r25, r1
     108:	18 f0       	brcs	.+6      	; 0x110 <Left_Tick+0xc>
     10a:	81 30       	cpi	r24, 0x01	; 1
     10c:	91 05       	cpc	r25, r1
     10e:	61 f4       	brne	.+24     	; 0x128 <Left_Tick+0x24>
     110:	03 99       	sbic	0x00, 3	; 0
     112:	06 c0       	rjmp	.+12     	; 0x120 <Left_Tick+0x1c>
     114:	81 e0       	ldi	r24, 0x01	; 1
     116:	80 93 8c 0a 	sts	0x0A8C, r24	; 0x800a8c <LEFT>
     11a:	81 e0       	ldi	r24, 0x01	; 1
     11c:	90 e0       	ldi	r25, 0x00	; 0
     11e:	08 95       	ret
     120:	10 92 8c 0a 	sts	0x0A8C, r1	; 0x800a8c <LEFT>
     124:	81 e0       	ldi	r24, 0x01	; 1
     126:	90 e0       	ldi	r25, 0x00	; 0
     128:	08 95       	ret

0000012a <Right_Tick>:
     12a:	82 30       	cpi	r24, 0x02	; 2
     12c:	91 05       	cpc	r25, r1
     12e:	18 f0       	brcs	.+6      	; 0x136 <Right_Tick+0xc>
     130:	81 30       	cpi	r24, 0x01	; 1
     132:	91 05       	cpc	r25, r1
     134:	61 f4       	brne	.+24     	; 0x14e <Right_Tick+0x24>
     136:	00 99       	sbic	0x00, 0	; 0
     138:	06 c0       	rjmp	.+12     	; 0x146 <Right_Tick+0x1c>
     13a:	81 e0       	ldi	r24, 0x01	; 1
     13c:	80 93 8b 0a 	sts	0x0A8B, r24	; 0x800a8b <RIGHT>
     140:	81 e0       	ldi	r24, 0x01	; 1
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	08 95       	ret
     146:	10 92 8b 0a 	sts	0x0A8B, r1	; 0x800a8b <RIGHT>
     14a:	81 e0       	ldi	r24, 0x01	; 1
     14c:	90 e0       	ldi	r25, 0x00	; 0
     14e:	08 95       	ret

00000150 <Up_Tick>:
     150:	82 30       	cpi	r24, 0x02	; 2
     152:	91 05       	cpc	r25, r1
     154:	18 f0       	brcs	.+6      	; 0x15c <Up_Tick+0xc>
     156:	81 30       	cpi	r24, 0x01	; 1
     158:	91 05       	cpc	r25, r1
     15a:	61 f4       	brne	.+24     	; 0x174 <Up_Tick+0x24>
     15c:	01 99       	sbic	0x00, 1	; 0
     15e:	06 c0       	rjmp	.+12     	; 0x16c <Up_Tick+0x1c>
     160:	81 e0       	ldi	r24, 0x01	; 1
     162:	80 93 8a 0a 	sts	0x0A8A, r24	; 0x800a8a <UP>
     166:	81 e0       	ldi	r24, 0x01	; 1
     168:	90 e0       	ldi	r25, 0x00	; 0
     16a:	08 95       	ret
     16c:	10 92 8a 0a 	sts	0x0A8A, r1	; 0x800a8a <UP>
     170:	81 e0       	ldi	r24, 0x01	; 1
     172:	90 e0       	ldi	r25, 0x00	; 0
     174:	08 95       	ret

00000176 <Down_Tick>:
     176:	82 30       	cpi	r24, 0x02	; 2
     178:	91 05       	cpc	r25, r1
     17a:	18 f0       	brcs	.+6      	; 0x182 <Down_Tick+0xc>
     17c:	81 30       	cpi	r24, 0x01	; 1
     17e:	91 05       	cpc	r25, r1
     180:	61 f4       	brne	.+24     	; 0x19a <Down_Tick+0x24>
     182:	02 99       	sbic	0x00, 2	; 0
     184:	06 c0       	rjmp	.+12     	; 0x192 <Down_Tick+0x1c>
     186:	81 e0       	ldi	r24, 0x01	; 1
     188:	80 93 89 0a 	sts	0x0A89, r24	; 0x800a89 <DOWN>
     18c:	81 e0       	ldi	r24, 0x01	; 1
     18e:	90 e0       	ldi	r25, 0x00	; 0
     190:	08 95       	ret
     192:	10 92 89 0a 	sts	0x0A89, r1	; 0x800a89 <DOWN>
     196:	81 e0       	ldi	r24, 0x01	; 1
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	08 95       	ret

0000019c <Player_Tick>:
     19c:	82 30       	cpi	r24, 0x02	; 2
     19e:	91 05       	cpc	r25, r1
     1a0:	20 f0       	brcs	.+8      	; 0x1aa <Player_Tick+0xe>
     1a2:	81 30       	cpi	r24, 0x01	; 1
     1a4:	91 05       	cpc	r25, r1
     1a6:	09 f0       	breq	.+2      	; 0x1aa <Player_Tick+0xe>
     1a8:	4d c0       	rjmp	.+154    	; 0x244 <Player_Tick+0xa8>
     1aa:	80 91 8c 0a 	lds	r24, 0x0A8C	; 0x800a8c <LEFT>
     1ae:	88 23       	and	r24, r24
     1b0:	91 f0       	breq	.+36     	; 0x1d6 <Player_Tick+0x3a>
     1b2:	80 91 8b 0a 	lds	r24, 0x0A8B	; 0x800a8b <RIGHT>
     1b6:	81 11       	cpse	r24, r1
     1b8:	38 c0       	rjmp	.+112    	; 0x22a <Player_Tick+0x8e>
     1ba:	80 91 8a 0a 	lds	r24, 0x0A8A	; 0x800a8a <UP>
     1be:	81 11       	cpse	r24, r1
     1c0:	34 c0       	rjmp	.+104    	; 0x22a <Player_Tick+0x8e>
     1c2:	80 91 89 0a 	lds	r24, 0x0A89	; 0x800a89 <DOWN>
     1c6:	81 11       	cpse	r24, r1
     1c8:	30 c0       	rjmp	.+96     	; 0x22a <Player_Tick+0x8e>
     1ca:	88 e0       	ldi	r24, 0x08	; 8
     1cc:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <player_button_press>
     1d0:	81 e0       	ldi	r24, 0x01	; 1
     1d2:	90 e0       	ldi	r25, 0x00	; 0
     1d4:	08 95       	ret
     1d6:	80 91 8b 0a 	lds	r24, 0x0A8B	; 0x800a8b <RIGHT>
     1da:	81 11       	cpse	r24, r1
     1dc:	30 c0       	rjmp	.+96     	; 0x23e <Player_Tick+0xa2>
     1de:	80 91 8a 0a 	lds	r24, 0x0A8A	; 0x800a8a <UP>
     1e2:	81 11       	cpse	r24, r1
     1e4:	27 c0       	rjmp	.+78     	; 0x234 <Player_Tick+0x98>
     1e6:	80 91 89 0a 	lds	r24, 0x0A89	; 0x800a89 <DOWN>
     1ea:	88 23       	and	r24, r24
     1ec:	19 f1       	breq	.+70     	; 0x234 <Player_Tick+0x98>
     1ee:	84 e0       	ldi	r24, 0x04	; 4
     1f0:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <player_button_press>
     1f4:	81 e0       	ldi	r24, 0x01	; 1
     1f6:	90 e0       	ldi	r25, 0x00	; 0
     1f8:	08 95       	ret
     1fa:	80 91 89 0a 	lds	r24, 0x0A89	; 0x800a89 <DOWN>
     1fe:	81 11       	cpse	r24, r1
     200:	14 c0       	rjmp	.+40     	; 0x22a <Player_Tick+0x8e>
     202:	82 e0       	ldi	r24, 0x02	; 2
     204:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <player_button_press>
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	90 e0       	ldi	r25, 0x00	; 0
     20c:	08 95       	ret
     20e:	80 91 8a 0a 	lds	r24, 0x0A8A	; 0x800a8a <UP>
     212:	81 11       	cpse	r24, r1
     214:	0a c0       	rjmp	.+20     	; 0x22a <Player_Tick+0x8e>
     216:	80 91 89 0a 	lds	r24, 0x0A89	; 0x800a89 <DOWN>
     21a:	81 11       	cpse	r24, r1
     21c:	06 c0       	rjmp	.+12     	; 0x22a <Player_Tick+0x8e>
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	80 93 86 0a 	sts	0x0A86, r24	; 0x800a86 <player_button_press>
     224:	81 e0       	ldi	r24, 0x01	; 1
     226:	90 e0       	ldi	r25, 0x00	; 0
     228:	08 95       	ret
     22a:	10 92 86 0a 	sts	0x0A86, r1	; 0x800a86 <player_button_press>
     22e:	81 e0       	ldi	r24, 0x01	; 1
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	08 95       	ret
     234:	80 91 8a 0a 	lds	r24, 0x0A8A	; 0x800a8a <UP>
     238:	81 11       	cpse	r24, r1
     23a:	df cf       	rjmp	.-66     	; 0x1fa <Player_Tick+0x5e>
     23c:	f6 cf       	rjmp	.-20     	; 0x22a <Player_Tick+0x8e>
     23e:	81 11       	cpse	r24, r1
     240:	e6 cf       	rjmp	.-52     	; 0x20e <Player_Tick+0x72>
     242:	f3 cf       	rjmp	.-26     	; 0x22a <Player_Tick+0x8e>
     244:	08 95       	ret

00000246 <delay_ms>:
     246:	18 16       	cp	r1, r24
     248:	19 06       	cpc	r1, r25
     24a:	5c f0       	brlt	.+22     	; 0x262 <delay_ms+0x1c>
     24c:	08 95       	ret
     24e:	00 00       	nop
     250:	21 50       	subi	r18, 0x01	; 1
     252:	31 09       	sbc	r19, r1
     254:	e1 f7       	brne	.-8      	; 0x24e <delay_ms+0x8>
     256:	4f 5f       	subi	r20, 0xFF	; 255
     258:	5f 4f       	sbci	r21, 0xFF	; 255
     25a:	84 17       	cp	r24, r20
     25c:	95 07       	cpc	r25, r21
     25e:	19 f4       	brne	.+6      	; 0x266 <delay_ms+0x20>
     260:	08 95       	ret
     262:	40 e0       	ldi	r20, 0x00	; 0
     264:	50 e0       	ldi	r21, 0x00	; 0
     266:	27 e0       	ldi	r18, 0x07	; 7
     268:	33 e0       	ldi	r19, 0x03	; 3
     26a:	f1 cf       	rjmp	.-30     	; 0x24e <delay_ms+0x8>

0000026c <LCD_WriteCommand>:
     26c:	28 98       	cbi	0x05, 0	; 5
     26e:	8b b9       	out	0x0b, r24	; 11
     270:	29 9a       	sbi	0x05, 1	; 5
     272:	00 00       	nop
     274:	29 98       	cbi	0x05, 1	; 5
     276:	82 e0       	ldi	r24, 0x02	; 2
     278:	90 e0       	ldi	r25, 0x00	; 0
     27a:	e5 cf       	rjmp	.-54     	; 0x246 <delay_ms>
     27c:	08 95       	ret

0000027e <LCD_ClearScreen>:
     27e:	81 e0       	ldi	r24, 0x01	; 1
     280:	f5 cf       	rjmp	.-22     	; 0x26c <LCD_WriteCommand>
     282:	08 95       	ret

00000284 <LCD_Cursor>:
     284:	81 31       	cpi	r24, 0x11	; 17
     286:	18 f4       	brcc	.+6      	; 0x28e <LCD_Cursor+0xa>
     288:	81 58       	subi	r24, 0x81	; 129
     28a:	f0 cf       	rjmp	.-32     	; 0x26c <LCD_WriteCommand>
     28c:	08 95       	ret
     28e:	81 55       	subi	r24, 0x51	; 81
     290:	ed cf       	rjmp	.-38     	; 0x26c <LCD_WriteCommand>
     292:	08 95       	ret

00000294 <LCD_WriteData>:
     294:	28 9a       	sbi	0x05, 0	; 5
     296:	8b b9       	out	0x0b, r24	; 11
     298:	29 9a       	sbi	0x05, 1	; 5
     29a:	00 00       	nop
     29c:	29 98       	cbi	0x05, 1	; 5
     29e:	81 e0       	ldi	r24, 0x01	; 1
     2a0:	90 e0       	ldi	r25, 0x00	; 0
     2a2:	d1 cf       	rjmp	.-94     	; 0x246 <delay_ms>
     2a4:	08 95       	ret

000002a6 <LCD_DisplayString>:
     2a6:	0f 93       	push	r16
     2a8:	1f 93       	push	r17
     2aa:	cf 93       	push	r28
     2ac:	df 93       	push	r29
     2ae:	18 2f       	mov	r17, r24
     2b0:	eb 01       	movw	r28, r22
     2b2:	e5 df       	rcall	.-54     	; 0x27e <LCD_ClearScreen>
     2b4:	88 81       	ld	r24, Y
     2b6:	88 23       	and	r24, r24
     2b8:	51 f0       	breq	.+20     	; 0x2ce <LCD_DisplayString+0x28>
     2ba:	01 e0       	ldi	r16, 0x01	; 1
     2bc:	01 0f       	add	r16, r17
     2be:	81 2f       	mov	r24, r17
     2c0:	e1 df       	rcall	.-62     	; 0x284 <LCD_Cursor>
     2c2:	89 91       	ld	r24, Y+
     2c4:	e7 df       	rcall	.-50     	; 0x294 <LCD_WriteData>
     2c6:	10 2f       	mov	r17, r16
     2c8:	88 81       	ld	r24, Y
     2ca:	81 11       	cpse	r24, r1
     2cc:	f6 cf       	rjmp	.-20     	; 0x2ba <LCD_DisplayString+0x14>
     2ce:	df 91       	pop	r29
     2d0:	cf 91       	pop	r28
     2d2:	1f 91       	pop	r17
     2d4:	0f 91       	pop	r16
     2d6:	08 95       	ret

000002d8 <LCD_Write_Single_Line>:
     2d8:	1f 93       	push	r17
     2da:	cf 93       	push	r28
     2dc:	df 93       	push	r29
     2de:	62 30       	cpi	r22, 0x02	; 2
     2e0:	71 05       	cpc	r23, r1
     2e2:	09 f4       	brne	.+2      	; 0x2e6 <LCD_Write_Single_Line+0xe>
     2e4:	80 5f       	subi	r24, 0xF0	; 240
     2e6:	fa 01       	movw	r30, r20
     2e8:	90 81       	ld	r25, Z
     2ea:	99 23       	and	r25, r25
     2ec:	51 f0       	breq	.+20     	; 0x302 <LCD_Write_Single_Line+0x2a>
     2ee:	ea 01       	movw	r28, r20
     2f0:	11 e0       	ldi	r17, 0x01	; 1
     2f2:	18 0f       	add	r17, r24
     2f4:	c7 df       	rcall	.-114    	; 0x284 <LCD_Cursor>
     2f6:	89 91       	ld	r24, Y+
     2f8:	cd df       	rcall	.-102    	; 0x294 <LCD_WriteData>
     2fa:	81 2f       	mov	r24, r17
     2fc:	98 81       	ld	r25, Y
     2fe:	91 11       	cpse	r25, r1
     300:	f7 cf       	rjmp	.-18     	; 0x2f0 <LCD_Write_Single_Line+0x18>
     302:	df 91       	pop	r29
     304:	cf 91       	pop	r28
     306:	1f 91       	pop	r17
     308:	08 95       	ret

0000030a <LCD_Custom_Character>:
     30a:	0f 93       	push	r16
     30c:	1f 93       	push	r17
     30e:	cf 93       	push	r28
     310:	df 93       	push	r29
     312:	8b 01       	movw	r16, r22
     314:	88 30       	cpi	r24, 0x08	; 8
     316:	68 f4       	brcc	.+26     	; 0x332 <LCD_Custom_Character+0x28>
     318:	88 0f       	add	r24, r24
     31a:	88 0f       	add	r24, r24
     31c:	88 0f       	add	r24, r24
     31e:	80 5c       	subi	r24, 0xC0	; 192
     320:	a5 df       	rcall	.-182    	; 0x26c <LCD_WriteCommand>
     322:	e8 01       	movw	r28, r16
     324:	08 5f       	subi	r16, 0xF8	; 248
     326:	1f 4f       	sbci	r17, 0xFF	; 255
     328:	89 91       	ld	r24, Y+
     32a:	b4 df       	rcall	.-152    	; 0x294 <LCD_WriteData>
     32c:	c0 17       	cp	r28, r16
     32e:	d1 07       	cpc	r29, r17
     330:	d9 f7       	brne	.-10     	; 0x328 <LCD_Custom_Character+0x1e>
     332:	80 e8       	ldi	r24, 0x80	; 128
     334:	9b df       	rcall	.-202    	; 0x26c <LCD_WriteCommand>
     336:	df 91       	pop	r29
     338:	cf 91       	pop	r28
     33a:	1f 91       	pop	r17
     33c:	0f 91       	pop	r16
     33e:	08 95       	ret

00000340 <LCD_init>:
     340:	84 e6       	ldi	r24, 0x64	; 100
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	80 df       	rcall	.-256    	; 0x246 <delay_ms>
     346:	88 e3       	ldi	r24, 0x38	; 56
     348:	91 df       	rcall	.-222    	; 0x26c <LCD_WriteCommand>
     34a:	86 e0       	ldi	r24, 0x06	; 6
     34c:	8f df       	rcall	.-226    	; 0x26c <LCD_WriteCommand>
     34e:	8f e0       	ldi	r24, 0x0F	; 15
     350:	8d df       	rcall	.-230    	; 0x26c <LCD_WriteCommand>
     352:	81 e0       	ldi	r24, 0x01	; 1
     354:	8b df       	rcall	.-234    	; 0x26c <LCD_WriteCommand>
     356:	8a e0       	ldi	r24, 0x0A	; 10
     358:	90 e0       	ldi	r25, 0x00	; 0
     35a:	75 df       	rcall	.-278    	; 0x246 <delay_ms>
     35c:	6f ef       	ldi	r22, 0xFF	; 255
     35e:	79 e0       	ldi	r23, 0x09	; 9
     360:	80 e0       	ldi	r24, 0x00	; 0
     362:	d3 df       	rcall	.-90     	; 0x30a <LCD_Custom_Character>
     364:	67 ef       	ldi	r22, 0xF7	; 247
     366:	79 e0       	ldi	r23, 0x09	; 9
     368:	81 e0       	ldi	r24, 0x01	; 1
     36a:	cf df       	rcall	.-98     	; 0x30a <LCD_Custom_Character>
     36c:	6f ee       	ldi	r22, 0xEF	; 239
     36e:	79 e0       	ldi	r23, 0x09	; 9
     370:	82 e0       	ldi	r24, 0x02	; 2
     372:	cb df       	rcall	.-106    	; 0x30a <LCD_Custom_Character>
     374:	67 ee       	ldi	r22, 0xE7	; 231
     376:	79 e0       	ldi	r23, 0x09	; 9
     378:	84 e0       	ldi	r24, 0x04	; 4
     37a:	c7 df       	rcall	.-114    	; 0x30a <LCD_Custom_Character>
     37c:	6f ed       	ldi	r22, 0xDF	; 223
     37e:	79 e0       	ldi	r23, 0x09	; 9
     380:	85 e0       	ldi	r24, 0x05	; 5
     382:	c3 df       	rcall	.-122    	; 0x30a <LCD_Custom_Character>
     384:	67 ed       	ldi	r22, 0xD7	; 215
     386:	79 e0       	ldi	r23, 0x09	; 9
     388:	86 e0       	ldi	r24, 0x06	; 6
     38a:	bf cf       	rjmp	.-130    	; 0x30a <LCD_Custom_Character>
     38c:	08 95       	ret

0000038e <LCD_Game_Menu>:
     38e:	8c e0       	ldi	r24, 0x0C	; 12
     390:	6d df       	rcall	.-294    	; 0x26c <LCD_WriteCommand>
     392:	81 e0       	ldi	r24, 0x01	; 1
     394:	77 df       	rcall	.-274    	; 0x284 <LCD_Cursor>
     396:	85 e0       	ldi	r24, 0x05	; 5
     398:	7d df       	rcall	.-262    	; 0x294 <LCD_WriteData>
     39a:	86 e0       	ldi	r24, 0x06	; 6
     39c:	73 df       	rcall	.-282    	; 0x284 <LCD_Cursor>
     39e:	81 e0       	ldi	r24, 0x01	; 1
     3a0:	79 df       	rcall	.-270    	; 0x294 <LCD_WriteData>
     3a2:	82 e0       	ldi	r24, 0x02	; 2
     3a4:	77 df       	rcall	.-274    	; 0x294 <LCD_WriteData>
     3a6:	84 e0       	ldi	r24, 0x04	; 4
     3a8:	75 df       	rcall	.-278    	; 0x294 <LCD_WriteData>
     3aa:	80 e0       	ldi	r24, 0x00	; 0
     3ac:	73 df       	rcall	.-282    	; 0x294 <LCD_WriteData>
     3ae:	80 e1       	ldi	r24, 0x10	; 16
     3b0:	69 df       	rcall	.-302    	; 0x284 <LCD_Cursor>
     3b2:	85 e0       	ldi	r24, 0x05	; 5
     3b4:	6f df       	rcall	.-290    	; 0x294 <LCD_WriteData>
     3b6:	47 e0       	ldi	r20, 0x07	; 7
     3b8:	5a e0       	ldi	r21, 0x0A	; 10
     3ba:	62 e0       	ldi	r22, 0x02	; 2
     3bc:	70 e0       	ldi	r23, 0x00	; 0
     3be:	81 e0       	ldi	r24, 0x01	; 1
     3c0:	8b df       	rcall	.-234    	; 0x2d8 <LCD_Write_Single_Line>
     3c2:	87 e1       	ldi	r24, 0x17	; 23
     3c4:	5f df       	rcall	.-322    	; 0x284 <LCD_Cursor>
     3c6:	86 e0       	ldi	r24, 0x06	; 6
     3c8:	65 cf       	rjmp	.-310    	; 0x294 <LCD_WriteData>
     3ca:	08 95       	ret

000003cc <LCD_Menu_Tick>:
     3cc:	0f 93       	push	r16
     3ce:	1f 93       	push	r17
     3d0:	cf 93       	push	r28
     3d2:	8f 30       	cpi	r24, 0x0F	; 15
     3d4:	91 05       	cpc	r25, r1
     3d6:	08 f0       	brcs	.+2      	; 0x3da <LCD_Menu_Tick+0xe>
     3d8:	70 c1       	rjmp	.+736    	; 0x6ba <__LOCK_REGION_LENGTH__+0x2ba>
     3da:	fc 01       	movw	r30, r24
     3dc:	ea 5b       	subi	r30, 0xBA	; 186
     3de:	ff 4f       	sbci	r31, 0xFF	; 255
     3e0:	0c 94 83 0b 	jmp	0x1706	; 0x1706 <__tablejump2__>
     3e4:	80 91 8c 0a 	lds	r24, 0x0A8C	; 0x800a8c <LEFT>
     3e8:	88 23       	and	r24, r24
     3ea:	09 f4       	brne	.+2      	; 0x3ee <LCD_Menu_Tick+0x22>
     3ec:	70 c1       	rjmp	.+736    	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
     3ee:	80 91 8b 0a 	lds	r24, 0x0A8B	; 0x800a8b <RIGHT>
     3f2:	88 23       	and	r24, r24
     3f4:	09 f4       	brne	.+2      	; 0x3f8 <LCD_Menu_Tick+0x2c>
     3f6:	6b c1       	rjmp	.+726    	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
     3f8:	80 91 89 0a 	lds	r24, 0x0A89	; 0x800a89 <DOWN>
     3fc:	88 23       	and	r24, r24
     3fe:	09 f4       	brne	.+2      	; 0x402 <__LOCK_REGION_LENGTH__+0x2>
     400:	66 c1       	rjmp	.+716    	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
     402:	80 91 8a 0a 	lds	r24, 0x0A8A	; 0x800a8a <UP>
     406:	81 11       	cpse	r24, r1
     408:	11 c3       	rjmp	.+1570   	; 0xa2c <__LOCK_REGION_LENGTH__+0x62c>
     40a:	61 c1       	rjmp	.+706    	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
     40c:	20 91 8c 0a 	lds	r18, 0x0A8C	; 0x800a8c <LEFT>
     410:	21 11       	cpse	r18, r1
     412:	21 c3       	rjmp	.+1602   	; 0xa56 <__LOCK_REGION_LENGTH__+0x656>
     414:	20 91 8b 0a 	lds	r18, 0x0A8B	; 0x800a8b <RIGHT>
     418:	21 11       	cpse	r18, r1
     41a:	1d c3       	rjmp	.+1594   	; 0xa56 <__LOCK_REGION_LENGTH__+0x656>
     41c:	20 91 8a 0a 	lds	r18, 0x0A8A	; 0x800a8a <UP>
     420:	21 11       	cpse	r18, r1
     422:	19 c3       	rjmp	.+1586   	; 0xa56 <__LOCK_REGION_LENGTH__+0x656>
     424:	20 91 89 0a 	lds	r18, 0x0A89	; 0x800a89 <DOWN>
     428:	21 11       	cpse	r18, r1
     42a:	15 c3       	rjmp	.+1578   	; 0xa56 <__LOCK_REGION_LENGTH__+0x656>
     42c:	28 df       	rcall	.-432    	; 0x27e <LCD_ClearScreen>
     42e:	57 c1       	rjmp	.+686    	; 0x6de <__LOCK_REGION_LENGTH__+0x2de>
     430:	20 91 8c 0a 	lds	r18, 0x0A8C	; 0x800a8c <LEFT>
     434:	22 23       	and	r18, r18
     436:	71 f0       	breq	.+28     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     438:	30 91 8b 0a 	lds	r19, 0x0A8B	; 0x800a8b <RIGHT>
     43c:	31 11       	cpse	r19, r1
     43e:	0a c0       	rjmp	.+20     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     440:	30 91 8a 0a 	lds	r19, 0x0A8A	; 0x800a8a <UP>
     444:	31 11       	cpse	r19, r1
     446:	06 c0       	rjmp	.+12     	; 0x454 <__LOCK_REGION_LENGTH__+0x54>
     448:	20 91 89 0a 	lds	r18, 0x0A89	; 0x800a89 <DOWN>
     44c:	21 11       	cpse	r18, r1
     44e:	35 c1       	rjmp	.+618    	; 0x6ba <__LOCK_REGION_LENGTH__+0x2ba>
     450:	16 df       	rcall	.-468    	; 0x27e <LCD_ClearScreen>
     452:	3d c1       	rjmp	.+634    	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
     454:	80 91 89 0a 	lds	r24, 0x0A89	; 0x800a89 <DOWN>
     458:	88 23       	and	r24, r24
     45a:	b1 f0       	breq	.+44     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
     45c:	80 91 8a 0a 	lds	r24, 0x0A8A	; 0x800a8a <UP>
     460:	81 11       	cpse	r24, r1
     462:	3d c1       	rjmp	.+634    	; 0x6de <__LOCK_REGION_LENGTH__+0x2de>
     464:	21 11       	cpse	r18, r1
     466:	3b c1       	rjmp	.+630    	; 0x6de <__LOCK_REGION_LENGTH__+0x2de>
     468:	80 91 8b 0a 	lds	r24, 0x0A8B	; 0x800a8b <RIGHT>
     46c:	81 11       	cpse	r24, r1
     46e:	37 c1       	rjmp	.+622    	; 0x6de <__LOCK_REGION_LENGTH__+0x2de>
     470:	80 91 87 0a 	lds	r24, 0x0A87	; 0x800a87 <current_song_choice>
     474:	88 23       	and	r24, r24
     476:	21 f0       	breq	.+8      	; 0x480 <__LOCK_REGION_LENGTH__+0x80>
     478:	81 e0       	ldi	r24, 0x01	; 1
     47a:	80 93 87 0a 	sts	0x0A87, r24	; 0x800a87 <current_song_choice>
     47e:	33 c1       	rjmp	.+614    	; 0x6e6 <__LOCK_REGION_LENGTH__+0x2e6>
     480:	81 e0       	ldi	r24, 0x01	; 1
     482:	80 93 87 0a 	sts	0x0A87, r24	; 0x800a87 <current_song_choice>
     486:	2f c1       	rjmp	.+606    	; 0x6e6 <__LOCK_REGION_LENGTH__+0x2e6>
     488:	80 91 8a 0a 	lds	r24, 0x0A8A	; 0x800a8a <UP>
     48c:	88 23       	and	r24, r24
     48e:	09 f4       	brne	.+2      	; 0x492 <__LOCK_REGION_LENGTH__+0x92>
     490:	df c2       	rjmp	.+1470   	; 0xa50 <__LOCK_REGION_LENGTH__+0x650>
     492:	21 11       	cpse	r18, r1
     494:	24 c1       	rjmp	.+584    	; 0x6de <__LOCK_REGION_LENGTH__+0x2de>
     496:	80 91 8b 0a 	lds	r24, 0x0A8B	; 0x800a8b <RIGHT>
     49a:	81 11       	cpse	r24, r1
     49c:	20 c1       	rjmp	.+576    	; 0x6de <__LOCK_REGION_LENGTH__+0x2de>
     49e:	80 91 87 0a 	lds	r24, 0x0A87	; 0x800a87 <current_song_choice>
     4a2:	88 23       	and	r24, r24
     4a4:	09 f4       	brne	.+2      	; 0x4a8 <__LOCK_REGION_LENGTH__+0xa8>
     4a6:	26 c1       	rjmp	.+588    	; 0x6f4 <__LOCK_REGION_LENGTH__+0x2f4>
     4a8:	81 50       	subi	r24, 0x01	; 1
     4aa:	80 93 87 0a 	sts	0x0A87, r24	; 0x800a87 <current_song_choice>
     4ae:	17 c1       	rjmp	.+558    	; 0x6de <__LOCK_REGION_LENGTH__+0x2de>
     4b0:	80 91 8b 0a 	lds	r24, 0x0A8B	; 0x800a8b <RIGHT>
     4b4:	88 23       	and	r24, r24
     4b6:	09 f4       	brne	.+2      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
     4b8:	12 c1       	rjmp	.+548    	; 0x6de <__LOCK_REGION_LENGTH__+0x2de>
     4ba:	80 91 87 0a 	lds	r24, 0x0A87	; 0x800a87 <current_song_choice>
     4be:	88 23       	and	r24, r24
     4c0:	09 f4       	brne	.+2      	; 0x4c4 <__LOCK_REGION_LENGTH__+0xc4>
     4c2:	b7 c2       	rjmp	.+1390   	; 0xa32 <__LOCK_REGION_LENGTH__+0x632>
     4c4:	85 e0       	ldi	r24, 0x05	; 5
     4c6:	90 e0       	ldi	r25, 0x00	; 0
     4c8:	c6 c2       	rjmp	.+1420   	; 0xa56 <__LOCK_REGION_LENGTH__+0x656>
     4ca:	20 91 8c 0a 	lds	r18, 0x0A8C	; 0x800a8c <LEFT>
     4ce:	21 11       	cpse	r18, r1
     4d0:	c2 c2       	rjmp	.+1412   	; 0xa56 <__LOCK_REGION_LENGTH__+0x656>
     4d2:	20 91 8b 0a 	lds	r18, 0x0A8B	; 0x800a8b <RIGHT>
     4d6:	21 11       	cpse	r18, r1
     4d8:	be c2       	rjmp	.+1404   	; 0xa56 <__LOCK_REGION_LENGTH__+0x656>
     4da:	20 91 8a 0a 	lds	r18, 0x0A8A	; 0x800a8a <UP>
     4de:	21 11       	cpse	r18, r1
     4e0:	ba c2       	rjmp	.+1396   	; 0xa56 <__LOCK_REGION_LENGTH__+0x656>
     4e2:	20 91 89 0a 	lds	r18, 0x0A89	; 0x800a89 <DOWN>
     4e6:	21 11       	cpse	r18, r1
     4e8:	b6 c2       	rjmp	.+1388   	; 0xa56 <__LOCK_REGION_LENGTH__+0x656>
     4ea:	c9 de       	rcall	.-622    	; 0x27e <LCD_ClearScreen>
     4ec:	7c c1       	rjmp	.+760    	; 0x7e6 <__LOCK_REGION_LENGTH__+0x3e6>
     4ee:	20 91 8c 0a 	lds	r18, 0x0A8C	; 0x800a8c <LEFT>
     4f2:	21 11       	cpse	r18, r1
     4f4:	b0 c2       	rjmp	.+1376   	; 0xa56 <__LOCK_REGION_LENGTH__+0x656>
     4f6:	20 91 8b 0a 	lds	r18, 0x0A8B	; 0x800a8b <RIGHT>
     4fa:	21 11       	cpse	r18, r1
     4fc:	ac c2       	rjmp	.+1368   	; 0xa56 <__LOCK_REGION_LENGTH__+0x656>
     4fe:	20 91 8a 0a 	lds	r18, 0x0A8A	; 0x800a8a <UP>
     502:	21 11       	cpse	r18, r1
     504:	a8 c2       	rjmp	.+1360   	; 0xa56 <__LOCK_REGION_LENGTH__+0x656>
     506:	20 91 89 0a 	lds	r18, 0x0A89	; 0x800a89 <DOWN>
     50a:	21 11       	cpse	r18, r1
     50c:	a4 c2       	rjmp	.+1352   	; 0xa56 <__LOCK_REGION_LENGTH__+0x656>
     50e:	b7 de       	rcall	.-658    	; 0x27e <LCD_ClearScreen>
     510:	08 c1       	rjmp	.+528    	; 0x722 <__LOCK_REGION_LENGTH__+0x322>
     512:	20 91 8c 0a 	lds	r18, 0x0A8C	; 0x800a8c <LEFT>
     516:	21 11       	cpse	r18, r1
     518:	9e c2       	rjmp	.+1340   	; 0xa56 <__LOCK_REGION_LENGTH__+0x656>
     51a:	20 91 8b 0a 	lds	r18, 0x0A8B	; 0x800a8b <RIGHT>
     51e:	21 11       	cpse	r18, r1
     520:	9a c2       	rjmp	.+1332   	; 0xa56 <__LOCK_REGION_LENGTH__+0x656>
     522:	20 91 8a 0a 	lds	r18, 0x0A8A	; 0x800a8a <UP>
     526:	21 11       	cpse	r18, r1
     528:	96 c2       	rjmp	.+1324   	; 0xa56 <__LOCK_REGION_LENGTH__+0x656>
     52a:	20 91 89 0a 	lds	r18, 0x0A89	; 0x800a89 <DOWN>
     52e:	21 11       	cpse	r18, r1
     530:	92 c2       	rjmp	.+1316   	; 0xa56 <__LOCK_REGION_LENGTH__+0x656>
     532:	a5 de       	rcall	.-694    	; 0x27e <LCD_ClearScreen>
     534:	d4 c0       	rjmp	.+424    	; 0x6de <__LOCK_REGION_LENGTH__+0x2de>
     536:	80 91 8c 0a 	lds	r24, 0x0A8C	; 0x800a8c <LEFT>
     53a:	88 23       	and	r24, r24
     53c:	79 f0       	breq	.+30     	; 0x55c <__LOCK_REGION_LENGTH__+0x15c>
     53e:	80 91 8b 0a 	lds	r24, 0x0A8B	; 0x800a8b <RIGHT>
     542:	81 11       	cpse	r24, r1
     544:	ee c0       	rjmp	.+476    	; 0x722 <__LOCK_REGION_LENGTH__+0x322>
     546:	80 91 8a 0a 	lds	r24, 0x0A8A	; 0x800a8a <UP>
     54a:	81 11       	cpse	r24, r1
     54c:	ea c0       	rjmp	.+468    	; 0x722 <__LOCK_REGION_LENGTH__+0x322>
     54e:	80 91 89 0a 	lds	r24, 0x0A89	; 0x800a89 <DOWN>
     552:	81 11       	cpse	r24, r1
     554:	e6 c0       	rjmp	.+460    	; 0x722 <__LOCK_REGION_LENGTH__+0x322>
     556:	86 e0       	ldi	r24, 0x06	; 6
     558:	90 e0       	ldi	r25, 0x00	; 0
     55a:	7d c2       	rjmp	.+1274   	; 0xa56 <__LOCK_REGION_LENGTH__+0x656>
     55c:	80 91 8b 0a 	lds	r24, 0x0A8B	; 0x800a8b <RIGHT>
     560:	88 23       	and	r24, r24
     562:	09 f4       	brne	.+2      	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
     564:	de c0       	rjmp	.+444    	; 0x722 <__LOCK_REGION_LENGTH__+0x322>
     566:	80 91 8a 0a 	lds	r24, 0x0A8A	; 0x800a8a <UP>
     56a:	81 11       	cpse	r24, r1
     56c:	da c0       	rjmp	.+436    	; 0x722 <__LOCK_REGION_LENGTH__+0x322>
     56e:	80 91 89 0a 	lds	r24, 0x0A89	; 0x800a89 <DOWN>
     572:	81 11       	cpse	r24, r1
     574:	d6 c0       	rjmp	.+428    	; 0x722 <__LOCK_REGION_LENGTH__+0x322>
     576:	83 de       	rcall	.-762    	; 0x27e <LCD_ClearScreen>
     578:	89 e0       	ldi	r24, 0x09	; 9
     57a:	90 e0       	ldi	r25, 0x00	; 0
     57c:	6c c2       	rjmp	.+1240   	; 0xa56 <__LOCK_REGION_LENGTH__+0x656>
     57e:	80 91 8c 0a 	lds	r24, 0x0A8C	; 0x800a8c <LEFT>
     582:	88 23       	and	r24, r24
     584:	79 f0       	breq	.+30     	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
     586:	80 91 8b 0a 	lds	r24, 0x0A8B	; 0x800a8b <RIGHT>
     58a:	81 11       	cpse	r24, r1
     58c:	2c c1       	rjmp	.+600    	; 0x7e6 <__LOCK_REGION_LENGTH__+0x3e6>
     58e:	80 91 8a 0a 	lds	r24, 0x0A8A	; 0x800a8a <UP>
     592:	81 11       	cpse	r24, r1
     594:	28 c1       	rjmp	.+592    	; 0x7e6 <__LOCK_REGION_LENGTH__+0x3e6>
     596:	80 91 89 0a 	lds	r24, 0x0A89	; 0x800a89 <DOWN>
     59a:	81 11       	cpse	r24, r1
     59c:	24 c1       	rjmp	.+584    	; 0x7e6 <__LOCK_REGION_LENGTH__+0x3e6>
     59e:	86 e0       	ldi	r24, 0x06	; 6
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	59 c2       	rjmp	.+1202   	; 0xa56 <__LOCK_REGION_LENGTH__+0x656>
     5a4:	80 91 8b 0a 	lds	r24, 0x0A8B	; 0x800a8b <RIGHT>
     5a8:	88 23       	and	r24, r24
     5aa:	09 f4       	brne	.+2      	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
     5ac:	1c c1       	rjmp	.+568    	; 0x7e6 <__LOCK_REGION_LENGTH__+0x3e6>
     5ae:	80 91 8a 0a 	lds	r24, 0x0A8A	; 0x800a8a <UP>
     5b2:	81 11       	cpse	r24, r1
     5b4:	18 c1       	rjmp	.+560    	; 0x7e6 <__LOCK_REGION_LENGTH__+0x3e6>
     5b6:	80 91 89 0a 	lds	r24, 0x0A89	; 0x800a89 <DOWN>
     5ba:	81 11       	cpse	r24, r1
     5bc:	14 c1       	rjmp	.+552    	; 0x7e6 <__LOCK_REGION_LENGTH__+0x3e6>
     5be:	5f de       	rcall	.-834    	; 0x27e <LCD_ClearScreen>
     5c0:	89 e0       	ldi	r24, 0x09	; 9
     5c2:	90 e0       	ldi	r25, 0x00	; 0
     5c4:	48 c2       	rjmp	.+1168   	; 0xa56 <__LOCK_REGION_LENGTH__+0x656>
     5c6:	20 91 8c 0a 	lds	r18, 0x0A8C	; 0x800a8c <LEFT>
     5ca:	21 11       	cpse	r18, r1
     5cc:	44 c2       	rjmp	.+1160   	; 0xa56 <__LOCK_REGION_LENGTH__+0x656>
     5ce:	20 91 8b 0a 	lds	r18, 0x0A8B	; 0x800a8b <RIGHT>
     5d2:	21 11       	cpse	r18, r1
     5d4:	40 c2       	rjmp	.+1152   	; 0xa56 <__LOCK_REGION_LENGTH__+0x656>
     5d6:	20 91 8a 0a 	lds	r18, 0x0A8A	; 0x800a8a <UP>
     5da:	21 11       	cpse	r18, r1
     5dc:	3c c2       	rjmp	.+1144   	; 0xa56 <__LOCK_REGION_LENGTH__+0x656>
     5de:	20 91 89 0a 	lds	r18, 0x0A89	; 0x800a89 <DOWN>
     5e2:	21 11       	cpse	r18, r1
     5e4:	38 c2       	rjmp	.+1136   	; 0xa56 <__LOCK_REGION_LENGTH__+0x656>
     5e6:	61 c1       	rjmp	.+706    	; 0x8aa <__LOCK_REGION_LENGTH__+0x4aa>
     5e8:	80 91 75 0a 	lds	r24, 0x0A75	; 0x800a75 <count_down.2272>
     5ec:	89 31       	cpi	r24, 0x19	; 25
     5ee:	20 f4       	brcc	.+8      	; 0x5f8 <__LOCK_REGION_LENGTH__+0x1f8>
     5f0:	8f 5f       	subi	r24, 0xFF	; 255
     5f2:	80 93 75 0a 	sts	0x0A75, r24	; 0x800a75 <count_down.2272>
     5f6:	59 c1       	rjmp	.+690    	; 0x8aa <__LOCK_REGION_LENGTH__+0x4aa>
     5f8:	10 92 75 0a 	sts	0x0A75, r1	; 0x800a75 <count_down.2272>
     5fc:	81 e0       	ldi	r24, 0x01	; 1
     5fe:	80 93 7a 0a 	sts	0x0A7A, r24	; 0x800a7a <playing>
     602:	68 c1       	rjmp	.+720    	; 0x8d4 <__LOCK_REGION_LENGTH__+0x4d4>
     604:	80 91 7c 0a 	lds	r24, 0x0A7C	; 0x800a7c <song_finished>
     608:	88 23       	and	r24, r24
     60a:	09 f4       	brne	.+2      	; 0x60e <__LOCK_REGION_LENGTH__+0x20e>
     60c:	63 c1       	rjmp	.+710    	; 0x8d4 <__LOCK_REGION_LENGTH__+0x4d4>
     60e:	80 91 7a 0a 	lds	r24, 0x0A7A	; 0x800a7a <playing>
     612:	81 11       	cpse	r24, r1
     614:	5f c1       	rjmp	.+702    	; 0x8d4 <__LOCK_REGION_LENGTH__+0x4d4>
     616:	ae c1       	rjmp	.+860    	; 0x974 <__LOCK_REGION_LENGTH__+0x574>
     618:	20 91 87 0a 	lds	r18, 0x0A87	; 0x800a87 <current_song_choice>
     61c:	82 eb       	ldi	r24, 0xB2	; 178
     61e:	94 e0       	ldi	r25, 0x04	; 4
     620:	28 9f       	mul	r18, r24
     622:	f0 01       	movw	r30, r0
     624:	29 9f       	mul	r18, r25
     626:	f0 0d       	add	r31, r0
     628:	11 24       	eor	r1, r1
     62a:	ee 55       	subi	r30, 0x5E	; 94
     62c:	f0 4f       	sbci	r31, 0xF0	; 240
     62e:	90 81       	ld	r25, Z
     630:	80 91 85 0a 	lds	r24, 0x0A85	; 0x800a85 <current_score>
     634:	98 17       	cp	r25, r24
     636:	30 f4       	brcc	.+12     	; 0x644 <__LOCK_REGION_LENGTH__+0x244>
     638:	10 92 7c 0a 	sts	0x0A7C, r1	; 0x800a7c <song_finished>
     63c:	10 92 7b 0a 	sts	0x0A7B, r1	; 0x800a7b <score_increase>
     640:	1e de       	rcall	.-964    	; 0x27e <LCD_ClearScreen>
     642:	a1 c1       	rjmp	.+834    	; 0x986 <__LOCK_REGION_LENGTH__+0x586>
     644:	80 91 8c 0a 	lds	r24, 0x0A8C	; 0x800a8c <LEFT>
     648:	81 11       	cpse	r24, r1
     64a:	0d c0       	rjmp	.+26     	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
     64c:	80 91 8b 0a 	lds	r24, 0x0A8B	; 0x800a8b <RIGHT>
     650:	81 11       	cpse	r24, r1
     652:	09 c0       	rjmp	.+18     	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
     654:	80 91 8a 0a 	lds	r24, 0x0A8A	; 0x800a8a <UP>
     658:	81 11       	cpse	r24, r1
     65a:	05 c0       	rjmp	.+10     	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
     65c:	80 91 89 0a 	lds	r24, 0x0A89	; 0x800a89 <DOWN>
     660:	88 23       	and	r24, r24
     662:	09 f4       	brne	.+2      	; 0x666 <__LOCK_REGION_LENGTH__+0x266>
     664:	87 c1       	rjmp	.+782    	; 0x974 <__LOCK_REGION_LENGTH__+0x574>
     666:	10 92 7c 0a 	sts	0x0A7C, r1	; 0x800a7c <song_finished>
     66a:	10 92 7b 0a 	sts	0x0A7B, r1	; 0x800a7b <score_increase>
     66e:	8e e0       	ldi	r24, 0x0E	; 14
     670:	90 e0       	ldi	r25, 0x00	; 0
     672:	f1 c1       	rjmp	.+994    	; 0xa56 <__LOCK_REGION_LENGTH__+0x656>
     674:	80 91 8c 0a 	lds	r24, 0x0A8C	; 0x800a8c <LEFT>
     678:	81 11       	cpse	r24, r1
     67a:	de c1       	rjmp	.+956    	; 0xa38 <__LOCK_REGION_LENGTH__+0x638>
     67c:	80 91 8b 0a 	lds	r24, 0x0A8B	; 0x800a8b <RIGHT>
     680:	81 11       	cpse	r24, r1
     682:	dd c1       	rjmp	.+954    	; 0xa3e <__LOCK_REGION_LENGTH__+0x63e>
     684:	80 91 8a 0a 	lds	r24, 0x0A8A	; 0x800a8a <UP>
     688:	81 11       	cpse	r24, r1
     68a:	dc c1       	rjmp	.+952    	; 0xa44 <__LOCK_REGION_LENGTH__+0x644>
     68c:	80 91 89 0a 	lds	r24, 0x0A89	; 0x800a89 <DOWN>
     690:	81 11       	cpse	r24, r1
     692:	db c1       	rjmp	.+950    	; 0xa4a <__LOCK_REGION_LENGTH__+0x64a>
     694:	78 c1       	rjmp	.+752    	; 0x986 <__LOCK_REGION_LENGTH__+0x586>
     696:	20 91 8c 0a 	lds	r18, 0x0A8C	; 0x800a8c <LEFT>
     69a:	21 11       	cpse	r18, r1
     69c:	dc c1       	rjmp	.+952    	; 0xa56 <__LOCK_REGION_LENGTH__+0x656>
     69e:	20 91 8b 0a 	lds	r18, 0x0A8B	; 0x800a8b <RIGHT>
     6a2:	21 11       	cpse	r18, r1
     6a4:	d8 c1       	rjmp	.+944    	; 0xa56 <__LOCK_REGION_LENGTH__+0x656>
     6a6:	20 91 8a 0a 	lds	r18, 0x0A8A	; 0x800a8a <UP>
     6aa:	21 11       	cpse	r18, r1
     6ac:	d4 c1       	rjmp	.+936    	; 0xa56 <__LOCK_REGION_LENGTH__+0x656>
     6ae:	20 91 89 0a 	lds	r18, 0x0A89	; 0x800a89 <DOWN>
     6b2:	21 11       	cpse	r18, r1
     6b4:	d0 c1       	rjmp	.+928    	; 0xa56 <__LOCK_REGION_LENGTH__+0x656>
     6b6:	e3 dd       	rcall	.-1082   	; 0x27e <LCD_ClearScreen>
     6b8:	0a c0       	rjmp	.+20     	; 0x6ce <__LOCK_REGION_LENGTH__+0x2ce>
     6ba:	fc 01       	movw	r30, r24
     6bc:	31 97       	sbiw	r30, 0x01	; 1
     6be:	ed 30       	cpi	r30, 0x0D	; 13
     6c0:	f1 05       	cpc	r31, r1
     6c2:	08 f0       	brcs	.+2      	; 0x6c6 <__LOCK_REGION_LENGTH__+0x2c6>
     6c4:	c8 c1       	rjmp	.+912    	; 0xa56 <__LOCK_REGION_LENGTH__+0x656>
     6c6:	eb 5a       	subi	r30, 0xAB	; 171
     6c8:	ff 4f       	sbci	r31, 0xFF	; 255
     6ca:	0c 94 83 0b 	jmp	0x1706	; 0x1706 <__tablejump2__>
     6ce:	10 92 87 0a 	sts	0x0A87, r1	; 0x800a87 <current_song_choice>
     6d2:	10 92 85 0a 	sts	0x0A85, r1	; 0x800a85 <current_score>
     6d6:	5b de       	rcall	.-842    	; 0x38e <LCD_Game_Menu>
     6d8:	81 e0       	ldi	r24, 0x01	; 1
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	bc c1       	rjmp	.+888    	; 0xa56 <__LOCK_REGION_LENGTH__+0x656>
     6de:	80 91 87 0a 	lds	r24, 0x0A87	; 0x800a87 <current_song_choice>
     6e2:	88 23       	and	r24, r24
     6e4:	39 f0       	breq	.+14     	; 0x6f4 <__LOCK_REGION_LENGTH__+0x2f4>
     6e6:	81 e0       	ldi	r24, 0x01	; 1
     6e8:	cd dd       	rcall	.-1126   	; 0x284 <LCD_Cursor>
     6ea:	80 e2       	ldi	r24, 0x20	; 32
     6ec:	d3 dd       	rcall	.-1114   	; 0x294 <LCD_WriteData>
     6ee:	81 e1       	ldi	r24, 0x11	; 17
     6f0:	c9 dd       	rcall	.-1134   	; 0x284 <LCD_Cursor>
     6f2:	06 c0       	rjmp	.+12     	; 0x700 <__LOCK_REGION_LENGTH__+0x300>
     6f4:	81 e1       	ldi	r24, 0x11	; 17
     6f6:	c6 dd       	rcall	.-1140   	; 0x284 <LCD_Cursor>
     6f8:	80 e2       	ldi	r24, 0x20	; 32
     6fa:	cc dd       	rcall	.-1128   	; 0x294 <LCD_WriteData>
     6fc:	81 e0       	ldi	r24, 0x01	; 1
     6fe:	c2 dd       	rcall	.-1148   	; 0x284 <LCD_Cursor>
     700:	85 ea       	ldi	r24, 0xA5	; 165
     702:	c8 dd       	rcall	.-1136   	; 0x294 <LCD_WriteData>
     704:	48 e1       	ldi	r20, 0x18	; 24
     706:	5a e0       	ldi	r21, 0x0A	; 10
     708:	61 e0       	ldi	r22, 0x01	; 1
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	82 e0       	ldi	r24, 0x02	; 2
     70e:	e4 dd       	rcall	.-1080   	; 0x2d8 <LCD_Write_Single_Line>
     710:	46 e2       	ldi	r20, 0x26	; 38
     712:	5a e0       	ldi	r21, 0x0A	; 10
     714:	62 e0       	ldi	r22, 0x02	; 2
     716:	70 e0       	ldi	r23, 0x00	; 0
     718:	82 e0       	ldi	r24, 0x02	; 2
     71a:	de dd       	rcall	.-1092   	; 0x2d8 <LCD_Write_Single_Line>
     71c:	83 e0       	ldi	r24, 0x03	; 3
     71e:	90 e0       	ldi	r25, 0x00	; 0
     720:	9a c1       	rjmp	.+820    	; 0xa56 <__LOCK_REGION_LENGTH__+0x656>
     722:	4a e2       	ldi	r20, 0x2A	; 42
     724:	5a e0       	ldi	r21, 0x0A	; 10
     726:	61 e0       	ldi	r22, 0x01	; 1
     728:	70 e0       	ldi	r23, 0x00	; 0
     72a:	81 e0       	ldi	r24, 0x01	; 1
     72c:	d5 dd       	rcall	.-1110   	; 0x2d8 <LCD_Write_Single_Line>
     72e:	87 e0       	ldi	r24, 0x07	; 7
     730:	a9 dd       	rcall	.-1198   	; 0x284 <LCD_Cursor>
     732:	80 e0       	ldi	r24, 0x00	; 0
     734:	af dd       	rcall	.-1186   	; 0x294 <LCD_WriteData>
     736:	4a e3       	ldi	r20, 0x3A	; 58
     738:	5a e0       	ldi	r21, 0x0A	; 10
     73a:	62 e0       	ldi	r22, 0x02	; 2
     73c:	70 e0       	ldi	r23, 0x00	; 0
     73e:	81 e0       	ldi	r24, 0x01	; 1
     740:	cb dd       	rcall	.-1130   	; 0x2d8 <LCD_Write_Single_Line>
     742:	8c e1       	ldi	r24, 0x1C	; 28
     744:	9f dd       	rcall	.-1218   	; 0x284 <LCD_Cursor>
     746:	80 91 87 0a 	lds	r24, 0x0A87	; 0x800a87 <current_song_choice>
     74a:	02 eb       	ldi	r16, 0xB2	; 178
     74c:	14 e0       	ldi	r17, 0x04	; 4
     74e:	80 9f       	mul	r24, r16
     750:	f0 01       	movw	r30, r0
     752:	81 9f       	mul	r24, r17
     754:	f0 0d       	add	r31, r0
     756:	11 24       	eor	r1, r1
     758:	ee 55       	subi	r30, 0x5E	; 94
     75a:	f0 4f       	sbci	r31, 0xF0	; 240
     75c:	80 81       	ld	r24, Z
     75e:	99 e2       	ldi	r25, 0x29	; 41
     760:	89 9f       	mul	r24, r25
     762:	81 2d       	mov	r24, r1
     764:	11 24       	eor	r1, r1
     766:	cd ec       	ldi	r28, 0xCD	; 205
     768:	82 95       	swap	r24
     76a:	8f 70       	andi	r24, 0x0F	; 15
     76c:	80 5d       	subi	r24, 0xD0	; 208
     76e:	92 dd       	rcall	.-1244   	; 0x294 <LCD_WriteData>
     770:	80 91 87 0a 	lds	r24, 0x0A87	; 0x800a87 <current_song_choice>
     774:	80 9f       	mul	r24, r16
     776:	f0 01       	movw	r30, r0
     778:	81 9f       	mul	r24, r17
     77a:	f0 0d       	add	r31, r0
     77c:	11 24       	eor	r1, r1
     77e:	ee 55       	subi	r30, 0x5E	; 94
     780:	f0 4f       	sbci	r31, 0xF0	; 240
     782:	80 81       	ld	r24, Z
     784:	8c 9f       	mul	r24, r28
     786:	81 2d       	mov	r24, r1
     788:	11 24       	eor	r1, r1
     78a:	86 95       	lsr	r24
     78c:	86 95       	lsr	r24
     78e:	86 95       	lsr	r24
     790:	8c 9f       	mul	r24, r28
     792:	91 2d       	mov	r25, r1
     794:	11 24       	eor	r1, r1
     796:	96 95       	lsr	r25
     798:	96 95       	lsr	r25
     79a:	96 95       	lsr	r25
     79c:	99 0f       	add	r25, r25
     79e:	29 2f       	mov	r18, r25
     7a0:	22 0f       	add	r18, r18
     7a2:	22 0f       	add	r18, r18
     7a4:	92 0f       	add	r25, r18
     7a6:	89 1b       	sub	r24, r25
     7a8:	80 5d       	subi	r24, 0xD0	; 208
     7aa:	74 dd       	rcall	.-1304   	; 0x294 <LCD_WriteData>
     7ac:	80 91 87 0a 	lds	r24, 0x0A87	; 0x800a87 <current_song_choice>
     7b0:	80 9f       	mul	r24, r16
     7b2:	f0 01       	movw	r30, r0
     7b4:	81 9f       	mul	r24, r17
     7b6:	f0 0d       	add	r31, r0
     7b8:	11 24       	eor	r1, r1
     7ba:	ee 55       	subi	r30, 0x5E	; 94
     7bc:	f0 4f       	sbci	r31, 0xF0	; 240
     7be:	80 81       	ld	r24, Z
     7c0:	8c 9f       	mul	r24, r28
     7c2:	c1 2d       	mov	r28, r1
     7c4:	11 24       	eor	r1, r1
     7c6:	c6 95       	lsr	r28
     7c8:	c6 95       	lsr	r28
     7ca:	c6 95       	lsr	r28
     7cc:	cc 0f       	add	r28, r28
     7ce:	9c 2f       	mov	r25, r28
     7d0:	99 0f       	add	r25, r25
     7d2:	99 0f       	add	r25, r25
     7d4:	c9 0f       	add	r28, r25
     7d6:	8c 1b       	sub	r24, r28
     7d8:	80 5d       	subi	r24, 0xD0	; 208
     7da:	5c dd       	rcall	.-1352   	; 0x294 <LCD_WriteData>
     7dc:	81 e2       	ldi	r24, 0x21	; 33
     7de:	52 dd       	rcall	.-1372   	; 0x284 <LCD_Cursor>
     7e0:	87 e0       	ldi	r24, 0x07	; 7
     7e2:	90 e0       	ldi	r25, 0x00	; 0
     7e4:	38 c1       	rjmp	.+624    	; 0xa56 <__LOCK_REGION_LENGTH__+0x656>
     7e6:	4a e2       	ldi	r20, 0x2A	; 42
     7e8:	5a e0       	ldi	r21, 0x0A	; 10
     7ea:	61 e0       	ldi	r22, 0x01	; 1
     7ec:	70 e0       	ldi	r23, 0x00	; 0
     7ee:	81 e0       	ldi	r24, 0x01	; 1
     7f0:	73 dd       	rcall	.-1306   	; 0x2d8 <LCD_Write_Single_Line>
     7f2:	87 e0       	ldi	r24, 0x07	; 7
     7f4:	47 dd       	rcall	.-1394   	; 0x284 <LCD_Cursor>
     7f6:	80 e0       	ldi	r24, 0x00	; 0
     7f8:	4d dd       	rcall	.-1382   	; 0x294 <LCD_WriteData>
     7fa:	4a e3       	ldi	r20, 0x3A	; 58
     7fc:	5a e0       	ldi	r21, 0x0A	; 10
     7fe:	62 e0       	ldi	r22, 0x02	; 2
     800:	70 e0       	ldi	r23, 0x00	; 0
     802:	81 e0       	ldi	r24, 0x01	; 1
     804:	69 dd       	rcall	.-1326   	; 0x2d8 <LCD_Write_Single_Line>
     806:	8c e1       	ldi	r24, 0x1C	; 28
     808:	3d dd       	rcall	.-1414   	; 0x284 <LCD_Cursor>
     80a:	80 91 87 0a 	lds	r24, 0x0A87	; 0x800a87 <current_song_choice>
     80e:	02 eb       	ldi	r16, 0xB2	; 178
     810:	14 e0       	ldi	r17, 0x04	; 4
     812:	80 9f       	mul	r24, r16
     814:	f0 01       	movw	r30, r0
     816:	81 9f       	mul	r24, r17
     818:	f0 0d       	add	r31, r0
     81a:	11 24       	eor	r1, r1
     81c:	ee 55       	subi	r30, 0x5E	; 94
     81e:	f0 4f       	sbci	r31, 0xF0	; 240
     820:	80 81       	ld	r24, Z
     822:	99 e2       	ldi	r25, 0x29	; 41
     824:	89 9f       	mul	r24, r25
     826:	81 2d       	mov	r24, r1
     828:	11 24       	eor	r1, r1
     82a:	cd ec       	ldi	r28, 0xCD	; 205
     82c:	82 95       	swap	r24
     82e:	8f 70       	andi	r24, 0x0F	; 15
     830:	80 5d       	subi	r24, 0xD0	; 208
     832:	30 dd       	rcall	.-1440   	; 0x294 <LCD_WriteData>
     834:	80 91 87 0a 	lds	r24, 0x0A87	; 0x800a87 <current_song_choice>
     838:	80 9f       	mul	r24, r16
     83a:	f0 01       	movw	r30, r0
     83c:	81 9f       	mul	r24, r17
     83e:	f0 0d       	add	r31, r0
     840:	11 24       	eor	r1, r1
     842:	ee 55       	subi	r30, 0x5E	; 94
     844:	f0 4f       	sbci	r31, 0xF0	; 240
     846:	80 81       	ld	r24, Z
     848:	8c 9f       	mul	r24, r28
     84a:	81 2d       	mov	r24, r1
     84c:	11 24       	eor	r1, r1
     84e:	86 95       	lsr	r24
     850:	86 95       	lsr	r24
     852:	86 95       	lsr	r24
     854:	8c 9f       	mul	r24, r28
     856:	91 2d       	mov	r25, r1
     858:	11 24       	eor	r1, r1
     85a:	96 95       	lsr	r25
     85c:	96 95       	lsr	r25
     85e:	96 95       	lsr	r25
     860:	99 0f       	add	r25, r25
     862:	29 2f       	mov	r18, r25
     864:	22 0f       	add	r18, r18
     866:	22 0f       	add	r18, r18
     868:	92 0f       	add	r25, r18
     86a:	89 1b       	sub	r24, r25
     86c:	80 5d       	subi	r24, 0xD0	; 208
     86e:	12 dd       	rcall	.-1500   	; 0x294 <LCD_WriteData>
     870:	80 91 87 0a 	lds	r24, 0x0A87	; 0x800a87 <current_song_choice>
     874:	80 9f       	mul	r24, r16
     876:	f0 01       	movw	r30, r0
     878:	81 9f       	mul	r24, r17
     87a:	f0 0d       	add	r31, r0
     87c:	11 24       	eor	r1, r1
     87e:	ee 55       	subi	r30, 0x5E	; 94
     880:	f0 4f       	sbci	r31, 0xF0	; 240
     882:	80 81       	ld	r24, Z
     884:	8c 9f       	mul	r24, r28
     886:	c1 2d       	mov	r28, r1
     888:	11 24       	eor	r1, r1
     88a:	c6 95       	lsr	r28
     88c:	c6 95       	lsr	r28
     88e:	c6 95       	lsr	r28
     890:	cc 0f       	add	r28, r28
     892:	9c 2f       	mov	r25, r28
     894:	99 0f       	add	r25, r25
     896:	99 0f       	add	r25, r25
     898:	c9 0f       	add	r28, r25
     89a:	8c 1b       	sub	r24, r28
     89c:	80 5d       	subi	r24, 0xD0	; 208
     89e:	fa dc       	rcall	.-1548   	; 0x294 <LCD_WriteData>
     8a0:	81 e2       	ldi	r24, 0x21	; 33
     8a2:	f0 dc       	rcall	.-1568   	; 0x284 <LCD_Cursor>
     8a4:	88 e0       	ldi	r24, 0x08	; 8
     8a6:	90 e0       	ldi	r25, 0x00	; 0
     8a8:	d6 c0       	rjmp	.+428    	; 0xa56 <__LOCK_REGION_LENGTH__+0x656>
     8aa:	6f e3       	ldi	r22, 0x3F	; 63
     8ac:	7a e0       	ldi	r23, 0x0A	; 10
     8ae:	81 e0       	ldi	r24, 0x01	; 1
     8b0:	fa dc       	rcall	.-1548   	; 0x2a6 <LCD_DisplayString>
     8b2:	89 e0       	ldi	r24, 0x09	; 9
     8b4:	e7 dc       	rcall	.-1586   	; 0x284 <LCD_Cursor>
     8b6:	80 91 85 0a 	lds	r24, 0x0A85	; 0x800a85 <current_score>
     8ba:	80 5d       	subi	r24, 0xD0	; 208
     8bc:	eb dc       	rcall	.-1578   	; 0x294 <LCD_WriteData>
     8be:	80 91 85 0a 	lds	r24, 0x0A85	; 0x800a85 <current_score>
     8c2:	80 5d       	subi	r24, 0xD0	; 208
     8c4:	e7 dc       	rcall	.-1586   	; 0x294 <LCD_WriteData>
     8c6:	80 91 85 0a 	lds	r24, 0x0A85	; 0x800a85 <current_score>
     8ca:	80 5d       	subi	r24, 0xD0	; 208
     8cc:	e3 dc       	rcall	.-1594   	; 0x294 <LCD_WriteData>
     8ce:	8a e0       	ldi	r24, 0x0A	; 10
     8d0:	90 e0       	ldi	r25, 0x00	; 0
     8d2:	c1 c0       	rjmp	.+386    	; 0xa56 <__LOCK_REGION_LENGTH__+0x656>
     8d4:	80 91 7b 0a 	lds	r24, 0x0A7B	; 0x800a7b <score_increase>
     8d8:	88 23       	and	r24, r24
     8da:	b1 f1       	breq	.+108    	; 0x948 <__LOCK_REGION_LENGTH__+0x548>
     8dc:	89 e0       	ldi	r24, 0x09	; 9
     8de:	d2 dc       	rcall	.-1628   	; 0x284 <LCD_Cursor>
     8e0:	80 91 85 0a 	lds	r24, 0x0A85	; 0x800a85 <current_score>
     8e4:	99 e2       	ldi	r25, 0x29	; 41
     8e6:	89 9f       	mul	r24, r25
     8e8:	81 2d       	mov	r24, r1
     8ea:	11 24       	eor	r1, r1
     8ec:	cd ec       	ldi	r28, 0xCD	; 205
     8ee:	82 95       	swap	r24
     8f0:	8f 70       	andi	r24, 0x0F	; 15
     8f2:	80 5d       	subi	r24, 0xD0	; 208
     8f4:	cf dc       	rcall	.-1634   	; 0x294 <LCD_WriteData>
     8f6:	80 91 85 0a 	lds	r24, 0x0A85	; 0x800a85 <current_score>
     8fa:	8c 9f       	mul	r24, r28
     8fc:	81 2d       	mov	r24, r1
     8fe:	11 24       	eor	r1, r1
     900:	86 95       	lsr	r24
     902:	86 95       	lsr	r24
     904:	86 95       	lsr	r24
     906:	8c 9f       	mul	r24, r28
     908:	91 2d       	mov	r25, r1
     90a:	11 24       	eor	r1, r1
     90c:	96 95       	lsr	r25
     90e:	96 95       	lsr	r25
     910:	96 95       	lsr	r25
     912:	99 0f       	add	r25, r25
     914:	29 2f       	mov	r18, r25
     916:	22 0f       	add	r18, r18
     918:	22 0f       	add	r18, r18
     91a:	92 0f       	add	r25, r18
     91c:	89 1b       	sub	r24, r25
     91e:	80 5d       	subi	r24, 0xD0	; 208
     920:	b9 dc       	rcall	.-1678   	; 0x294 <LCD_WriteData>
     922:	80 91 85 0a 	lds	r24, 0x0A85	; 0x800a85 <current_score>
     926:	8c 9f       	mul	r24, r28
     928:	c1 2d       	mov	r28, r1
     92a:	11 24       	eor	r1, r1
     92c:	c6 95       	lsr	r28
     92e:	c6 95       	lsr	r28
     930:	c6 95       	lsr	r28
     932:	cc 0f       	add	r28, r28
     934:	9c 2f       	mov	r25, r28
     936:	99 0f       	add	r25, r25
     938:	99 0f       	add	r25, r25
     93a:	c9 0f       	add	r28, r25
     93c:	8c 1b       	sub	r24, r28
     93e:	80 5d       	subi	r24, 0xD0	; 208
     940:	a9 dc       	rcall	.-1710   	; 0x294 <LCD_WriteData>
     942:	8b e0       	ldi	r24, 0x0B	; 11
     944:	90 e0       	ldi	r25, 0x00	; 0
     946:	87 c0       	rjmp	.+270    	; 0xa56 <__LOCK_REGION_LENGTH__+0x656>
     948:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     94c:	86 30       	cpi	r24, 0x06	; 6
     94e:	49 f4       	brne	.+18     	; 0x962 <__LOCK_REGION_LENGTH__+0x562>
     950:	46 e4       	ldi	r20, 0x46	; 70
     952:	5a e0       	ldi	r21, 0x0A	; 10
     954:	62 e0       	ldi	r22, 0x02	; 2
     956:	70 e0       	ldi	r23, 0x00	; 0
     958:	81 e0       	ldi	r24, 0x01	; 1
     95a:	be dc       	rcall	.-1668   	; 0x2d8 <LCD_Write_Single_Line>
     95c:	8b e0       	ldi	r24, 0x0B	; 11
     95e:	90 e0       	ldi	r25, 0x00	; 0
     960:	7a c0       	rjmp	.+244    	; 0xa56 <__LOCK_REGION_LENGTH__+0x656>
     962:	4f e4       	ldi	r20, 0x4F	; 79
     964:	5a e0       	ldi	r21, 0x0A	; 10
     966:	62 e0       	ldi	r22, 0x02	; 2
     968:	70 e0       	ldi	r23, 0x00	; 0
     96a:	81 e0       	ldi	r24, 0x01	; 1
     96c:	b5 dc       	rcall	.-1686   	; 0x2d8 <LCD_Write_Single_Line>
     96e:	8b e0       	ldi	r24, 0x0B	; 11
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	71 c0       	rjmp	.+226    	; 0xa56 <__LOCK_REGION_LENGTH__+0x656>
     974:	44 e5       	ldi	r20, 0x54	; 84
     976:	5a e0       	ldi	r21, 0x0A	; 10
     978:	62 e0       	ldi	r22, 0x02	; 2
     97a:	70 e0       	ldi	r23, 0x00	; 0
     97c:	81 e0       	ldi	r24, 0x01	; 1
     97e:	ac dc       	rcall	.-1704   	; 0x2d8 <LCD_Write_Single_Line>
     980:	8c e0       	ldi	r24, 0x0C	; 12
     982:	90 e0       	ldi	r25, 0x00	; 0
     984:	68 c0       	rjmp	.+208    	; 0xa56 <__LOCK_REGION_LENGTH__+0x656>
     986:	61 e6       	ldi	r22, 0x61	; 97
     988:	7a e0       	ldi	r23, 0x0A	; 10
     98a:	81 e0       	ldi	r24, 0x01	; 1
     98c:	8c dc       	rcall	.-1768   	; 0x2a6 <LCD_DisplayString>
     98e:	8d e0       	ldi	r24, 0x0D	; 13
     990:	79 dc       	rcall	.-1806   	; 0x284 <LCD_Cursor>
     992:	80 91 85 0a 	lds	r24, 0x0A85	; 0x800a85 <current_score>
     996:	99 e2       	ldi	r25, 0x29	; 41
     998:	89 9f       	mul	r24, r25
     99a:	81 2d       	mov	r24, r1
     99c:	11 24       	eor	r1, r1
     99e:	cd ec       	ldi	r28, 0xCD	; 205
     9a0:	82 95       	swap	r24
     9a2:	8f 70       	andi	r24, 0x0F	; 15
     9a4:	80 5d       	subi	r24, 0xD0	; 208
     9a6:	76 dc       	rcall	.-1812   	; 0x294 <LCD_WriteData>
     9a8:	80 91 85 0a 	lds	r24, 0x0A85	; 0x800a85 <current_score>
     9ac:	8c 9f       	mul	r24, r28
     9ae:	81 2d       	mov	r24, r1
     9b0:	11 24       	eor	r1, r1
     9b2:	86 95       	lsr	r24
     9b4:	86 95       	lsr	r24
     9b6:	86 95       	lsr	r24
     9b8:	8c 9f       	mul	r24, r28
     9ba:	91 2d       	mov	r25, r1
     9bc:	11 24       	eor	r1, r1
     9be:	96 95       	lsr	r25
     9c0:	96 95       	lsr	r25
     9c2:	96 95       	lsr	r25
     9c4:	99 0f       	add	r25, r25
     9c6:	29 2f       	mov	r18, r25
     9c8:	22 0f       	add	r18, r18
     9ca:	22 0f       	add	r18, r18
     9cc:	92 0f       	add	r25, r18
     9ce:	89 1b       	sub	r24, r25
     9d0:	80 5d       	subi	r24, 0xD0	; 208
     9d2:	60 dc       	rcall	.-1856   	; 0x294 <LCD_WriteData>
     9d4:	80 91 85 0a 	lds	r24, 0x0A85	; 0x800a85 <current_score>
     9d8:	8c 9f       	mul	r24, r28
     9da:	c1 2d       	mov	r28, r1
     9dc:	11 24       	eor	r1, r1
     9de:	c6 95       	lsr	r28
     9e0:	c6 95       	lsr	r28
     9e2:	c6 95       	lsr	r28
     9e4:	cc 0f       	add	r28, r28
     9e6:	9c 2f       	mov	r25, r28
     9e8:	99 0f       	add	r25, r25
     9ea:	99 0f       	add	r25, r25
     9ec:	c9 0f       	add	r28, r25
     9ee:	8c 1b       	sub	r24, r28
     9f0:	80 5d       	subi	r24, 0xD0	; 208
     9f2:	50 dc       	rcall	.-1888   	; 0x294 <LCD_WriteData>
     9f4:	80 91 87 0a 	lds	r24, 0x0A87	; 0x800a87 <current_song_choice>
     9f8:	60 91 85 0a 	lds	r22, 0x0A85	; 0x800a85 <current_score>
     9fc:	22 eb       	ldi	r18, 0xB2	; 178
     9fe:	34 e0       	ldi	r19, 0x04	; 4
     a00:	82 9f       	mul	r24, r18
     a02:	f0 01       	movw	r30, r0
     a04:	83 9f       	mul	r24, r19
     a06:	f0 0d       	add	r31, r0
     a08:	11 24       	eor	r1, r1
     a0a:	ee 55       	subi	r30, 0x5E	; 94
     a0c:	f0 4f       	sbci	r31, 0xF0	; 240
     a0e:	60 83       	st	Z, r22
     a10:	81 11       	cpse	r24, r1
     a12:	06 c0       	rjmp	.+12     	; 0xa20 <__LOCK_REGION_LENGTH__+0x620>
     a14:	81 e0       	ldi	r24, 0x01	; 1
     a16:	90 e0       	ldi	r25, 0x00	; 0
     a18:	87 d6       	rcall	.+3342   	; 0x1728 <eeprom_update_byte>
     a1a:	8d e0       	ldi	r24, 0x0D	; 13
     a1c:	90 e0       	ldi	r25, 0x00	; 0
     a1e:	1b c0       	rjmp	.+54     	; 0xa56 <__LOCK_REGION_LENGTH__+0x656>
     a20:	82 e0       	ldi	r24, 0x02	; 2
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	81 d6       	rcall	.+3330   	; 0x1728 <eeprom_update_byte>
     a26:	8d e0       	ldi	r24, 0x0D	; 13
     a28:	90 e0       	ldi	r25, 0x00	; 0
     a2a:	15 c0       	rjmp	.+42     	; 0xa56 <__LOCK_REGION_LENGTH__+0x656>
     a2c:	82 e0       	ldi	r24, 0x02	; 2
     a2e:	90 e0       	ldi	r25, 0x00	; 0
     a30:	12 c0       	rjmp	.+36     	; 0xa56 <__LOCK_REGION_LENGTH__+0x656>
     a32:	84 e0       	ldi	r24, 0x04	; 4
     a34:	90 e0       	ldi	r25, 0x00	; 0
     a36:	0f c0       	rjmp	.+30     	; 0xa56 <__LOCK_REGION_LENGTH__+0x656>
     a38:	8e e0       	ldi	r24, 0x0E	; 14
     a3a:	90 e0       	ldi	r25, 0x00	; 0
     a3c:	0c c0       	rjmp	.+24     	; 0xa56 <__LOCK_REGION_LENGTH__+0x656>
     a3e:	8e e0       	ldi	r24, 0x0E	; 14
     a40:	90 e0       	ldi	r25, 0x00	; 0
     a42:	09 c0       	rjmp	.+18     	; 0xa56 <__LOCK_REGION_LENGTH__+0x656>
     a44:	8e e0       	ldi	r24, 0x0E	; 14
     a46:	90 e0       	ldi	r25, 0x00	; 0
     a48:	06 c0       	rjmp	.+12     	; 0xa56 <__LOCK_REGION_LENGTH__+0x656>
     a4a:	8e e0       	ldi	r24, 0x0E	; 14
     a4c:	90 e0       	ldi	r25, 0x00	; 0
     a4e:	03 c0       	rjmp	.+6      	; 0xa56 <__LOCK_REGION_LENGTH__+0x656>
     a50:	21 11       	cpse	r18, r1
     a52:	45 ce       	rjmp	.-886    	; 0x6de <__LOCK_REGION_LENGTH__+0x2de>
     a54:	2d cd       	rjmp	.-1446   	; 0x4b0 <__LOCK_REGION_LENGTH__+0xb0>
     a56:	cf 91       	pop	r28
     a58:	1f 91       	pop	r17
     a5a:	0f 91       	pop	r16
     a5c:	08 95       	ret

00000a5e <TimerSet>:
     a5e:	60 93 d3 09 	sts	0x09D3, r22	; 0x8009d3 <_avr_timer_M>
     a62:	70 93 d4 09 	sts	0x09D4, r23	; 0x8009d4 <_avr_timer_M+0x1>
     a66:	80 93 d5 09 	sts	0x09D5, r24	; 0x8009d5 <_avr_timer_M+0x2>
     a6a:	90 93 d6 09 	sts	0x09D6, r25	; 0x8009d6 <_avr_timer_M+0x3>
     a6e:	60 93 8d 0a 	sts	0x0A8D, r22	; 0x800a8d <_avr_timer_cntcurr>
     a72:	70 93 8e 0a 	sts	0x0A8E, r23	; 0x800a8e <_avr_timer_cntcurr+0x1>
     a76:	80 93 8f 0a 	sts	0x0A8F, r24	; 0x800a8f <_avr_timer_cntcurr+0x2>
     a7a:	90 93 90 0a 	sts	0x0A90, r25	; 0x800a90 <_avr_timer_cntcurr+0x3>
     a7e:	08 95       	ret

00000a80 <TimerOn>:
     a80:	8b e0       	ldi	r24, 0x0B	; 11
     a82:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
     a86:	8d e7       	ldi	r24, 0x7D	; 125
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     a8e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     a92:	82 e0       	ldi	r24, 0x02	; 2
     a94:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
     a98:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     a9c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     aa0:	80 91 d3 09 	lds	r24, 0x09D3	; 0x8009d3 <_avr_timer_M>
     aa4:	90 91 d4 09 	lds	r25, 0x09D4	; 0x8009d4 <_avr_timer_M+0x1>
     aa8:	a0 91 d5 09 	lds	r26, 0x09D5	; 0x8009d5 <_avr_timer_M+0x2>
     aac:	b0 91 d6 09 	lds	r27, 0x09D6	; 0x8009d6 <_avr_timer_M+0x3>
     ab0:	80 93 8d 0a 	sts	0x0A8D, r24	; 0x800a8d <_avr_timer_cntcurr>
     ab4:	90 93 8e 0a 	sts	0x0A8E, r25	; 0x800a8e <_avr_timer_cntcurr+0x1>
     ab8:	a0 93 8f 0a 	sts	0x0A8F, r26	; 0x800a8f <_avr_timer_cntcurr+0x2>
     abc:	b0 93 90 0a 	sts	0x0A90, r27	; 0x800a90 <_avr_timer_cntcurr+0x3>
     ac0:	8f b7       	in	r24, 0x3f	; 63
     ac2:	80 68       	ori	r24, 0x80	; 128
     ac4:	8f bf       	out	0x3f, r24	; 63
     ac6:	08 95       	ret

00000ac8 <TimerISR>:
     ac8:	ef 92       	push	r14
     aca:	ff 92       	push	r15
     acc:	0f 93       	push	r16
     ace:	1f 93       	push	r17
     ad0:	cf 93       	push	r28
     ad2:	df 93       	push	r29
     ad4:	81 e0       	ldi	r24, 0x01	; 1
     ad6:	80 93 91 0a 	sts	0x0A91, r24	; 0x800a91 <TimerFlag>
     ada:	c2 e9       	ldi	r28, 0x92	; 146
     adc:	da e0       	ldi	r29, 0x0A	; 10
     ade:	0f 2e       	mov	r0, r31
     ae0:	f2 ef       	ldi	r31, 0xF2	; 242
     ae2:	ef 2e       	mov	r14, r31
     ae4:	fa e0       	ldi	r31, 0x0A	; 10
     ae6:	ff 2e       	mov	r15, r31
     ae8:	f0 2d       	mov	r31, r0
     aea:	8e 01       	movw	r16, r28
     aec:	4e 81       	ldd	r20, Y+6	; 0x06
     aee:	5f 81       	ldd	r21, Y+7	; 0x07
     af0:	68 85       	ldd	r22, Y+8	; 0x08
     af2:	79 85       	ldd	r23, Y+9	; 0x09
     af4:	8a 81       	ldd	r24, Y+2	; 0x02
     af6:	9b 81       	ldd	r25, Y+3	; 0x03
     af8:	ac 81       	ldd	r26, Y+4	; 0x04
     afa:	bd 81       	ldd	r27, Y+5	; 0x05
     afc:	48 17       	cp	r20, r24
     afe:	59 07       	cpc	r21, r25
     b00:	6a 07       	cpc	r22, r26
     b02:	7b 07       	cpc	r23, r27
     b04:	58 f0       	brcs	.+22     	; 0xb1c <TimerISR+0x54>
     b06:	ea 85       	ldd	r30, Y+10	; 0x0a
     b08:	fb 85       	ldd	r31, Y+11	; 0x0b
     b0a:	88 81       	ld	r24, Y
     b0c:	99 81       	ldd	r25, Y+1	; 0x01
     b0e:	09 95       	icall
     b10:	99 83       	std	Y+1, r25	; 0x01
     b12:	88 83       	st	Y, r24
     b14:	1e 82       	std	Y+6, r1	; 0x06
     b16:	1f 82       	std	Y+7, r1	; 0x07
     b18:	18 86       	std	Y+8, r1	; 0x08
     b1a:	19 86       	std	Y+9, r1	; 0x09
     b1c:	f8 01       	movw	r30, r16
     b1e:	86 81       	ldd	r24, Z+6	; 0x06
     b20:	97 81       	ldd	r25, Z+7	; 0x07
     b22:	a0 85       	ldd	r26, Z+8	; 0x08
     b24:	b1 85       	ldd	r27, Z+9	; 0x09
     b26:	05 96       	adiw	r24, 0x05	; 5
     b28:	a1 1d       	adc	r26, r1
     b2a:	b1 1d       	adc	r27, r1
     b2c:	86 83       	std	Z+6, r24	; 0x06
     b2e:	97 83       	std	Z+7, r25	; 0x07
     b30:	a0 87       	std	Z+8, r26	; 0x08
     b32:	b1 87       	std	Z+9, r27	; 0x09
     b34:	2c 96       	adiw	r28, 0x0c	; 12
     b36:	ce 15       	cp	r28, r14
     b38:	df 05       	cpc	r29, r15
     b3a:	b9 f6       	brne	.-82     	; 0xaea <TimerISR+0x22>
     b3c:	df 91       	pop	r29
     b3e:	cf 91       	pop	r28
     b40:	1f 91       	pop	r17
     b42:	0f 91       	pop	r16
     b44:	ff 90       	pop	r15
     b46:	ef 90       	pop	r14
     b48:	08 95       	ret

00000b4a <__vector_13>:
     b4a:	1f 92       	push	r1
     b4c:	0f 92       	push	r0
     b4e:	0f b6       	in	r0, 0x3f	; 63
     b50:	0f 92       	push	r0
     b52:	11 24       	eor	r1, r1
     b54:	0b b6       	in	r0, 0x3b	; 59
     b56:	0f 92       	push	r0
     b58:	2f 93       	push	r18
     b5a:	3f 93       	push	r19
     b5c:	4f 93       	push	r20
     b5e:	5f 93       	push	r21
     b60:	6f 93       	push	r22
     b62:	7f 93       	push	r23
     b64:	8f 93       	push	r24
     b66:	9f 93       	push	r25
     b68:	af 93       	push	r26
     b6a:	bf 93       	push	r27
     b6c:	ef 93       	push	r30
     b6e:	ff 93       	push	r31
     b70:	80 91 8d 0a 	lds	r24, 0x0A8D	; 0x800a8d <_avr_timer_cntcurr>
     b74:	90 91 8e 0a 	lds	r25, 0x0A8E	; 0x800a8e <_avr_timer_cntcurr+0x1>
     b78:	a0 91 8f 0a 	lds	r26, 0x0A8F	; 0x800a8f <_avr_timer_cntcurr+0x2>
     b7c:	b0 91 90 0a 	lds	r27, 0x0A90	; 0x800a90 <_avr_timer_cntcurr+0x3>
     b80:	01 97       	sbiw	r24, 0x01	; 1
     b82:	a1 09       	sbc	r26, r1
     b84:	b1 09       	sbc	r27, r1
     b86:	80 93 8d 0a 	sts	0x0A8D, r24	; 0x800a8d <_avr_timer_cntcurr>
     b8a:	90 93 8e 0a 	sts	0x0A8E, r25	; 0x800a8e <_avr_timer_cntcurr+0x1>
     b8e:	a0 93 8f 0a 	sts	0x0A8F, r26	; 0x800a8f <_avr_timer_cntcurr+0x2>
     b92:	b0 93 90 0a 	sts	0x0A90, r27	; 0x800a90 <_avr_timer_cntcurr+0x3>
     b96:	89 2b       	or	r24, r25
     b98:	8a 2b       	or	r24, r26
     b9a:	8b 2b       	or	r24, r27
     b9c:	89 f4       	brne	.+34     	; 0xbc0 <__vector_13+0x76>
     b9e:	94 df       	rcall	.-216    	; 0xac8 <TimerISR>
     ba0:	80 91 d3 09 	lds	r24, 0x09D3	; 0x8009d3 <_avr_timer_M>
     ba4:	90 91 d4 09 	lds	r25, 0x09D4	; 0x8009d4 <_avr_timer_M+0x1>
     ba8:	a0 91 d5 09 	lds	r26, 0x09D5	; 0x8009d5 <_avr_timer_M+0x2>
     bac:	b0 91 d6 09 	lds	r27, 0x09D6	; 0x8009d6 <_avr_timer_M+0x3>
     bb0:	80 93 8d 0a 	sts	0x0A8D, r24	; 0x800a8d <_avr_timer_cntcurr>
     bb4:	90 93 8e 0a 	sts	0x0A8E, r25	; 0x800a8e <_avr_timer_cntcurr+0x1>
     bb8:	a0 93 8f 0a 	sts	0x0A8F, r26	; 0x800a8f <_avr_timer_cntcurr+0x2>
     bbc:	b0 93 90 0a 	sts	0x0A90, r27	; 0x800a90 <_avr_timer_cntcurr+0x3>
     bc0:	ff 91       	pop	r31
     bc2:	ef 91       	pop	r30
     bc4:	bf 91       	pop	r27
     bc6:	af 91       	pop	r26
     bc8:	9f 91       	pop	r25
     bca:	8f 91       	pop	r24
     bcc:	7f 91       	pop	r23
     bce:	6f 91       	pop	r22
     bd0:	5f 91       	pop	r21
     bd2:	4f 91       	pop	r20
     bd4:	3f 91       	pop	r19
     bd6:	2f 91       	pop	r18
     bd8:	0f 90       	pop	r0
     bda:	0b be       	out	0x3b, r0	; 59
     bdc:	0f 90       	pop	r0
     bde:	0f be       	out	0x3f, r0	; 63
     be0:	0f 90       	pop	r0
     be2:	1f 90       	pop	r1
     be4:	18 95       	reti

00000be6 <Shift_Init>:

void Shift_Init() {
    DDRC = Set_Bit(DDRC, DATA);
     be6:	3a 9a       	sbi	0x07, 2	; 7
    DDRC = Set_Bit(DDRC, SHIFT);
     be8:	3b 9a       	sbi	0x07, 3	; 7
    DDRC = Set_Bit(DDRC, STORE);
     bea:	3c 9a       	sbi	0x07, 4	; 7
     bec:	08 95       	ret

00000bee <Shift_Data_High>:
}

//Set Data line high
void Shift_Data_High() {
    PORTC = Set_Bit(PORTC, DATA);
     bee:	42 9a       	sbi	0x08, 2	; 8
     bf0:	08 95       	ret

00000bf2 <Shift_Data_Low>:
}

//Set Data line low
void Shift_Data_Low() {
    PORTC = Clear_Bit(PORTC, DATA);
     bf2:	42 98       	cbi	0x08, 2	; 8
     bf4:	08 95       	ret

00000bf6 <Shift_Pulse>:
}

//Pulse Shift Clock
void Shift_Pulse() {
    PORTC = Set_Bit(PORTC, SHIFT);
     bf6:	43 9a       	sbi	0x08, 3	; 8
    PORTC = Clear_Bit(PORTC, SHIFT);
     bf8:	43 98       	cbi	0x08, 3	; 8
     bfa:	08 95       	ret

00000bfc <Shift_Store>:
}

//Pulse Store Clock
void Shift_Store() {
    PORTC = Set_Bit(PORTC, STORE);
     bfc:	44 9a       	sbi	0x08, 4	; 8
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     bfe:	81 e0       	ldi	r24, 0x01	; 1
     c00:	90 e0       	ldi	r25, 0x00	; 0
     c02:	fc 01       	movw	r30, r24
     c04:	31 97       	sbiw	r30, 0x01	; 1
     c06:	f1 f7       	brne	.-4      	; 0xc04 <Shift_Store+0x8>
    //SET_BIT(SHIFT_PORT,STORE_LINE);
    _delay_loop_2(1);

    //CLR_BIT(SHIFT_PORT,STORE_LINE);
    PORTC = Clear_Bit(PORTC, STORE);
     c08:	44 98       	cbi	0x08, 4	; 8
     c0a:	01 97       	sbiw	r24, 0x01	; 1
     c0c:	f1 f7       	brne	.-4      	; 0xc0a <Shift_Store+0xe>
     c0e:	08 95       	ret

00000c10 <Shift_transmit_data>:
    _delay_loop_2(1);
}


void Shift_transmit_data(unsigned char data) {
     c10:	cf 93       	push	r28
     c12:	df 93       	push	r29
     c14:	d8 2f       	mov	r29, r24
     c16:	c8 e0       	ldi	r28, 0x08	; 8
    for(unsigned char i=0;i<8;i++) {
        if(data & 0x80) {
     c18:	dd 23       	and	r29, r29
     c1a:	14 f4       	brge	.+4      	; 0xc20 <Shift_transmit_data+0x10>
            Shift_Data_High();
     c1c:	e8 df       	rcall	.-48     	; 0xbee <Shift_Data_High>
     c1e:	01 c0       	rjmp	.+2      	; 0xc22 <Shift_transmit_data+0x12>
            } else {
            Shift_Data_Low();
     c20:	e8 df       	rcall	.-48     	; 0xbf2 <Shift_Data_Low>
        }

        Shift_Pulse();
     c22:	e9 df       	rcall	.-46     	; 0xbf6 <Shift_Pulse>
     c24:	dd 0f       	add	r29, r29
        data=data << 1;
     c26:	c1 50       	subi	r28, 0x01	; 1
    _delay_loop_2(1);
}


void Shift_transmit_data(unsigned char data) {
    for(unsigned char i=0;i<8;i++) {
     c28:	b9 f7       	brne	.-18     	; 0xc18 <Shift_transmit_data+0x8>

        Shift_Pulse();
        data=data << 1;
    }

    Shift_Store();
     c2a:	e8 df       	rcall	.-48     	; 0xbfc <Shift_Store>
     c2c:	df 91       	pop	r29
     c2e:	cf 91       	pop	r28
     c30:	08 95       	ret

00000c32 <RGB_Matrix_Tick>:
     c32:	ef 92       	push	r14
    }

    return state;
}

int RGB_Matrix_Tick(int state){
     c34:	ff 92       	push	r15
     c36:	0f 93       	push	r16
     c38:	1f 93       	push	r17
     c3a:	cf 93       	push	r28
     c3c:	df 93       	push	r29
    static unsigned char play_note;
    static unsigned char rest_note;
    static unsigned char note_to_hit;
    switch(state){
     c3e:	81 30       	cpi	r24, 0x01	; 1
     c40:	91 05       	cpc	r25, r1
     c42:	59 f0       	breq	.+22     	; 0xc5a <RGB_Matrix_Tick+0x28>
     c44:	1c f4       	brge	.+6      	; 0xc4c <RGB_Matrix_Tick+0x1a>
     c46:	00 97       	sbiw	r24, 0x00	; 0
     c48:	b9 f1       	breq	.+110    	; 0xcb8 <RGB_Matrix_Tick+0x86>
     c4a:	20 c0       	rjmp	.+64     	; 0xc8c <RGB_Matrix_Tick+0x5a>
     c4c:	82 30       	cpi	r24, 0x02	; 2
     c4e:	91 05       	cpc	r25, r1
     c50:	a1 f0       	breq	.+40     	; 0xc7a <RGB_Matrix_Tick+0x48>
     c52:	83 30       	cpi	r24, 0x03	; 3
     c54:	91 05       	cpc	r25, r1
     c56:	81 f1       	breq	.+96     	; 0xcb8 <RGB_Matrix_Tick+0x86>
     c58:	19 c0       	rjmp	.+50     	; 0xc8c <RGB_Matrix_Tick+0x5a>
        case RGB_INIT:
            state = RGB_MENU;
            break;
        case RGB_MENU:
            if(playing){
     c5a:	80 91 7a 0a 	lds	r24, 0x0A7A	; 0x800a7a <playing>
     c5e:	88 23       	and	r24, r24
     c60:	59 f1       	breq	.+86     	; 0xcb8 <RGB_Matrix_Tick+0x86>
                if(current_song_choice){
     c62:	80 91 87 0a 	lds	r24, 0x0A87	; 0x800a87 <current_song_choice>
     c66:	88 23       	and	r24, r24
     c68:	19 f0       	breq	.+6      	; 0xc70 <RGB_Matrix_Tick+0x3e>
                    speed = 6;
     c6a:	86 e0       	ldi	r24, 0x06	; 6
     c6c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
                }
                play_note = 0;
     c70:	10 92 74 0a 	sts	0x0A74, r1	; 0x800a74 <play_note.2307>
                rest_note = 0;
     c74:	10 92 73 0a 	sts	0x0A73, r1	; 0x800a73 <rest_note.2308>
                state = RGB_SONG;
                break;
     c78:	14 c0       	rjmp	.+40     	; 0xca2 <RGB_Matrix_Tick+0x70>
            else{
                state = RGB_MENU;
                break;
            }    
        case RGB_SONG:
            if(song_finished || !playing){
     c7a:	80 91 7c 0a 	lds	r24, 0x0A7C	; 0x800a7c <song_finished>
     c7e:	81 11       	cpse	r24, r1
     c80:	16 c0       	rjmp	.+44     	; 0xcae <RGB_Matrix_Tick+0x7c>
     c82:	80 91 7a 0a 	lds	r24, 0x0A7A	; 0x800a7a <playing>
     c86:	81 11       	cpse	r24, r1
     c88:	0c c0       	rjmp	.+24     	; 0xca2 <RGB_Matrix_Tick+0x70>
     c8a:	11 c0       	rjmp	.+34     	; 0xcae <RGB_Matrix_Tick+0x7c>
            }
        case RGB_RESET:
            state = RGB_MENU;
            break;
    }
    switch(state){
     c8c:	82 30       	cpi	r24, 0x02	; 2
     c8e:	91 05       	cpc	r25, r1
     c90:	41 f0       	breq	.+16     	; 0xca2 <RGB_Matrix_Tick+0x70>
     c92:	83 30       	cpi	r24, 0x03	; 3
     c94:	91 05       	cpc	r25, r1
     c96:	59 f0       	breq	.+22     	; 0xcae <RGB_Matrix_Tick+0x7c>
     c98:	81 30       	cpi	r24, 0x01	; 1
     c9a:	91 05       	cpc	r25, r1
     c9c:	09 f0       	breq	.+2      	; 0xca0 <RGB_Matrix_Tick+0x6e>
     c9e:	dd c0       	rjmp	.+442    	; 0xe5a <RGB_Matrix_Tick+0x228>
     ca0:	0b c0       	rjmp	.+22     	; 0xcb8 <RGB_Matrix_Tick+0x86>
     ca2:	0d e7       	ldi	r16, 0x7D	; 125
     ca4:	1a e0       	ldi	r17, 0x0A	; 10
     ca6:	25 e8       	ldi	r18, 0x85	; 133
     ca8:	3a e0       	ldi	r19, 0x0A	; 10
    }

    return state;
}

int RGB_Matrix_Tick(int state){
     caa:	f8 01       	movw	r30, r16
     cac:	3a c0       	rjmp	.+116    	; 0xd22 <RGB_Matrix_Tick+0xf0>
     cae:	ed e7       	ldi	r30, 0x7D	; 125
     cb0:	fa e0       	ldi	r31, 0x0A	; 10
     cb2:	85 e8       	ldi	r24, 0x85	; 133
     cb4:	9a e0       	ldi	r25, 0x0A	; 10
     cb6:	c3 c0       	rjmp	.+390    	; 0xe3e <RGB_Matrix_Tick+0x20c>
    }
    switch(state){
        case RGB_INIT:
            break;
        case RGB_MENU:
            if(LEFT || RIGHT || UP || DOWN){
     cb8:	80 91 8c 0a 	lds	r24, 0x0A8C	; 0x800a8c <LEFT>
     cbc:	88 23       	and	r24, r24
     cbe:	49 f0       	breq	.+18     	; 0xcd2 <RGB_Matrix_Tick+0xa0>
     cc0:	01 e0       	ldi	r16, 0x01	; 1
     cc2:	11 e0       	ldi	r17, 0x01	; 1
    }

    return state;
}

int RGB_Matrix_Tick(int state){
     cc4:	c0 e0       	ldi	r28, 0x00	; 0
     cc6:	d0 e0       	ldi	r29, 0x00	; 0
        case RGB_INIT:
            break;
        case RGB_MENU:
            if(LEFT || RIGHT || UP || DOWN){
                for(unsigned char i = 0; i < 8; i++){
                    Shift_transmit_data(128 >> i);
     cc8:	68 94       	set
     cca:	ee 24       	eor	r14, r14
     ccc:	e7 f8       	bld	r14, 7
     cce:	f1 2c       	mov	r15, r1
     cd0:	0d c0       	rjmp	.+26     	; 0xcec <RGB_Matrix_Tick+0xba>
    }
    switch(state){
        case RGB_INIT:
            break;
        case RGB_MENU:
            if(LEFT || RIGHT || UP || DOWN){
     cd2:	80 91 8b 0a 	lds	r24, 0x0A8B	; 0x800a8b <RIGHT>
     cd6:	81 11       	cpse	r24, r1
     cd8:	f3 cf       	rjmp	.-26     	; 0xcc0 <RGB_Matrix_Tick+0x8e>
     cda:	80 91 8a 0a 	lds	r24, 0x0A8A	; 0x800a8a <UP>
     cde:	81 11       	cpse	r24, r1
     ce0:	ef cf       	rjmp	.-34     	; 0xcc0 <RGB_Matrix_Tick+0x8e>
     ce2:	80 91 89 0a 	lds	r24, 0x0A89	; 0x800a89 <DOWN>
     ce6:	81 11       	cpse	r24, r1
     ce8:	eb cf       	rjmp	.-42     	; 0xcc0 <RGB_Matrix_Tick+0x8e>
     cea:	14 c0       	rjmp	.+40     	; 0xd14 <RGB_Matrix_Tick+0xe2>
                for(unsigned char i = 0; i < 8; i++){
                    Shift_transmit_data(128 >> i);
     cec:	c7 01       	movw	r24, r14
     cee:	0c 2e       	mov	r0, r28
     cf0:	02 c0       	rjmp	.+4      	; 0xcf6 <RGB_Matrix_Tick+0xc4>
     cf2:	95 95       	asr	r25
     cf4:	87 95       	ror	r24
     cf6:	0a 94       	dec	r0
     cf8:	e2 f7       	brpl	.-8      	; 0xcf2 <RGB_Matrix_Tick+0xc0>
     cfa:	8a df       	rcall	.-236    	; 0xc10 <Shift_transmit_data>
                    Shift_transmit_data(~pic[i]);
     cfc:	f8 01       	movw	r30, r16
     cfe:	81 91       	ld	r24, Z+
     d00:	8f 01       	movw	r16, r30
     d02:	80 95       	com	r24
     d04:	85 df       	rcall	.-246    	; 0xc10 <Shift_transmit_data>
                    delay_ms(3);
     d06:	83 e0       	ldi	r24, 0x03	; 3
     d08:	90 e0       	ldi	r25, 0x00	; 0
     d0a:	9d da       	rcall	.-2758   	; 0x246 <delay_ms>
     d0c:	21 96       	adiw	r28, 0x01	; 1
    switch(state){
        case RGB_INIT:
            break;
        case RGB_MENU:
            if(LEFT || RIGHT || UP || DOWN){
                for(unsigned char i = 0; i < 8; i++){
     d0e:	c8 30       	cpi	r28, 0x08	; 8
     d10:	d1 05       	cpc	r29, r1
                    Shift_transmit_data(128 >> i);
                    Shift_transmit_data(~pic[i]);
                    delay_ms(3);
                }
            }
            Shift_transmit_data(0);
     d12:	61 f7       	brne	.-40     	; 0xcec <RGB_Matrix_Tick+0xba>
     d14:	80 e0       	ldi	r24, 0x00	; 0
            Shift_transmit_data(0);
     d16:	7c df       	rcall	.-264    	; 0xc10 <Shift_transmit_data>
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	7a df       	rcall	.-268    	; 0xc10 <Shift_transmit_data>
            
            break;
     d1c:	81 e0       	ldi	r24, 0x01	; 1
     d1e:	90 e0       	ldi	r25, 0x00	; 0
     d20:	9c c0       	rjmp	.+312    	; 0xe5a <RGB_Matrix_Tick+0x228>
        case RGB_SONG:
            for(unsigned j = 0; j < 8; j++){
                RGB_DISPLAY_NOTES[j] <<= 1;
     d22:	80 81       	ld	r24, Z
     d24:	88 0f       	add	r24, r24
     d26:	81 93       	st	Z+, r24
            Shift_transmit_data(0);
            Shift_transmit_data(0);
            
            break;
        case RGB_SONG:
            for(unsigned j = 0; j < 8; j++){
     d28:	e2 17       	cp	r30, r18
     d2a:	f3 07       	cpc	r31, r19
     d2c:	d1 f7       	brne	.-12     	; 0xd22 <RGB_Matrix_Tick+0xf0>
                RGB_DISPLAY_NOTES[j] <<= 1;
            }
            if(play_note < songs[current_song_choice].timing[current_note]){
     d2e:	20 91 87 0a 	lds	r18, 0x0A87	; 0x800a87 <current_song_choice>
     d32:	30 e0       	ldi	r19, 0x00	; 0
     d34:	80 91 88 0a 	lds	r24, 0x0A88	; 0x800a88 <current_note>
     d38:	90 e0       	ldi	r25, 0x00	; 0
     d3a:	40 91 74 0a 	lds	r20, 0x0A74	; 0x800a74 <play_note.2307>
     d3e:	62 eb       	ldi	r22, 0xB2	; 178
     d40:	74 e0       	ldi	r23, 0x04	; 4
     d42:	26 9f       	mul	r18, r22
     d44:	f0 01       	movw	r30, r0
     d46:	27 9f       	mul	r18, r23
     d48:	f0 0d       	add	r31, r0
     d4a:	36 9f       	mul	r19, r22
     d4c:	f0 0d       	add	r31, r0
     d4e:	11 24       	eor	r1, r1
     d50:	e8 0f       	add	r30, r24
     d52:	f9 1f       	adc	r31, r25
     d54:	e6 5b       	subi	r30, 0xB6	; 182
     d56:	f2 4f       	sbci	r31, 0xF2	; 242
     d58:	50 81       	ld	r21, Z
     d5a:	45 17       	cp	r20, r21
     d5c:	e0 f5       	brcc	.+120    	; 0xdd6 <RGB_Matrix_Tick+0x1a4>
                note_to_hit = songs[current_song_choice].hit[current_note];
     d5e:	26 9f       	mul	r18, r22
     d60:	f0 01       	movw	r30, r0
     d62:	27 9f       	mul	r18, r23
     d64:	f0 0d       	add	r31, r0
     d66:	36 9f       	mul	r19, r22
     d68:	f0 0d       	add	r31, r0
     d6a:	11 24       	eor	r1, r1
     d6c:	8e 0f       	add	r24, r30
     d6e:	9f 1f       	adc	r25, r31
     d70:	fc 01       	movw	r30, r24
     d72:	ea 58       	subi	r30, 0x8A	; 138
     d74:	f1 4f       	sbci	r31, 0xF1	; 241
     d76:	80 81       	ld	r24, Z
                
                if(note_to_hit == 8){
     d78:	88 30       	cpi	r24, 0x08	; 8
     d7a:	49 f4       	brne	.+18     	; 0xd8e <RGB_Matrix_Tick+0x15c>
                    RGB_DISPLAY_NOTES[7] |= 3;
     d7c:	ed e7       	ldi	r30, 0x7D	; 125
     d7e:	fa e0       	ldi	r31, 0x0A	; 10
     d80:	87 81       	ldd	r24, Z+7	; 0x07
     d82:	83 60       	ori	r24, 0x03	; 3
     d84:	87 83       	std	Z+7, r24	; 0x07
                    RGB_DISPLAY_NOTES[6] |= 3;
     d86:	86 81       	ldd	r24, Z+6	; 0x06
     d88:	83 60       	ori	r24, 0x03	; 3
     d8a:	86 83       	std	Z+6, r24	; 0x06
     d8c:	20 c0       	rjmp	.+64     	; 0xdce <RGB_Matrix_Tick+0x19c>
                }
                else if(note_to_hit == 4){
     d8e:	84 30       	cpi	r24, 0x04	; 4
     d90:	49 f4       	brne	.+18     	; 0xda4 <RGB_Matrix_Tick+0x172>
                    RGB_DISPLAY_NOTES[5] |= 3;
     d92:	ed e7       	ldi	r30, 0x7D	; 125
     d94:	fa e0       	ldi	r31, 0x0A	; 10
     d96:	85 81       	ldd	r24, Z+5	; 0x05
     d98:	83 60       	ori	r24, 0x03	; 3
     d9a:	85 83       	std	Z+5, r24	; 0x05
                    RGB_DISPLAY_NOTES[4] |= 3;
     d9c:	84 81       	ldd	r24, Z+4	; 0x04
     d9e:	83 60       	ori	r24, 0x03	; 3
     da0:	84 83       	std	Z+4, r24	; 0x04
     da2:	15 c0       	rjmp	.+42     	; 0xdce <RGB_Matrix_Tick+0x19c>
                }
                else if(note_to_hit == 2){
     da4:	82 30       	cpi	r24, 0x02	; 2
     da6:	49 f4       	brne	.+18     	; 0xdba <RGB_Matrix_Tick+0x188>
                    RGB_DISPLAY_NOTES[3] |= 3;
     da8:	ed e7       	ldi	r30, 0x7D	; 125
     daa:	fa e0       	ldi	r31, 0x0A	; 10
     dac:	83 81       	ldd	r24, Z+3	; 0x03
     dae:	83 60       	ori	r24, 0x03	; 3
     db0:	83 83       	std	Z+3, r24	; 0x03
                    RGB_DISPLAY_NOTES[2] |= 3;
     db2:	82 81       	ldd	r24, Z+2	; 0x02
     db4:	83 60       	ori	r24, 0x03	; 3
     db6:	82 83       	std	Z+2, r24	; 0x02
     db8:	0a c0       	rjmp	.+20     	; 0xdce <RGB_Matrix_Tick+0x19c>
                }    
                else if(note_to_hit == 1){
     dba:	81 30       	cpi	r24, 0x01	; 1
     dbc:	41 f4       	brne	.+16     	; 0xdce <RGB_Matrix_Tick+0x19c>
                    RGB_DISPLAY_NOTES[1] |= 3;
     dbe:	ed e7       	ldi	r30, 0x7D	; 125
     dc0:	fa e0       	ldi	r31, 0x0A	; 10
     dc2:	81 81       	ldd	r24, Z+1	; 0x01
     dc4:	83 60       	ori	r24, 0x03	; 3
     dc6:	81 83       	std	Z+1, r24	; 0x01
                    RGB_DISPLAY_NOTES[0] |= 3;
     dc8:	80 81       	ld	r24, Z
     dca:	83 60       	ori	r24, 0x03	; 3
     dcc:	80 83       	st	Z, r24
                }    
                play_note++;        
     dce:	4f 5f       	subi	r20, 0xFF	; 255
     dd0:	40 93 74 0a 	sts	0x0A74, r20	; 0x800a74 <play_note.2307>
     dd4:	3b c0       	rjmp	.+118    	; 0xe4c <RGB_Matrix_Tick+0x21a>
            }
            else{
                note_to_hit = 0;
                if(rest_note < songs[current_song_choice].rest_timing[current_note]){
     dd6:	40 91 73 0a 	lds	r20, 0x0A73	; 0x800a73 <rest_note.2308>
     dda:	62 eb       	ldi	r22, 0xB2	; 178
     ddc:	74 e0       	ldi	r23, 0x04	; 4
     dde:	26 9f       	mul	r18, r22
     de0:	f0 01       	movw	r30, r0
     de2:	27 9f       	mul	r18, r23
     de4:	f0 0d       	add	r31, r0
     de6:	36 9f       	mul	r19, r22
     de8:	f0 0d       	add	r31, r0
     dea:	11 24       	eor	r1, r1
     dec:	8e 0f       	add	r24, r30
     dee:	9f 1f       	adc	r25, r31
     df0:	fc 01       	movw	r30, r24
     df2:	e0 52       	subi	r30, 0x20	; 32
     df4:	f2 4f       	sbci	r31, 0xF2	; 242
     df6:	80 81       	ld	r24, Z
     df8:	48 17       	cp	r20, r24
     dfa:	20 f4       	brcc	.+8      	; 0xe04 <RGB_Matrix_Tick+0x1d2>
                    rest_note++;
     dfc:	4f 5f       	subi	r20, 0xFF	; 255
     dfe:	40 93 73 0a 	sts	0x0A73, r20	; 0x800a73 <rest_note.2308>
     e02:	24 c0       	rjmp	.+72     	; 0xe4c <RGB_Matrix_Tick+0x21a>
                }
                else{
                    play_note = 0;
     e04:	10 92 74 0a 	sts	0x0A74, r1	; 0x800a74 <play_note.2307>
                    rest_note = 0;   
     e08:	10 92 73 0a 	sts	0x0A73, r1	; 0x800a73 <rest_note.2308>
     e0c:	1f c0       	rjmp	.+62     	; 0xe4c <RGB_Matrix_Tick+0x21a>
                }     
            }                   
            for(unsigned char i = 0; i < 8; i++){
                Shift_transmit_data(128 >> i);
     e0e:	c7 01       	movw	r24, r14
     e10:	0c 2e       	mov	r0, r28
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <RGB_Matrix_Tick+0x1e6>
     e14:	95 95       	asr	r25
     e16:	87 95       	ror	r24
     e18:	0a 94       	dec	r0
     e1a:	e2 f7       	brpl	.-8      	; 0xe14 <RGB_Matrix_Tick+0x1e2>
                Shift_transmit_data(~RGB_DISPLAY_NOTES[i]);
     e1c:	f9 de       	rcall	.-526    	; 0xc10 <Shift_transmit_data>
     e1e:	f8 01       	movw	r30, r16
     e20:	81 91       	ld	r24, Z+
     e22:	8f 01       	movw	r16, r30
     e24:	80 95       	com	r24
                delay_ms(speed);
     e26:	f4 de       	rcall	.-536    	; 0xc10 <Shift_transmit_data>
     e28:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     e2c:	90 e0       	ldi	r25, 0x00	; 0
     e2e:	0b da       	rcall	.-3050   	; 0x246 <delay_ms>
     e30:	21 96       	adiw	r28, 0x01	; 1
                else{
                    play_note = 0;
                    rest_note = 0;   
                }     
            }                   
            for(unsigned char i = 0; i < 8; i++){
     e32:	c8 30       	cpi	r28, 0x08	; 8
     e34:	d1 05       	cpc	r29, r1
     e36:	59 f7       	brne	.-42     	; 0xe0e <RGB_Matrix_Tick+0x1dc>
     e38:	82 e0       	ldi	r24, 0x02	; 2
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	0e c0       	rjmp	.+28     	; 0xe5a <RGB_Matrix_Tick+0x228>
            
            }
            break;
        case RGB_RESET:
            for(unsigned char r = 0; r < 8; r++){
                RGB_DISPLAY_NOTES[r] = 0;
     e3e:	11 92       	st	Z+, r1
                delay_ms(speed);
            
            }
            break;
        case RGB_RESET:
            for(unsigned char r = 0; r < 8; r++){
     e40:	e8 17       	cp	r30, r24
     e42:	f9 07       	cpc	r31, r25
     e44:	e1 f7       	brne	.-8      	; 0xe3e <RGB_Matrix_Tick+0x20c>
     e46:	83 e0       	ldi	r24, 0x03	; 3
     e48:	90 e0       	ldi	r25, 0x00	; 0
                RGB_DISPLAY_NOTES[r] = 0;
            }
            break;
    }
    
    return state;
     e4a:	07 c0       	rjmp	.+14     	; 0xe5a <RGB_Matrix_Tick+0x228>
    }

    return state;
}

int RGB_Matrix_Tick(int state){
     e4c:	c0 e0       	ldi	r28, 0x00	; 0
     e4e:	d0 e0       	ldi	r29, 0x00	; 0
                    play_note = 0;
                    rest_note = 0;   
                }     
            }                   
            for(unsigned char i = 0; i < 8; i++){
                Shift_transmit_data(128 >> i);
     e50:	68 94       	set
     e52:	ee 24       	eor	r14, r14
     e54:	e7 f8       	bld	r14, 7
     e56:	f1 2c       	mov	r15, r1
     e58:	da cf       	rjmp	.-76     	; 0xe0e <RGB_Matrix_Tick+0x1dc>
            }
            break;
    }
    
    return state;
}
     e5a:	df 91       	pop	r29
     e5c:	cf 91       	pop	r28
     e5e:	1f 91       	pop	r17
     e60:	0f 91       	pop	r16
     e62:	ff 90       	pop	r15
     e64:	ef 90       	pop	r14
     e66:	08 95       	ret

00000e68 <set_PWM>:

// 0.954 hz is lowest frequency possible with this function,
// based on settings in PWM_on()
// Passing in 0 as the frequency will stop the speaker from generating sound
void set_PWM(double frequency) {
     e68:	cf 92       	push	r12
     e6a:	df 92       	push	r13
     e6c:	ef 92       	push	r14
     e6e:	ff 92       	push	r15
     e70:	6b 01       	movw	r12, r22
     e72:	7c 01       	movw	r14, r24
	static double current_frequency; // Keeps track of the currently set frequency
	// Will only update the registers when the frequency changes, otherwise allows
	// music to play uninterrupted.
	if (frequency != current_frequency) {
     e74:	9b 01       	movw	r18, r22
     e76:	ac 01       	movw	r20, r24
     e78:	60 91 76 0a 	lds	r22, 0x0A76	; 0x800a76 <current_frequency.2121>
     e7c:	70 91 77 0a 	lds	r23, 0x0A77	; 0x800a77 <current_frequency.2121+0x1>
     e80:	80 91 78 0a 	lds	r24, 0x0A78	; 0x800a78 <current_frequency.2121+0x2>
     e84:	90 91 79 0a 	lds	r25, 0x0A79	; 0x800a79 <current_frequency.2121+0x3>
     e88:	c5 d2       	rcall	.+1418   	; 0x1414 <__cmpsf2>
     e8a:	88 23       	and	r24, r24
     e8c:	09 f4       	brne	.+2      	; 0xe90 <set_PWM+0x28>
     e8e:	52 c0       	rjmp	.+164    	; 0xf34 <set_PWM+0xcc>
		if (!frequency) { TCCR3B &= 0x08; } //stops timer/counter
     e90:	20 e0       	ldi	r18, 0x00	; 0
     e92:	30 e0       	ldi	r19, 0x00	; 0
     e94:	a9 01       	movw	r20, r18
     e96:	c7 01       	movw	r24, r14
     e98:	b6 01       	movw	r22, r12
     e9a:	bc d2       	rcall	.+1400   	; 0x1414 <__cmpsf2>
     e9c:	81 11       	cpse	r24, r1
     e9e:	06 c0       	rjmp	.+12     	; 0xeac <set_PWM+0x44>
     ea0:	e1 e9       	ldi	r30, 0x91	; 145
     ea2:	f0 e0       	ldi	r31, 0x00	; 0
     ea4:	80 81       	ld	r24, Z
     ea6:	88 70       	andi	r24, 0x08	; 8
     ea8:	80 83       	st	Z, r24
     eaa:	05 c0       	rjmp	.+10     	; 0xeb6 <set_PWM+0x4e>
		else { TCCR3B |= 0x03; } // resumes/continues timer/counter
     eac:	e1 e9       	ldi	r30, 0x91	; 145
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	80 81       	ld	r24, Z
     eb2:	83 60       	ori	r24, 0x03	; 3
     eb4:	80 83       	st	Z, r24
		
		// prevents OCR3A from overflowing, using prescaler 64
		// 0.954 is smallest frequency that will not result in overflow
		if (frequency < 0.954) { OCR3A = 0xFFFF; }
     eb6:	28 e5       	ldi	r18, 0x58	; 88
     eb8:	39 e3       	ldi	r19, 0x39	; 57
     eba:	44 e7       	ldi	r20, 0x74	; 116
     ebc:	5f e3       	ldi	r21, 0x3F	; 63
     ebe:	c7 01       	movw	r24, r14
     ec0:	b6 01       	movw	r22, r12
     ec2:	a8 d2       	rcall	.+1360   	; 0x1414 <__cmpsf2>
     ec4:	88 23       	and	r24, r24
     ec6:	3c f4       	brge	.+14     	; 0xed6 <set_PWM+0x6e>
     ec8:	8f ef       	ldi	r24, 0xFF	; 255
     eca:	9f ef       	ldi	r25, 0xFF	; 255
     ecc:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     ed0:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
     ed4:	23 c0       	rjmp	.+70     	; 0xf1c <set_PWM+0xb4>
		
		// prevents OCR0A from underflowing, using prescaler 64					
		// 31250 is largest frequency that will not result in underflow
		else if (frequency > 31250) { OCR3A = 0x0000; }
     ed6:	20 e0       	ldi	r18, 0x00	; 0
     ed8:	34 e2       	ldi	r19, 0x24	; 36
     eda:	44 ef       	ldi	r20, 0xF4	; 244
     edc:	56 e4       	ldi	r21, 0x46	; 70
     ede:	c7 01       	movw	r24, r14
     ee0:	b6 01       	movw	r22, r12
     ee2:	aa d3       	rcall	.+1876   	; 0x1638 <__gesf2>
     ee4:	18 16       	cp	r1, r24
     ee6:	2c f4       	brge	.+10     	; 0xef2 <set_PWM+0x8a>
     ee8:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     eec:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
     ef0:	15 c0       	rjmp	.+42     	; 0xf1c <set_PWM+0xb4>
		
		// set OCR3A based on desired frequency
		else { OCR3A = (short)(8000000 / (128 * frequency)) - 1; }
     ef2:	20 e0       	ldi	r18, 0x00	; 0
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	40 e0       	ldi	r20, 0x00	; 0
     ef8:	53 e4       	ldi	r21, 0x43	; 67
     efa:	c7 01       	movw	r24, r14
     efc:	b6 01       	movw	r22, r12
     efe:	a0 d3       	rcall	.+1856   	; 0x1640 <__mulsf3>
     f00:	9b 01       	movw	r18, r22
     f02:	ac 01       	movw	r20, r24
     f04:	60 e0       	ldi	r22, 0x00	; 0
     f06:	74 e2       	ldi	r23, 0x24	; 36
     f08:	84 ef       	ldi	r24, 0xF4	; 244
     f0a:	9a e4       	ldi	r25, 0x4A	; 74
     f0c:	87 d2       	rcall	.+1294   	; 0x141c <__divsf3>
     f0e:	ee d2       	rcall	.+1500   	; 0x14ec <__fixsfsi>
     f10:	61 50       	subi	r22, 0x01	; 1
     f12:	71 09       	sbc	r23, r1
     f14:	70 93 99 00 	sts	0x0099, r23	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
     f18:	60 93 98 00 	sts	0x0098, r22	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>

		TCNT3 = 0; // resets counter
     f1c:	10 92 95 00 	sts	0x0095, r1	; 0x800095 <__TEXT_REGION_LENGTH__+0x7e0095>
     f20:	10 92 94 00 	sts	0x0094, r1	; 0x800094 <__TEXT_REGION_LENGTH__+0x7e0094>
		current_frequency = frequency; // Updates the current frequency
     f24:	c0 92 76 0a 	sts	0x0A76, r12	; 0x800a76 <current_frequency.2121>
     f28:	d0 92 77 0a 	sts	0x0A77, r13	; 0x800a77 <current_frequency.2121+0x1>
     f2c:	e0 92 78 0a 	sts	0x0A78, r14	; 0x800a78 <current_frequency.2121+0x2>
     f30:	f0 92 79 0a 	sts	0x0A79, r15	; 0x800a79 <current_frequency.2121+0x3>
	}
}
     f34:	ff 90       	pop	r15
     f36:	ef 90       	pop	r14
     f38:	df 90       	pop	r13
     f3a:	cf 90       	pop	r12
     f3c:	08 95       	ret

00000f3e <PWM_on>:

void PWM_on() {
	TCCR3A = (1 << COM3A0);
     f3e:	80 e4       	ldi	r24, 0x40	; 64
     f40:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	// COM3A0: Toggle PB3 on compare match between counter and OCR0A
	TCCR3B = (1 << WGM32) | (1 << CS31) | (1 << CS30);
     f44:	8b e0       	ldi	r24, 0x0B	; 11
     f46:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
	// WGM02: When counter (TCNT0) matches OCR0A, reset counter
	// CS01 & CS30: Set a prescaler of 64
	set_PWM(0);
     f4a:	60 e0       	ldi	r22, 0x00	; 0
     f4c:	70 e0       	ldi	r23, 0x00	; 0
     f4e:	cb 01       	movw	r24, r22
     f50:	8b cf       	rjmp	.-234    	; 0xe68 <set_PWM>
     f52:	08 95       	ret

00000f54 <PWM_off>:
}

void PWM_off() {
	TCCR3A = 0x00;
     f54:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
	TCCR3B = 0x00;
     f58:	10 92 91 00 	sts	0x0091, r1	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
     f5c:	08 95       	ret

00000f5e <Note_Tick>:
    static unsigned char rest_note;
    static unsigned char note_to_hit;
    static unsigned char hitting_note;
    static bool already_hit;
    
    switch(state){
     f5e:	81 30       	cpi	r24, 0x01	; 1
     f60:	91 05       	cpc	r25, r1
     f62:	59 f0       	breq	.+22     	; 0xf7a <Note_Tick+0x1c>
     f64:	1c f4       	brge	.+6      	; 0xf6c <Note_Tick+0xe>
     f66:	00 97       	sbiw	r24, 0x00	; 0
     f68:	f1 f0       	breq	.+60     	; 0xfa6 <Note_Tick+0x48>
     f6a:	12 c0       	rjmp	.+36     	; 0xf90 <Note_Tick+0x32>
     f6c:	82 30       	cpi	r24, 0x02	; 2
     f6e:	91 05       	cpc	r25, r1
     f70:	51 f0       	breq	.+20     	; 0xf86 <Note_Tick+0x28>
     f72:	83 30       	cpi	r24, 0x03	; 3
     f74:	91 05       	cpc	r25, r1
     f76:	b9 f0       	breq	.+46     	; 0xfa6 <Note_Tick+0x48>
     f78:	0b c0       	rjmp	.+22     	; 0xf90 <Note_Tick+0x32>
        case Note_INIT:
            state = Note_Wait;
            break;
        case Note_Wait:
            if(playing){
     f7a:	80 91 7a 0a 	lds	r24, 0x0A7A	; 0x800a7a <playing>
     f7e:	88 23       	and	r24, r24
     f80:	91 f0       	breq	.+36     	; 0xfa6 <Note_Tick+0x48>
                PWM_on();
     f82:	dd df       	rcall	.-70     	; 0xf3e <PWM_on>
                state = Note_Play_Song;
                break;
     f84:	1b c0       	rjmp	.+54     	; 0xfbc <Note_Tick+0x5e>
            else{
                state = Note_Wait;
                break;
            }
        case Note_Play_Song:
            if(song_finished){
     f86:	80 91 7c 0a 	lds	r24, 0x0A7C	; 0x800a7c <song_finished>
     f8a:	81 11       	cpse	r24, r1
     f8c:	d8 c0       	rjmp	.+432    	; 0x113e <Note_Tick+0x1e0>
     f8e:	16 c0       	rjmp	.+44     	; 0xfbc <Note_Tick+0x5e>
            }
        case Note_Reset:
            state = Note_Wait;
            break;
    }
    switch(state){
     f90:	82 30       	cpi	r24, 0x02	; 2
     f92:	91 05       	cpc	r25, r1
     f94:	99 f0       	breq	.+38     	; 0xfbc <Note_Tick+0x5e>
     f96:	83 30       	cpi	r24, 0x03	; 3
     f98:	91 05       	cpc	r25, r1
     f9a:	09 f4       	brne	.+2      	; 0xf9e <Note_Tick+0x40>
     f9c:	d0 c0       	rjmp	.+416    	; 0x113e <Note_Tick+0x1e0>
     f9e:	81 30       	cpi	r24, 0x01	; 1
     fa0:	91 05       	cpc	r25, r1
     fa2:	09 f0       	breq	.+2      	; 0xfa6 <Note_Tick+0x48>
     fa4:	d3 c0       	rjmp	.+422    	; 0x114c <Note_Tick+0x1ee>
        case Note_INIT:
            break;
        case Note_Wait:
            play_note = 0;
     fa6:	10 92 72 0a 	sts	0x0A72, r1	; 0x800a72 <play_note.2339>
            rest_note = 0;
     faa:	10 92 71 0a 	sts	0x0A71, r1	; 0x800a71 <rest_note.2340>
            hitting_note = 0;
     fae:	10 92 70 0a 	sts	0x0A70, r1	; 0x800a70 <hitting_note.2342>
            already_hit = false;
     fb2:	10 92 6f 0a 	sts	0x0A6F, r1	; 0x800a6f <already_hit.2343>
            break;
     fb6:	81 e0       	ldi	r24, 0x01	; 1
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	08 95       	ret
        case Note_Play_Song:
            note_to_hit = songs[current_song_choice].hit[current_note];
     fbc:	30 91 87 0a 	lds	r19, 0x0A87	; 0x800a87 <current_song_choice>
     fc0:	20 91 88 0a 	lds	r18, 0x0A88	; 0x800a88 <current_note>
     fc4:	42 eb       	ldi	r20, 0xB2	; 178
     fc6:	54 e0       	ldi	r21, 0x04	; 4
     fc8:	34 9f       	mul	r19, r20
     fca:	c0 01       	movw	r24, r0
     fcc:	35 9f       	mul	r19, r21
     fce:	90 0d       	add	r25, r0
     fd0:	11 24       	eor	r1, r1
     fd2:	8e 50       	subi	r24, 0x0E	; 14
     fd4:	95 4f       	sbci	r25, 0xF5	; 245
     fd6:	82 0f       	add	r24, r18
     fd8:	91 1d       	adc	r25, r1
     fda:	fc 01       	movw	r30, r24
     fdc:	ec 57       	subi	r30, 0x7C	; 124
     fde:	fc 4f       	sbci	r31, 0xFC	; 252
     fe0:	20 81       	ld	r18, Z
     fe2:	20 93 6e 0a 	sts	0x0A6E, r18	; 0x800a6e <__data_end>
            if(hitting_note < songs[current_song_choice].timing_hit[current_note] && (already_hit == false)){
     fe6:	ea 56       	subi	r30, 0x6A	; 106
     fe8:	ff 4f       	sbci	r31, 0xFF	; 255
     fea:	90 81       	ld	r25, Z
     fec:	80 91 70 0a 	lds	r24, 0x0A70	; 0x800a70 <hitting_note.2342>
     ff0:	89 17       	cp	r24, r25
     ff2:	c0 f4       	brcc	.+48     	; 0x1024 <Note_Tick+0xc6>
     ff4:	80 91 6f 0a 	lds	r24, 0x0A6F	; 0x800a6f <already_hit.2343>
     ff8:	81 11       	cpse	r24, r1
     ffa:	14 c0       	rjmp	.+40     	; 0x1024 <Note_Tick+0xc6>
                if(player_button_press == note_to_hit){
     ffc:	80 91 86 0a 	lds	r24, 0x0A86	; 0x800a86 <player_button_press>
    1000:	28 13       	cpse	r18, r24
    1002:	09 c0       	rjmp	.+18     	; 0x1016 <Note_Tick+0xb8>
                    current_score++;
    1004:	80 91 85 0a 	lds	r24, 0x0A85	; 0x800a85 <current_score>
    1008:	8f 5f       	subi	r24, 0xFF	; 255
    100a:	80 93 85 0a 	sts	0x0A85, r24	; 0x800a85 <current_score>
                    score_increase = true;
    100e:	81 e0       	ldi	r24, 0x01	; 1
    1010:	80 93 7b 0a 	sts	0x0A7B, r24	; 0x800a7b <score_increase>
    1014:	02 c0       	rjmp	.+4      	; 0x101a <Note_Tick+0xbc>
                }
                else{
                    score_increase = false;
    1016:	10 92 7b 0a 	sts	0x0A7B, r1	; 0x800a7b <score_increase>
                }
                hitting_note++;
    101a:	80 91 70 0a 	lds	r24, 0x0A70	; 0x800a70 <hitting_note.2342>
    101e:	8f 5f       	subi	r24, 0xFF	; 255
    1020:	80 93 70 0a 	sts	0x0A70, r24	; 0x800a70 <hitting_note.2342>
            }
            if(play_note < songs[current_song_choice].timing[current_note]){
    1024:	90 91 87 0a 	lds	r25, 0x0A87	; 0x800a87 <current_song_choice>
    1028:	80 91 88 0a 	lds	r24, 0x0A88	; 0x800a88 <current_note>
    102c:	22 eb       	ldi	r18, 0xB2	; 178
    102e:	34 e0       	ldi	r19, 0x04	; 4
    1030:	92 9f       	mul	r25, r18
    1032:	f0 01       	movw	r30, r0
    1034:	93 9f       	mul	r25, r19
    1036:	f0 0d       	add	r31, r0
    1038:	11 24       	eor	r1, r1
    103a:	ee 50       	subi	r30, 0x0E	; 14
    103c:	f5 4f       	sbci	r31, 0xF5	; 245
    103e:	e8 0f       	add	r30, r24
    1040:	f1 1d       	adc	r31, r1
    1042:	e8 5a       	subi	r30, 0xA8	; 168
    1044:	fd 4f       	sbci	r31, 0xFD	; 253
    1046:	90 81       	ld	r25, Z
    1048:	80 91 72 0a 	lds	r24, 0x0A72	; 0x800a72 <play_note.2339>
    104c:	89 17       	cp	r24, r25
    104e:	80 f5       	brcc	.+96     	; 0x10b0 <Note_Tick+0x152>
                if(player_button_press == note_to_hit){
    1050:	90 91 86 0a 	lds	r25, 0x0A86	; 0x800a86 <player_button_press>
    1054:	80 91 6e 0a 	lds	r24, 0x0A6E	; 0x800a6e <__data_end>
    1058:	98 13       	cpse	r25, r24
    105a:	09 c0       	rjmp	.+18     	; 0x106e <Note_Tick+0x110>
                    current_score++;
    105c:	80 91 85 0a 	lds	r24, 0x0A85	; 0x800a85 <current_score>
    1060:	8f 5f       	subi	r24, 0xFF	; 255
    1062:	80 93 85 0a 	sts	0x0A85, r24	; 0x800a85 <current_score>
                    score_increase = true;
    1066:	81 e0       	ldi	r24, 0x01	; 1
    1068:	80 93 7b 0a 	sts	0x0A7B, r24	; 0x800a7b <score_increase>
    106c:	02 c0       	rjmp	.+4      	; 0x1072 <Note_Tick+0x114>
                }
                else{
                    score_increase = false;
    106e:	10 92 7b 0a 	sts	0x0A7B, r1	; 0x800a7b <score_increase>
                }
                set_PWM(songs[current_song_choice].notes[current_note]);
    1072:	80 91 88 0a 	lds	r24, 0x0A88	; 0x800a88 <current_note>
    1076:	90 91 87 0a 	lds	r25, 0x0A87	; 0x800a87 <current_song_choice>
    107a:	22 eb       	ldi	r18, 0xB2	; 178
    107c:	34 e0       	ldi	r19, 0x04	; 4
    107e:	92 9f       	mul	r25, r18
    1080:	f0 01       	movw	r30, r0
    1082:	93 9f       	mul	r25, r19
    1084:	f0 0d       	add	r31, r0
    1086:	11 24       	eor	r1, r1
    1088:	94 e0       	ldi	r25, 0x04	; 4
    108a:	89 9f       	mul	r24, r25
    108c:	e0 0d       	add	r30, r0
    108e:	f1 1d       	adc	r31, r1
    1090:	11 24       	eor	r1, r1
    1092:	ee 50       	subi	r30, 0x0E	; 14
    1094:	f5 4f       	sbci	r31, 0xF5	; 245
    1096:	60 81       	ld	r22, Z
    1098:	71 81       	ldd	r23, Z+1	; 0x01
    109a:	82 81       	ldd	r24, Z+2	; 0x02
    109c:	93 81       	ldd	r25, Z+3	; 0x03
    109e:	e4 de       	rcall	.-568    	; 0xe68 <set_PWM>
                play_note++;
    10a0:	80 91 72 0a 	lds	r24, 0x0A72	; 0x800a72 <play_note.2339>
    10a4:	8f 5f       	subi	r24, 0xFF	; 255
    10a6:	80 93 72 0a 	sts	0x0A72, r24	; 0x800a72 <play_note.2339>
                break;
    10aa:	82 e0       	ldi	r24, 0x02	; 2
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	08 95       	ret
            }
            else{
                set_PWM(0);
    10b0:	60 e0       	ldi	r22, 0x00	; 0
    10b2:	70 e0       	ldi	r23, 0x00	; 0
    10b4:	cb 01       	movw	r24, r22
    10b6:	d8 de       	rcall	.-592    	; 0xe68 <set_PWM>
                if(rest_note < songs[current_song_choice].rest_timing[current_note]){
    10b8:	80 91 87 0a 	lds	r24, 0x0A87	; 0x800a87 <current_song_choice>
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	20 91 88 0a 	lds	r18, 0x0A88	; 0x800a88 <current_note>
    10c2:	30 91 71 0a 	lds	r19, 0x0A71	; 0x800a71 <rest_note.2340>
    10c6:	42 eb       	ldi	r20, 0xB2	; 178
    10c8:	54 e0       	ldi	r21, 0x04	; 4
    10ca:	84 9f       	mul	r24, r20
    10cc:	f0 01       	movw	r30, r0
    10ce:	85 9f       	mul	r24, r21
    10d0:	f0 0d       	add	r31, r0
    10d2:	94 9f       	mul	r25, r20
    10d4:	f0 0d       	add	r31, r0
    10d6:	11 24       	eor	r1, r1
    10d8:	ee 50       	subi	r30, 0x0E	; 14
    10da:	f5 4f       	sbci	r31, 0xF5	; 245
    10dc:	e2 0f       	add	r30, r18
    10de:	f1 1d       	adc	r31, r1
    10e0:	e2 51       	subi	r30, 0x12	; 18
    10e2:	fd 4f       	sbci	r31, 0xFD	; 253
    10e4:	40 81       	ld	r20, Z
    10e6:	34 17       	cp	r19, r20
    10e8:	30 f4       	brcc	.+12     	; 0x10f6 <Note_Tick+0x198>
                    rest_note++;
    10ea:	3f 5f       	subi	r19, 0xFF	; 255
    10ec:	30 93 71 0a 	sts	0x0A71, r19	; 0x800a71 <rest_note.2340>
    10f0:	82 e0       	ldi	r24, 0x02	; 2
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	08 95       	ret
                }
                else{
                    play_note = 0;
    10f6:	10 92 72 0a 	sts	0x0A72, r1	; 0x800a72 <play_note.2339>
                    rest_note = 0;
    10fa:	10 92 71 0a 	sts	0x0A71, r1	; 0x800a71 <rest_note.2340>
                    hitting_note = 0;
    10fe:	10 92 70 0a 	sts	0x0A70, r1	; 0x800a70 <hitting_note.2342>
                    already_hit = false;
    1102:	10 92 6f 0a 	sts	0x0A6F, r1	; 0x800a6f <already_hit.2343>
                    if(current_note < songs[current_song_choice].length){
    1106:	42 eb       	ldi	r20, 0xB2	; 178
    1108:	54 e0       	ldi	r21, 0x04	; 4
    110a:	84 9f       	mul	r24, r20
    110c:	f0 01       	movw	r30, r0
    110e:	85 9f       	mul	r24, r21
    1110:	f0 0d       	add	r31, r0
    1112:	94 9f       	mul	r25, r20
    1114:	f0 0d       	add	r31, r0
    1116:	11 24       	eor	r1, r1
    1118:	ed 55       	subi	r30, 0x5D	; 93
    111a:	f0 4f       	sbci	r31, 0xF0	; 240
    111c:	80 81       	ld	r24, Z
    111e:	28 17       	cp	r18, r24
    1120:	30 f4       	brcc	.+12     	; 0x112e <Note_Tick+0x1d0>
                        current_note++;
    1122:	2f 5f       	subi	r18, 0xFF	; 255
    1124:	20 93 88 0a 	sts	0x0A88, r18	; 0x800a88 <current_note>
    1128:	82 e0       	ldi	r24, 0x02	; 2
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	08 95       	ret
                    }
                    else{
                        playing = false;
    112e:	10 92 7a 0a 	sts	0x0A7A, r1	; 0x800a7a <playing>
                        song_finished = true;
    1132:	81 e0       	ldi	r24, 0x01	; 1
    1134:	80 93 7c 0a 	sts	0x0A7C, r24	; 0x800a7c <song_finished>
                        break;
    1138:	82 e0       	ldi	r24, 0x02	; 2
    113a:	90 e0       	ldi	r25, 0x00	; 0
                    }
                }
            }
            break;
        case Note_Reset:
            PWM_off();
    113c:	08 95       	ret
    113e:	0a df       	rcall	.-492    	; 0xf54 <PWM_off>
            current_note = 0;
    1140:	10 92 88 0a 	sts	0x0A88, r1	; 0x800a88 <current_note>
            score_increase = false;
    1144:	10 92 7b 0a 	sts	0x0A7B, r1	; 0x800a7b <score_increase>
            break;
    1148:	83 e0       	ldi	r24, 0x03	; 3
    114a:	90 e0       	ldi	r25, 0x00	; 0
    }
    return state;
}
    114c:	08 95       	ret

0000114e <main>:


int main(void)
{
    //LCD PORTS & RGB MATRIX
    DDRD = 0xFF; PORTD = 0x00;
    114e:	8f ef       	ldi	r24, 0xFF	; 255
    1150:	8a b9       	out	0x0a, r24	; 10
    1152:	1b b8       	out	0x0b, r1	; 11
    DDRC = 0XFF; PORTC = 0x00; //0 & 1 are LCD Control Lines, 2,3,4 are RGB PORTS
    1154:	87 b9       	out	0x07, r24	; 7
    1156:	18 b8       	out	0x08, r1	; 8
    
    //BUTTON INPUT PORTS
    DDRA = 0x00; PORTA = 0xFF;
    1158:	11 b8       	out	0x01, r1	; 1
    115a:	82 b9       	out	0x02, r24	; 2
    
    //BUZZER PORT
    DDRB = 0x0FF; PORTB = 0x00; //PB6 is buzzer
    115c:	84 b9       	out	0x04, r24	; 4
    115e:	15 b8       	out	0x05, r1	; 5
    
    //Initialize LCD and Matrix
    LCD_init();
    1160:	ef d8       	rcall	.-3618   	; 0x340 <LCD_init>
    Shift_Init();   
    1162:	41 dd       	rcall	.-1406   	; 0xbe6 <Shift_Init>
    Shift_transmit_data(0);
    1164:	80 e0       	ldi	r24, 0x00	; 0
    1166:	54 dd       	rcall	.-1368   	; 0xc10 <Shift_transmit_data>
    Shift_transmit_data(255);
    1168:	8f ef       	ldi	r24, 0xFF	; 255
    116a:	52 dd       	rcall	.-1372   	; 0xc10 <Shift_transmit_data>
    
    //eeprom
    if(eeprom_read_byte((uint8_t*)1) == 255) {
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	90 e0       	ldi	r25, 0x00	; 0
    1170:	d3 d2       	rcall	.+1446   	; 0x1718 <eeprom_read_byte>
    1172:	8f 3f       	cpi	r24, 0xFF	; 255
    1174:	21 f4       	brne	.+8      	; 0x117e <main+0x30>
        eeprom_update_byte((uint8_t*)1, (uint8_t) 0);
    1176:	60 e0       	ldi	r22, 0x00	; 0
    1178:	81 e0       	ldi	r24, 0x01	; 1
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	d5 d2       	rcall	.+1450   	; 0x1728 <eeprom_update_byte>
    }
    if(eeprom_read_byte((uint8_t*)2) == 255) {
    117e:	82 e0       	ldi	r24, 0x02	; 2
    1180:	90 e0       	ldi	r25, 0x00	; 0
    1182:	ca d2       	rcall	.+1428   	; 0x1718 <eeprom_read_byte>
    1184:	8f 3f       	cpi	r24, 0xFF	; 255
    1186:	21 f4       	brne	.+8      	; 0x1190 <main+0x42>
        eeprom_update_byte((uint8_t*)2, (uint8_t) 0);
    1188:	60 e0       	ldi	r22, 0x00	; 0
    118a:	82 e0       	ldi	r24, 0x02	; 2
    118c:	90 e0       	ldi	r25, 0x00	; 0
    118e:	cc d2       	rcall	.+1432   	; 0x1728 <eeprom_update_byte>
    }
    
    songs[0].high_score = (unsigned)(char)eeprom_read_byte((uint8_t*) 1);
    1190:	81 e0       	ldi	r24, 0x01	; 1
    1192:	90 e0       	ldi	r25, 0x00	; 0
    1194:	c1 d2       	rcall	.+1410   	; 0x1718 <eeprom_read_byte>
    1196:	80 93 a2 0f 	sts	0x0FA2, r24	; 0x800fa2 <songs+0x4b0>
    119a:	82 e0       	ldi	r24, 0x02	; 2
    songs[1].high_score = (unsigned)(char)eeprom_read_byte((uint8_t*) 2);
    119c:	90 e0       	ldi	r25, 0x00	; 0
    119e:	bc d2       	rcall	.+1400   	; 0x1718 <eeprom_read_byte>
    11a0:	80 93 54 14 	sts	0x1454, r24	; 0x801454 <songs+0x962>
    11a4:	86 e9       	ldi	r24, 0x96	; 150
    11a6:	80 93 a3 0f 	sts	0x0FA3, r24	; 0x800fa3 <songs+0x4b1>
    
    songs[0].length = SONG_LENGTH;
    11aa:	85 e6       	ldi	r24, 0x65	; 101
    11ac:	80 93 55 14 	sts	0x1455, r24	; 0x801455 <songs+0x963>
    songs[1].length = 101;    
    11b0:	0f 2e       	mov	r0, r31
    11b2:	fb e7       	ldi	r31, 0x7B	; 123
    11b4:	cf 2e       	mov	r12, r31
    11b6:	f7 e0       	ldi	r31, 0x07	; 7
    11b8:	df 2e       	mov	r13, r31
    11ba:	f0 2d       	mov	r31, r0
    11bc:	0f 2e       	mov	r0, r31
    11be:	f2 ef       	ldi	r31, 0xF2	; 242
    11c0:	ef 2e       	mov	r14, r31
    11c2:	fa e0       	ldi	r31, 0x0A	; 10
    11c4:	ff 2e       	mov	r15, r31
    11c6:	f0 2d       	mov	r31, r0
    11c8:	05 ee       	ldi	r16, 0xE5	; 229
    11ca:	16 e0       	ldi	r17, 0x06	; 6
    11cc:	6a e4       	ldi	r22, 0x4A	; 74
    11ce:	7d e0       	ldi	r23, 0x0D	; 13
    11d0:	4f e4       	ldi	r20, 0x4F	; 79
    11d2:	56 e0       	ldi	r21, 0x06	; 6
    11d4:	20 ee       	ldi	r18, 0xE0	; 224
    11d6:	3d e0       	ldi	r19, 0x0D	; 13
    11d8:	0f 2e       	mov	r0, r31
    11da:	f9 eb       	ldi	r31, 0xB9	; 185
    11dc:	af 2e       	mov	r10, r31
    11de:	f5 e0       	ldi	r31, 0x05	; 5
    11e0:	bf 2e       	mov	r11, r31
    11e2:	f0 2d       	mov	r31, r0
    11e4:	86 e7       	ldi	r24, 0x76	; 118
    11e6:	9e e0       	ldi	r25, 0x0E	; 14
    11e8:	c3 e2       	ldi	r28, 0x23	; 35
    11ea:	d5 e0       	ldi	r29, 0x05	; 5
    11ec:	ac e0       	ldi	r26, 0x0C	; 12
    11ee:	bf e0       	ldi	r27, 0x0F	; 15
    11f0:	15 01       	movw	r2, r10
    11f2:	0f 2e       	mov	r0, r31
    11f4:	f6 e9       	ldi	r31, 0x96	; 150
    11f6:	9f 2e       	mov	r9, r31
    11f8:	f0 2d       	mov	r31, r0
    11fa:	f6 01       	movw	r30, r12
    11fc:	41 90       	ld	r4, Z+
    //tasks
    for(unsigned char j = 0; j < songs[0].length; j++) {
        songs[0].notes[j] = notes_zense[j];
    11fe:	51 90       	ld	r5, Z+
    1200:	61 90       	ld	r6, Z+
    1202:	71 90       	ld	r7, Z+
    1204:	6f 01       	movw	r12, r30
    1206:	f7 01       	movw	r30, r14
    1208:	41 92       	st	Z+, r4
    120a:	51 92       	st	Z+, r5
    120c:	61 92       	st	Z+, r6
    120e:	71 92       	st	Z+, r7
    1210:	7f 01       	movw	r14, r30
    1212:	f8 01       	movw	r30, r16
    1214:	71 90       	ld	r7, Z+
        songs[0].timing[j] = timing_zense[j];
    1216:	8f 01       	movw	r16, r30
    1218:	fb 01       	movw	r30, r22
    121a:	71 92       	st	Z+, r7
    121c:	bf 01       	movw	r22, r30
    121e:	fa 01       	movw	r30, r20
    1220:	71 90       	ld	r7, Z+
        songs[0].rest_timing[j] = rests_zense[j];
    1222:	af 01       	movw	r20, r30
    1224:	f9 01       	movw	r30, r18
    1226:	71 92       	st	Z+, r7
    1228:	9f 01       	movw	r18, r30
    122a:	f1 01       	movw	r30, r2
    122c:	71 90       	ld	r7, Z+
        songs[0].hit[j] = hit_zense[j];
    122e:	1f 01       	movw	r2, r30
    1230:	fc 01       	movw	r30, r24
    1232:	71 92       	st	Z+, r7
    1234:	cf 01       	movw	r24, r30
    1236:	79 90       	ld	r7, Y+
    1238:	7d 92       	st	X+, r7
        songs[0].timing_hit[j] = timing_hit_zense[j];
    123a:	9a 94       	dec	r9
    123c:	91 10       	cpse	r9, r1
    123e:	dd cf       	rjmp	.-70     	; 0x11fa <main+0xac>
    songs[1].high_score = (unsigned)(char)eeprom_read_byte((uint8_t*) 2);
    
    songs[0].length = SONG_LENGTH;
    songs[1].length = 101;    
    //tasks
    for(unsigned char j = 0; j < songs[0].length; j++) {
    1240:	0f 2e       	mov	r0, r31
    1242:	fb ec       	ldi	r31, 0xCB	; 203
    1244:	ef 2e       	mov	r14, r31
    1246:	f2 e0       	ldi	r31, 0x02	; 2
    1248:	ff 2e       	mov	r15, r31
    124a:	f0 2d       	mov	r31, r0
    124c:	04 ea       	ldi	r16, 0xA4	; 164
    124e:	1f e0       	ldi	r17, 0x0F	; 15
    1250:	65 e3       	ldi	r22, 0x35	; 53
    1252:	72 e0       	ldi	r23, 0x02	; 2
    1254:	4c ef       	ldi	r20, 0xFC	; 252
    1256:	51 e1       	ldi	r21, 0x11	; 17
    1258:	2f e9       	ldi	r18, 0x9F	; 159
    125a:	31 e0       	ldi	r19, 0x01	; 1
    125c:	82 e9       	ldi	r24, 0x92	; 146
    125e:	92 e1       	ldi	r25, 0x12	; 18
    1260:	c8 e2       	ldi	r28, 0x28	; 40
    1262:	d3 e1       	ldi	r29, 0x13	; 19
    1264:	a9 e0       	ldi	r26, 0x09	; 9
    1266:	b1 e0       	ldi	r27, 0x01	; 1
    1268:	0f 2e       	mov	r0, r31
    126a:	fe eb       	ldi	r31, 0xBE	; 190
    126c:	8f 2e       	mov	r8, r31
    126e:	f3 e1       	ldi	r31, 0x13	; 19
    1270:	9f 2e       	mov	r9, r31
    1272:	f0 2d       	mov	r31, r0
    1274:	d1 2c       	mov	r13, r1
    1276:	f7 01       	movw	r30, r14
    1278:	41 90       	ld	r4, Z+
        songs[0].hit[j] = hit_zense[j];
        songs[0].timing_hit[j] = timing_hit_zense[j];
    }
    
    for(unsigned char i = 0; i < songs[1].length; i++) {
        songs[1].notes[i] = notes_mii[i];
    127a:	51 90       	ld	r5, Z+
    127c:	61 90       	ld	r6, Z+
    127e:	71 90       	ld	r7, Z+
    1280:	7f 01       	movw	r14, r30
    1282:	f8 01       	movw	r30, r16
    1284:	41 92       	st	Z+, r4
    1286:	51 92       	st	Z+, r5
    1288:	61 92       	st	Z+, r6
    128a:	71 92       	st	Z+, r7
    128c:	8f 01       	movw	r16, r30
    128e:	fb 01       	movw	r30, r22
    1290:	c1 90       	ld	r12, Z+
        songs[1].timing[i] = timing_mii[i];
    1292:	bf 01       	movw	r22, r30
    1294:	fa 01       	movw	r30, r20
    1296:	c1 92       	st	Z+, r12
    1298:	af 01       	movw	r20, r30
    129a:	f9 01       	movw	r30, r18
    129c:	c1 90       	ld	r12, Z+
        songs[1].rest_timing[i] = rests_mii[i];
    129e:	9f 01       	movw	r18, r30
    12a0:	fc 01       	movw	r30, r24
    12a2:	c1 92       	st	Z+, r12
    12a4:	cf 01       	movw	r24, r30
    12a6:	f5 01       	movw	r30, r10
    12a8:	c1 90       	ld	r12, Z+
        songs[1].hit[i] = hit_zense[i];
    12aa:	5f 01       	movw	r10, r30
    12ac:	c9 92       	st	Y+, r12
    12ae:	cd 90       	ld	r12, X+
    12b0:	f4 01       	movw	r30, r8
        songs[1].timing_hit[i] = timing_hit_mii[i];
    12b2:	c1 92       	st	Z+, r12
    12b4:	4f 01       	movw	r8, r30
    12b6:	d3 94       	inc	r13
    12b8:	f5 e6       	ldi	r31, 0x65	; 101
        songs[0].rest_timing[j] = rests_zense[j];
        songs[0].hit[j] = hit_zense[j];
        songs[0].timing_hit[j] = timing_hit_zense[j];
    }
    
    for(unsigned char i = 0; i < songs[1].length; i++) {
    12ba:	df 12       	cpse	r13, r31
    12bc:	dc cf       	rjmp	.-72     	; 0x1276 <main+0x128>
    12be:	e2 e9       	ldi	r30, 0x92	; 146
    12c0:	fa e0       	ldi	r31, 0x0A	; 10
    
    
    //Task Code
    unsigned char tasks_increment = 0;
    
    tasks[tasks_increment].state = LFT_INIT;
    12c2:	11 82       	std	Z+1, r1	; 0x01
    12c4:	10 82       	st	Z, r1
    12c6:	84 e1       	ldi	r24, 0x14	; 20
    12c8:	90 e0       	ldi	r25, 0x00	; 0
    tasks[tasks_increment].period = 20;
    12ca:	a0 e0       	ldi	r26, 0x00	; 0
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	82 83       	std	Z+2, r24	; 0x02
    12d0:	93 83       	std	Z+3, r25	; 0x03
    12d2:	a4 83       	std	Z+4, r26	; 0x04
    12d4:	b5 83       	std	Z+5, r27	; 0x05
    12d6:	86 83       	std	Z+6, r24	; 0x06
    12d8:	97 83       	std	Z+7, r25	; 0x07
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
    12da:	a0 87       	std	Z+8, r26	; 0x08
    12dc:	b1 87       	std	Z+9, r27	; 0x09
    12de:	22 e8       	ldi	r18, 0x82	; 130
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    tasks[tasks_increment].TickFct = &Left_Tick;
    12e2:	33 87       	std	Z+11, r19	; 0x0b
    12e4:	22 87       	std	Z+10, r18	; 0x0a
    12e6:	15 86       	std	Z+13, r1	; 0x0d
    12e8:	14 86       	std	Z+12, r1	; 0x0c
    
    tasks_increment++;
    
    tasks[tasks_increment].state = RGHT_INIT;
    12ea:	86 87       	std	Z+14, r24	; 0x0e
    12ec:	97 87       	std	Z+15, r25	; 0x0f
    tasks[tasks_increment].period = 20;
    12ee:	a0 8b       	std	Z+16, r26	; 0x10
    12f0:	b1 8b       	std	Z+17, r27	; 0x11
    12f2:	82 8b       	std	Z+18, r24	; 0x12
    12f4:	93 8b       	std	Z+19, r25	; 0x13
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
    12f6:	a4 8b       	std	Z+20, r26	; 0x14
    12f8:	b5 8b       	std	Z+21, r27	; 0x15
    12fa:	25 e9       	ldi	r18, 0x95	; 149
    12fc:	30 e0       	ldi	r19, 0x00	; 0
    tasks[tasks_increment].TickFct = &Right_Tick;
    12fe:	37 8b       	std	Z+23, r19	; 0x17
    1300:	26 8b       	std	Z+22, r18	; 0x16
    1302:	11 8e       	std	Z+25, r1	; 0x19
    1304:	10 8e       	std	Z+24, r1	; 0x18
    
    tasks_increment++;
    
    tasks[tasks_increment].state = UP_INIT;
    1306:	82 8f       	std	Z+26, r24	; 0x1a
    1308:	93 8f       	std	Z+27, r25	; 0x1b
    tasks[tasks_increment].period = 20;
    130a:	a4 8f       	std	Z+28, r26	; 0x1c
    130c:	b5 8f       	std	Z+29, r27	; 0x1d
    130e:	86 8f       	std	Z+30, r24	; 0x1e
    1310:	97 8f       	std	Z+31, r25	; 0x1f
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
    1312:	a0 a3       	std	Z+32, r26	; 0x20
    1314:	b1 a3       	std	Z+33, r27	; 0x21
    1316:	28 ea       	ldi	r18, 0xA8	; 168
    1318:	30 e0       	ldi	r19, 0x00	; 0
    tasks[tasks_increment].TickFct = &Up_Tick;
    131a:	33 a3       	std	Z+35, r19	; 0x23
    131c:	22 a3       	std	Z+34, r18	; 0x22
    131e:	15 a2       	std	Z+37, r1	; 0x25
    1320:	14 a2       	std	Z+36, r1	; 0x24
    
    
    tasks_increment++;
    
    tasks[tasks_increment].state = DOWN_INIT;
    1322:	86 a3       	std	Z+38, r24	; 0x26
    1324:	97 a3       	std	Z+39, r25	; 0x27
    tasks[tasks_increment].period = 20;
    1326:	a0 a7       	std	Z+40, r26	; 0x28
    1328:	b1 a7       	std	Z+41, r27	; 0x29
    132a:	82 a7       	std	Z+42, r24	; 0x2a
    132c:	93 a7       	std	Z+43, r25	; 0x2b
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
    132e:	a4 a7       	std	Z+44, r26	; 0x2c
    1330:	b5 a7       	std	Z+45, r27	; 0x2d
    1332:	8b eb       	ldi	r24, 0xBB	; 187
    1334:	90 e0       	ldi	r25, 0x00	; 0
    tasks[tasks_increment].TickFct = &Down_Tick;
    1336:	97 a7       	std	Z+47, r25	; 0x2f
    1338:	86 a7       	std	Z+46, r24	; 0x2e
    133a:	11 aa       	std	Z+49, r1	; 0x31
    133c:	10 aa       	std	Z+48, r1	; 0x30
    
    
    tasks_increment++;
    
    tasks[tasks_increment].state = RGB_INIT;
    133e:	8a e0       	ldi	r24, 0x0A	; 10
    1340:	90 e0       	ldi	r25, 0x00	; 0
    tasks[tasks_increment].period = 10;
    1342:	a0 e0       	ldi	r26, 0x00	; 0
    1344:	b0 e0       	ldi	r27, 0x00	; 0
    1346:	82 ab       	std	Z+50, r24	; 0x32
    1348:	93 ab       	std	Z+51, r25	; 0x33
    134a:	a4 ab       	std	Z+52, r26	; 0x34
    134c:	b5 ab       	std	Z+53, r27	; 0x35
    134e:	86 ab       	std	Z+54, r24	; 0x36
    1350:	97 ab       	std	Z+55, r25	; 0x37
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
    1352:	a0 af       	std	Z+56, r26	; 0x38
    1354:	b1 af       	std	Z+57, r27	; 0x39
    1356:	29 e1       	ldi	r18, 0x19	; 25
    1358:	36 e0       	ldi	r19, 0x06	; 6
    tasks[tasks_increment].TickFct = &RGB_Matrix_Tick;
    135a:	33 af       	std	Z+59, r19	; 0x3b
    135c:	22 af       	std	Z+58, r18	; 0x3a
    135e:	15 ae       	std	Z+61, r1	; 0x3d
    1360:	14 ae       	std	Z+60, r1	; 0x3c
    
    
    tasks_increment++;
    
    tasks[tasks_increment].state = LCD_Menu_Init;
    1362:	4e e1       	ldi	r20, 0x1E	; 30
    1364:	50 e0       	ldi	r21, 0x00	; 0
    tasks[tasks_increment].period = 30;
    1366:	60 e0       	ldi	r22, 0x00	; 0
    1368:	70 e0       	ldi	r23, 0x00	; 0
    136a:	40 93 d0 0a 	sts	0x0AD0, r20	; 0x800ad0 <tasks+0x3e>
    136e:	50 93 d1 0a 	sts	0x0AD1, r21	; 0x800ad1 <tasks+0x3f>
    1372:	60 93 d2 0a 	sts	0x0AD2, r22	; 0x800ad2 <tasks+0x40>
    1376:	70 93 d3 0a 	sts	0x0AD3, r23	; 0x800ad3 <tasks+0x41>
    137a:	40 93 d4 0a 	sts	0x0AD4, r20	; 0x800ad4 <tasks+0x42>
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
    137e:	50 93 d5 0a 	sts	0x0AD5, r21	; 0x800ad5 <tasks+0x43>
    1382:	60 93 d6 0a 	sts	0x0AD6, r22	; 0x800ad6 <tasks+0x44>
    1386:	70 93 d7 0a 	sts	0x0AD7, r23	; 0x800ad7 <tasks+0x45>
    138a:	26 ee       	ldi	r18, 0xE6	; 230
    138c:	31 e0       	ldi	r19, 0x01	; 1
    tasks[tasks_increment].TickFct = &LCD_Menu_Tick;
    138e:	30 93 d9 0a 	sts	0x0AD9, r19	; 0x800ad9 <tasks+0x47>
    1392:	20 93 d8 0a 	sts	0x0AD8, r18	; 0x800ad8 <tasks+0x46>
    1396:	10 92 db 0a 	sts	0x0ADB, r1	; 0x800adb <tasks+0x49>
    
    tasks_increment++;
    
    tasks[tasks_increment].state = Note_INIT;
    139a:	10 92 da 0a 	sts	0x0ADA, r1	; 0x800ada <tasks+0x48>
    139e:	80 93 dc 0a 	sts	0x0ADC, r24	; 0x800adc <tasks+0x4a>
    tasks[tasks_increment].period = 10;
    13a2:	90 93 dd 0a 	sts	0x0ADD, r25	; 0x800add <tasks+0x4b>
    13a6:	a0 93 de 0a 	sts	0x0ADE, r26	; 0x800ade <tasks+0x4c>
    13aa:	b0 93 df 0a 	sts	0x0ADF, r27	; 0x800adf <tasks+0x4d>
    13ae:	80 93 e0 0a 	sts	0x0AE0, r24	; 0x800ae0 <tasks+0x4e>
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
    13b2:	90 93 e1 0a 	sts	0x0AE1, r25	; 0x800ae1 <tasks+0x4f>
    13b6:	a0 93 e2 0a 	sts	0x0AE2, r26	; 0x800ae2 <tasks+0x50>
    13ba:	b0 93 e3 0a 	sts	0x0AE3, r27	; 0x800ae3 <tasks+0x51>
    13be:	8f ea       	ldi	r24, 0xAF	; 175
    13c0:	97 e0       	ldi	r25, 0x07	; 7
    tasks[tasks_increment].TickFct = &Note_Tick;
    13c2:	90 93 e5 0a 	sts	0x0AE5, r25	; 0x800ae5 <tasks+0x53>
    13c6:	80 93 e4 0a 	sts	0x0AE4, r24	; 0x800ae4 <tasks+0x52>
    13ca:	10 92 e7 0a 	sts	0x0AE7, r1	; 0x800ae7 <tasks+0x55>
    
    tasks_increment++;
    
    tasks[tasks_increment].state = Player_Init;
    13ce:	10 92 e6 0a 	sts	0x0AE6, r1	; 0x800ae6 <tasks+0x54>
    13d2:	85 e0       	ldi	r24, 0x05	; 5
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    tasks[tasks_increment].period = 5;
    13d6:	a0 e0       	ldi	r26, 0x00	; 0
    13d8:	b0 e0       	ldi	r27, 0x00	; 0
    13da:	80 93 e8 0a 	sts	0x0AE8, r24	; 0x800ae8 <tasks+0x56>
    13de:	90 93 e9 0a 	sts	0x0AE9, r25	; 0x800ae9 <tasks+0x57>
    13e2:	a0 93 ea 0a 	sts	0x0AEA, r26	; 0x800aea <tasks+0x58>
    13e6:	b0 93 eb 0a 	sts	0x0AEB, r27	; 0x800aeb <tasks+0x59>
    13ea:	80 93 ec 0a 	sts	0x0AEC, r24	; 0x800aec <tasks+0x5a>
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
    13ee:	90 93 ed 0a 	sts	0x0AED, r25	; 0x800aed <tasks+0x5b>
    13f2:	a0 93 ee 0a 	sts	0x0AEE, r26	; 0x800aee <tasks+0x5c>
    13f6:	b0 93 ef 0a 	sts	0x0AEF, r27	; 0x800aef <tasks+0x5d>
    13fa:	8e ec       	ldi	r24, 0xCE	; 206
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    tasks[tasks_increment].TickFct = &Player_Tick;
    13fe:	90 93 f1 0a 	sts	0x0AF1, r25	; 0x800af1 <tasks+0x5f>
    1402:	80 93 f0 0a 	sts	0x0AF0, r24	; 0x800af0 <tasks+0x5e>
    tasks[tasks_increment].period = 60;
    tasks[tasks_increment].elapsedTime = tasks[tasks_increment].period;
    tasks[tasks_increment].TickFct = &EZ_TICK;
    */
    //Timer
    TimerSet(tasksPeriodGCD);
    1406:	65 e0       	ldi	r22, 0x05	; 5
    1408:	70 e0       	ldi	r23, 0x00	; 0
    140a:	80 e0       	ldi	r24, 0x00	; 0
    140c:	90 e0       	ldi	r25, 0x00	; 0
    140e:	27 db       	rcall	.-2482   	; 0xa5e <TimerSet>
    1410:	37 db       	rcall	.-2450   	; 0xa80 <TimerOn>
    TimerOn();
    1412:	ff cf       	rjmp	.-2      	; 0x1412 <main+0x2c4>

00001414 <__cmpsf2>:
    1414:	9c d0       	rcall	.+312    	; 0x154e <__fp_cmp>
    1416:	08 f4       	brcc	.+2      	; 0x141a <__cmpsf2+0x6>
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	08 95       	ret

0000141c <__divsf3>:
    141c:	0c d0       	rcall	.+24     	; 0x1436 <__divsf3x>
    141e:	d2 c0       	rjmp	.+420    	; 0x15c4 <__fp_round>
    1420:	ca d0       	rcall	.+404    	; 0x15b6 <__fp_pscB>
    1422:	40 f0       	brcs	.+16     	; 0x1434 <__divsf3+0x18>
    1424:	c1 d0       	rcall	.+386    	; 0x15a8 <__fp_pscA>
    1426:	30 f0       	brcs	.+12     	; 0x1434 <__divsf3+0x18>
    1428:	21 f4       	brne	.+8      	; 0x1432 <__divsf3+0x16>
    142a:	5f 3f       	cpi	r21, 0xFF	; 255
    142c:	19 f0       	breq	.+6      	; 0x1434 <__divsf3+0x18>
    142e:	b3 c0       	rjmp	.+358    	; 0x1596 <__fp_inf>
    1430:	51 11       	cpse	r21, r1
    1432:	fc c0       	rjmp	.+504    	; 0x162c <__fp_szero>
    1434:	b6 c0       	rjmp	.+364    	; 0x15a2 <__fp_nan>

00001436 <__divsf3x>:
    1436:	d7 d0       	rcall	.+430    	; 0x15e6 <__fp_split3>
    1438:	98 f3       	brcs	.-26     	; 0x1420 <__divsf3+0x4>

0000143a <__divsf3_pse>:
    143a:	99 23       	and	r25, r25
    143c:	c9 f3       	breq	.-14     	; 0x1430 <__divsf3+0x14>
    143e:	55 23       	and	r21, r21
    1440:	b1 f3       	breq	.-20     	; 0x142e <__divsf3+0x12>
    1442:	95 1b       	sub	r25, r21
    1444:	55 0b       	sbc	r21, r21
    1446:	bb 27       	eor	r27, r27
    1448:	aa 27       	eor	r26, r26
    144a:	62 17       	cp	r22, r18
    144c:	73 07       	cpc	r23, r19
    144e:	84 07       	cpc	r24, r20
    1450:	38 f0       	brcs	.+14     	; 0x1460 <__divsf3_pse+0x26>
    1452:	9f 5f       	subi	r25, 0xFF	; 255
    1454:	5f 4f       	sbci	r21, 0xFF	; 255
    1456:	22 0f       	add	r18, r18
    1458:	33 1f       	adc	r19, r19
    145a:	44 1f       	adc	r20, r20
    145c:	aa 1f       	adc	r26, r26
    145e:	a9 f3       	breq	.-22     	; 0x144a <__divsf3_pse+0x10>
    1460:	33 d0       	rcall	.+102    	; 0x14c8 <__divsf3_pse+0x8e>
    1462:	0e 2e       	mov	r0, r30
    1464:	3a f0       	brmi	.+14     	; 0x1474 <__divsf3_pse+0x3a>
    1466:	e0 e8       	ldi	r30, 0x80	; 128
    1468:	30 d0       	rcall	.+96     	; 0x14ca <__divsf3_pse+0x90>
    146a:	91 50       	subi	r25, 0x01	; 1
    146c:	50 40       	sbci	r21, 0x00	; 0
    146e:	e6 95       	lsr	r30
    1470:	00 1c       	adc	r0, r0
    1472:	ca f7       	brpl	.-14     	; 0x1466 <__divsf3_pse+0x2c>
    1474:	29 d0       	rcall	.+82     	; 0x14c8 <__divsf3_pse+0x8e>
    1476:	fe 2f       	mov	r31, r30
    1478:	27 d0       	rcall	.+78     	; 0x14c8 <__divsf3_pse+0x8e>
    147a:	66 0f       	add	r22, r22
    147c:	77 1f       	adc	r23, r23
    147e:	88 1f       	adc	r24, r24
    1480:	bb 1f       	adc	r27, r27
    1482:	26 17       	cp	r18, r22
    1484:	37 07       	cpc	r19, r23
    1486:	48 07       	cpc	r20, r24
    1488:	ab 07       	cpc	r26, r27
    148a:	b0 e8       	ldi	r27, 0x80	; 128
    148c:	09 f0       	breq	.+2      	; 0x1490 <__divsf3_pse+0x56>
    148e:	bb 0b       	sbc	r27, r27
    1490:	80 2d       	mov	r24, r0
    1492:	bf 01       	movw	r22, r30
    1494:	ff 27       	eor	r31, r31
    1496:	93 58       	subi	r25, 0x83	; 131
    1498:	5f 4f       	sbci	r21, 0xFF	; 255
    149a:	2a f0       	brmi	.+10     	; 0x14a6 <__divsf3_pse+0x6c>
    149c:	9e 3f       	cpi	r25, 0xFE	; 254
    149e:	51 05       	cpc	r21, r1
    14a0:	68 f0       	brcs	.+26     	; 0x14bc <__divsf3_pse+0x82>
    14a2:	79 c0       	rjmp	.+242    	; 0x1596 <__fp_inf>
    14a4:	c3 c0       	rjmp	.+390    	; 0x162c <__fp_szero>
    14a6:	5f 3f       	cpi	r21, 0xFF	; 255
    14a8:	ec f3       	brlt	.-6      	; 0x14a4 <__divsf3_pse+0x6a>
    14aa:	98 3e       	cpi	r25, 0xE8	; 232
    14ac:	dc f3       	brlt	.-10     	; 0x14a4 <__divsf3_pse+0x6a>
    14ae:	86 95       	lsr	r24
    14b0:	77 95       	ror	r23
    14b2:	67 95       	ror	r22
    14b4:	b7 95       	ror	r27
    14b6:	f7 95       	ror	r31
    14b8:	9f 5f       	subi	r25, 0xFF	; 255
    14ba:	c9 f7       	brne	.-14     	; 0x14ae <__divsf3_pse+0x74>
    14bc:	88 0f       	add	r24, r24
    14be:	91 1d       	adc	r25, r1
    14c0:	96 95       	lsr	r25
    14c2:	87 95       	ror	r24
    14c4:	97 f9       	bld	r25, 7
    14c6:	08 95       	ret
    14c8:	e1 e0       	ldi	r30, 0x01	; 1
    14ca:	66 0f       	add	r22, r22
    14cc:	77 1f       	adc	r23, r23
    14ce:	88 1f       	adc	r24, r24
    14d0:	bb 1f       	adc	r27, r27
    14d2:	62 17       	cp	r22, r18
    14d4:	73 07       	cpc	r23, r19
    14d6:	84 07       	cpc	r24, r20
    14d8:	ba 07       	cpc	r27, r26
    14da:	20 f0       	brcs	.+8      	; 0x14e4 <__divsf3_pse+0xaa>
    14dc:	62 1b       	sub	r22, r18
    14de:	73 0b       	sbc	r23, r19
    14e0:	84 0b       	sbc	r24, r20
    14e2:	ba 0b       	sbc	r27, r26
    14e4:	ee 1f       	adc	r30, r30
    14e6:	88 f7       	brcc	.-30     	; 0x14ca <__divsf3_pse+0x90>
    14e8:	e0 95       	com	r30
    14ea:	08 95       	ret

000014ec <__fixsfsi>:
    14ec:	04 d0       	rcall	.+8      	; 0x14f6 <__fixunssfsi>
    14ee:	68 94       	set
    14f0:	b1 11       	cpse	r27, r1
    14f2:	9c c0       	rjmp	.+312    	; 0x162c <__fp_szero>
    14f4:	08 95       	ret

000014f6 <__fixunssfsi>:
    14f6:	7f d0       	rcall	.+254    	; 0x15f6 <__fp_splitA>
    14f8:	88 f0       	brcs	.+34     	; 0x151c <__fixunssfsi+0x26>
    14fa:	9f 57       	subi	r25, 0x7F	; 127
    14fc:	90 f0       	brcs	.+36     	; 0x1522 <__fixunssfsi+0x2c>
    14fe:	b9 2f       	mov	r27, r25
    1500:	99 27       	eor	r25, r25
    1502:	b7 51       	subi	r27, 0x17	; 23
    1504:	a0 f0       	brcs	.+40     	; 0x152e <__fixunssfsi+0x38>
    1506:	d1 f0       	breq	.+52     	; 0x153c <__fixunssfsi+0x46>
    1508:	66 0f       	add	r22, r22
    150a:	77 1f       	adc	r23, r23
    150c:	88 1f       	adc	r24, r24
    150e:	99 1f       	adc	r25, r25
    1510:	1a f0       	brmi	.+6      	; 0x1518 <__fixunssfsi+0x22>
    1512:	ba 95       	dec	r27
    1514:	c9 f7       	brne	.-14     	; 0x1508 <__fixunssfsi+0x12>
    1516:	12 c0       	rjmp	.+36     	; 0x153c <__fixunssfsi+0x46>
    1518:	b1 30       	cpi	r27, 0x01	; 1
    151a:	81 f0       	breq	.+32     	; 0x153c <__fixunssfsi+0x46>
    151c:	86 d0       	rcall	.+268    	; 0x162a <__fp_zero>
    151e:	b1 e0       	ldi	r27, 0x01	; 1
    1520:	08 95       	ret
    1522:	83 c0       	rjmp	.+262    	; 0x162a <__fp_zero>
    1524:	67 2f       	mov	r22, r23
    1526:	78 2f       	mov	r23, r24
    1528:	88 27       	eor	r24, r24
    152a:	b8 5f       	subi	r27, 0xF8	; 248
    152c:	39 f0       	breq	.+14     	; 0x153c <__fixunssfsi+0x46>
    152e:	b9 3f       	cpi	r27, 0xF9	; 249
    1530:	cc f3       	brlt	.-14     	; 0x1524 <__fixunssfsi+0x2e>
    1532:	86 95       	lsr	r24
    1534:	77 95       	ror	r23
    1536:	67 95       	ror	r22
    1538:	b3 95       	inc	r27
    153a:	d9 f7       	brne	.-10     	; 0x1532 <__fixunssfsi+0x3c>
    153c:	3e f4       	brtc	.+14     	; 0x154c <__fixunssfsi+0x56>
    153e:	90 95       	com	r25
    1540:	80 95       	com	r24
    1542:	70 95       	com	r23
    1544:	61 95       	neg	r22
    1546:	7f 4f       	sbci	r23, 0xFF	; 255
    1548:	8f 4f       	sbci	r24, 0xFF	; 255
    154a:	9f 4f       	sbci	r25, 0xFF	; 255
    154c:	08 95       	ret

0000154e <__fp_cmp>:
    154e:	99 0f       	add	r25, r25
    1550:	00 08       	sbc	r0, r0
    1552:	55 0f       	add	r21, r21
    1554:	aa 0b       	sbc	r26, r26
    1556:	e0 e8       	ldi	r30, 0x80	; 128
    1558:	fe ef       	ldi	r31, 0xFE	; 254
    155a:	16 16       	cp	r1, r22
    155c:	17 06       	cpc	r1, r23
    155e:	e8 07       	cpc	r30, r24
    1560:	f9 07       	cpc	r31, r25
    1562:	c0 f0       	brcs	.+48     	; 0x1594 <__fp_cmp+0x46>
    1564:	12 16       	cp	r1, r18
    1566:	13 06       	cpc	r1, r19
    1568:	e4 07       	cpc	r30, r20
    156a:	f5 07       	cpc	r31, r21
    156c:	98 f0       	brcs	.+38     	; 0x1594 <__fp_cmp+0x46>
    156e:	62 1b       	sub	r22, r18
    1570:	73 0b       	sbc	r23, r19
    1572:	84 0b       	sbc	r24, r20
    1574:	95 0b       	sbc	r25, r21
    1576:	39 f4       	brne	.+14     	; 0x1586 <__fp_cmp+0x38>
    1578:	0a 26       	eor	r0, r26
    157a:	61 f0       	breq	.+24     	; 0x1594 <__fp_cmp+0x46>
    157c:	23 2b       	or	r18, r19
    157e:	24 2b       	or	r18, r20
    1580:	25 2b       	or	r18, r21
    1582:	21 f4       	brne	.+8      	; 0x158c <__fp_cmp+0x3e>
    1584:	08 95       	ret
    1586:	0a 26       	eor	r0, r26
    1588:	09 f4       	brne	.+2      	; 0x158c <__fp_cmp+0x3e>
    158a:	a1 40       	sbci	r26, 0x01	; 1
    158c:	a6 95       	lsr	r26
    158e:	8f ef       	ldi	r24, 0xFF	; 255
    1590:	81 1d       	adc	r24, r1
    1592:	81 1d       	adc	r24, r1
    1594:	08 95       	ret

00001596 <__fp_inf>:
    1596:	97 f9       	bld	r25, 7
    1598:	9f 67       	ori	r25, 0x7F	; 127
    159a:	80 e8       	ldi	r24, 0x80	; 128
    159c:	70 e0       	ldi	r23, 0x00	; 0
    159e:	60 e0       	ldi	r22, 0x00	; 0
    15a0:	08 95       	ret

000015a2 <__fp_nan>:
    15a2:	9f ef       	ldi	r25, 0xFF	; 255
    15a4:	80 ec       	ldi	r24, 0xC0	; 192
    15a6:	08 95       	ret

000015a8 <__fp_pscA>:
    15a8:	00 24       	eor	r0, r0
    15aa:	0a 94       	dec	r0
    15ac:	16 16       	cp	r1, r22
    15ae:	17 06       	cpc	r1, r23
    15b0:	18 06       	cpc	r1, r24
    15b2:	09 06       	cpc	r0, r25
    15b4:	08 95       	ret

000015b6 <__fp_pscB>:
    15b6:	00 24       	eor	r0, r0
    15b8:	0a 94       	dec	r0
    15ba:	12 16       	cp	r1, r18
    15bc:	13 06       	cpc	r1, r19
    15be:	14 06       	cpc	r1, r20
    15c0:	05 06       	cpc	r0, r21
    15c2:	08 95       	ret

000015c4 <__fp_round>:
    15c4:	09 2e       	mov	r0, r25
    15c6:	03 94       	inc	r0
    15c8:	00 0c       	add	r0, r0
    15ca:	11 f4       	brne	.+4      	; 0x15d0 <__fp_round+0xc>
    15cc:	88 23       	and	r24, r24
    15ce:	52 f0       	brmi	.+20     	; 0x15e4 <__fp_round+0x20>
    15d0:	bb 0f       	add	r27, r27
    15d2:	40 f4       	brcc	.+16     	; 0x15e4 <__fp_round+0x20>
    15d4:	bf 2b       	or	r27, r31
    15d6:	11 f4       	brne	.+4      	; 0x15dc <__fp_round+0x18>
    15d8:	60 ff       	sbrs	r22, 0
    15da:	04 c0       	rjmp	.+8      	; 0x15e4 <__fp_round+0x20>
    15dc:	6f 5f       	subi	r22, 0xFF	; 255
    15de:	7f 4f       	sbci	r23, 0xFF	; 255
    15e0:	8f 4f       	sbci	r24, 0xFF	; 255
    15e2:	9f 4f       	sbci	r25, 0xFF	; 255
    15e4:	08 95       	ret

000015e6 <__fp_split3>:
    15e6:	57 fd       	sbrc	r21, 7
    15e8:	90 58       	subi	r25, 0x80	; 128
    15ea:	44 0f       	add	r20, r20
    15ec:	55 1f       	adc	r21, r21
    15ee:	59 f0       	breq	.+22     	; 0x1606 <__fp_splitA+0x10>
    15f0:	5f 3f       	cpi	r21, 0xFF	; 255
    15f2:	71 f0       	breq	.+28     	; 0x1610 <__fp_splitA+0x1a>
    15f4:	47 95       	ror	r20

000015f6 <__fp_splitA>:
    15f6:	88 0f       	add	r24, r24
    15f8:	97 fb       	bst	r25, 7
    15fa:	99 1f       	adc	r25, r25
    15fc:	61 f0       	breq	.+24     	; 0x1616 <__fp_splitA+0x20>
    15fe:	9f 3f       	cpi	r25, 0xFF	; 255
    1600:	79 f0       	breq	.+30     	; 0x1620 <__fp_splitA+0x2a>
    1602:	87 95       	ror	r24
    1604:	08 95       	ret
    1606:	12 16       	cp	r1, r18
    1608:	13 06       	cpc	r1, r19
    160a:	14 06       	cpc	r1, r20
    160c:	55 1f       	adc	r21, r21
    160e:	f2 cf       	rjmp	.-28     	; 0x15f4 <__fp_split3+0xe>
    1610:	46 95       	lsr	r20
    1612:	f1 df       	rcall	.-30     	; 0x15f6 <__fp_splitA>
    1614:	08 c0       	rjmp	.+16     	; 0x1626 <__fp_splitA+0x30>
    1616:	16 16       	cp	r1, r22
    1618:	17 06       	cpc	r1, r23
    161a:	18 06       	cpc	r1, r24
    161c:	99 1f       	adc	r25, r25
    161e:	f1 cf       	rjmp	.-30     	; 0x1602 <__fp_splitA+0xc>
    1620:	86 95       	lsr	r24
    1622:	71 05       	cpc	r23, r1
    1624:	61 05       	cpc	r22, r1
    1626:	08 94       	sec
    1628:	08 95       	ret

0000162a <__fp_zero>:
    162a:	e8 94       	clt

0000162c <__fp_szero>:
    162c:	bb 27       	eor	r27, r27
    162e:	66 27       	eor	r22, r22
    1630:	77 27       	eor	r23, r23
    1632:	cb 01       	movw	r24, r22
    1634:	97 f9       	bld	r25, 7
    1636:	08 95       	ret

00001638 <__gesf2>:
    1638:	8a df       	rcall	.-236    	; 0x154e <__fp_cmp>
    163a:	08 f4       	brcc	.+2      	; 0x163e <__gesf2+0x6>
    163c:	8f ef       	ldi	r24, 0xFF	; 255
    163e:	08 95       	ret

00001640 <__mulsf3>:
    1640:	0b d0       	rcall	.+22     	; 0x1658 <__mulsf3x>
    1642:	c0 cf       	rjmp	.-128    	; 0x15c4 <__fp_round>
    1644:	b1 df       	rcall	.-158    	; 0x15a8 <__fp_pscA>
    1646:	28 f0       	brcs	.+10     	; 0x1652 <__mulsf3+0x12>
    1648:	b6 df       	rcall	.-148    	; 0x15b6 <__fp_pscB>
    164a:	18 f0       	brcs	.+6      	; 0x1652 <__mulsf3+0x12>
    164c:	95 23       	and	r25, r21
    164e:	09 f0       	breq	.+2      	; 0x1652 <__mulsf3+0x12>
    1650:	a2 cf       	rjmp	.-188    	; 0x1596 <__fp_inf>
    1652:	a7 cf       	rjmp	.-178    	; 0x15a2 <__fp_nan>
    1654:	11 24       	eor	r1, r1
    1656:	ea cf       	rjmp	.-44     	; 0x162c <__fp_szero>

00001658 <__mulsf3x>:
    1658:	c6 df       	rcall	.-116    	; 0x15e6 <__fp_split3>
    165a:	a0 f3       	brcs	.-24     	; 0x1644 <__mulsf3+0x4>

0000165c <__mulsf3_pse>:
    165c:	95 9f       	mul	r25, r21
    165e:	d1 f3       	breq	.-12     	; 0x1654 <__mulsf3+0x14>
    1660:	95 0f       	add	r25, r21
    1662:	50 e0       	ldi	r21, 0x00	; 0
    1664:	55 1f       	adc	r21, r21
    1666:	62 9f       	mul	r22, r18
    1668:	f0 01       	movw	r30, r0
    166a:	72 9f       	mul	r23, r18
    166c:	bb 27       	eor	r27, r27
    166e:	f0 0d       	add	r31, r0
    1670:	b1 1d       	adc	r27, r1
    1672:	63 9f       	mul	r22, r19
    1674:	aa 27       	eor	r26, r26
    1676:	f0 0d       	add	r31, r0
    1678:	b1 1d       	adc	r27, r1
    167a:	aa 1f       	adc	r26, r26
    167c:	64 9f       	mul	r22, r20
    167e:	66 27       	eor	r22, r22
    1680:	b0 0d       	add	r27, r0
    1682:	a1 1d       	adc	r26, r1
    1684:	66 1f       	adc	r22, r22
    1686:	82 9f       	mul	r24, r18
    1688:	22 27       	eor	r18, r18
    168a:	b0 0d       	add	r27, r0
    168c:	a1 1d       	adc	r26, r1
    168e:	62 1f       	adc	r22, r18
    1690:	73 9f       	mul	r23, r19
    1692:	b0 0d       	add	r27, r0
    1694:	a1 1d       	adc	r26, r1
    1696:	62 1f       	adc	r22, r18
    1698:	83 9f       	mul	r24, r19
    169a:	a0 0d       	add	r26, r0
    169c:	61 1d       	adc	r22, r1
    169e:	22 1f       	adc	r18, r18
    16a0:	74 9f       	mul	r23, r20
    16a2:	33 27       	eor	r19, r19
    16a4:	a0 0d       	add	r26, r0
    16a6:	61 1d       	adc	r22, r1
    16a8:	23 1f       	adc	r18, r19
    16aa:	84 9f       	mul	r24, r20
    16ac:	60 0d       	add	r22, r0
    16ae:	21 1d       	adc	r18, r1
    16b0:	82 2f       	mov	r24, r18
    16b2:	76 2f       	mov	r23, r22
    16b4:	6a 2f       	mov	r22, r26
    16b6:	11 24       	eor	r1, r1
    16b8:	9f 57       	subi	r25, 0x7F	; 127
    16ba:	50 40       	sbci	r21, 0x00	; 0
    16bc:	8a f0       	brmi	.+34     	; 0x16e0 <__mulsf3_pse+0x84>
    16be:	e1 f0       	breq	.+56     	; 0x16f8 <__mulsf3_pse+0x9c>
    16c0:	88 23       	and	r24, r24
    16c2:	4a f0       	brmi	.+18     	; 0x16d6 <__mulsf3_pse+0x7a>
    16c4:	ee 0f       	add	r30, r30
    16c6:	ff 1f       	adc	r31, r31
    16c8:	bb 1f       	adc	r27, r27
    16ca:	66 1f       	adc	r22, r22
    16cc:	77 1f       	adc	r23, r23
    16ce:	88 1f       	adc	r24, r24
    16d0:	91 50       	subi	r25, 0x01	; 1
    16d2:	50 40       	sbci	r21, 0x00	; 0
    16d4:	a9 f7       	brne	.-22     	; 0x16c0 <__mulsf3_pse+0x64>
    16d6:	9e 3f       	cpi	r25, 0xFE	; 254
    16d8:	51 05       	cpc	r21, r1
    16da:	70 f0       	brcs	.+28     	; 0x16f8 <__mulsf3_pse+0x9c>
    16dc:	5c cf       	rjmp	.-328    	; 0x1596 <__fp_inf>
    16de:	a6 cf       	rjmp	.-180    	; 0x162c <__fp_szero>
    16e0:	5f 3f       	cpi	r21, 0xFF	; 255
    16e2:	ec f3       	brlt	.-6      	; 0x16de <__mulsf3_pse+0x82>
    16e4:	98 3e       	cpi	r25, 0xE8	; 232
    16e6:	dc f3       	brlt	.-10     	; 0x16de <__mulsf3_pse+0x82>
    16e8:	86 95       	lsr	r24
    16ea:	77 95       	ror	r23
    16ec:	67 95       	ror	r22
    16ee:	b7 95       	ror	r27
    16f0:	f7 95       	ror	r31
    16f2:	e7 95       	ror	r30
    16f4:	9f 5f       	subi	r25, 0xFF	; 255
    16f6:	c1 f7       	brne	.-16     	; 0x16e8 <__mulsf3_pse+0x8c>
    16f8:	fe 2b       	or	r31, r30
    16fa:	88 0f       	add	r24, r24
    16fc:	91 1d       	adc	r25, r1
    16fe:	96 95       	lsr	r25
    1700:	87 95       	ror	r24
    1702:	97 f9       	bld	r25, 7
    1704:	08 95       	ret

00001706 <__tablejump2__>:
    1706:	ee 0f       	add	r30, r30
    1708:	ff 1f       	adc	r31, r31
    170a:	00 24       	eor	r0, r0
    170c:	00 1c       	adc	r0, r0
    170e:	0b be       	out	0x3b, r0	; 59
    1710:	07 90       	elpm	r0, Z+
    1712:	f6 91       	elpm	r31, Z
    1714:	e0 2d       	mov	r30, r0
    1716:	09 94       	ijmp

00001718 <eeprom_read_byte>:
    1718:	f9 99       	sbic	0x1f, 1	; 31
    171a:	fe cf       	rjmp	.-4      	; 0x1718 <eeprom_read_byte>
    171c:	92 bd       	out	0x22, r25	; 34
    171e:	81 bd       	out	0x21, r24	; 33
    1720:	f8 9a       	sbi	0x1f, 0	; 31
    1722:	99 27       	eor	r25, r25
    1724:	80 b5       	in	r24, 0x20	; 32
    1726:	08 95       	ret

00001728 <eeprom_update_byte>:
    1728:	26 2f       	mov	r18, r22

0000172a <eeprom_update_r18>:
    172a:	f9 99       	sbic	0x1f, 1	; 31
    172c:	fe cf       	rjmp	.-4      	; 0x172a <eeprom_update_r18>
    172e:	92 bd       	out	0x22, r25	; 34
    1730:	81 bd       	out	0x21, r24	; 33
    1732:	f8 9a       	sbi	0x1f, 0	; 31
    1734:	01 97       	sbiw	r24, 0x01	; 1
    1736:	00 b4       	in	r0, 0x20	; 32
    1738:	02 16       	cp	r0, r18
    173a:	39 f0       	breq	.+14     	; 0x174a <eeprom_update_r18+0x20>
    173c:	1f ba       	out	0x1f, r1	; 31
    173e:	20 bd       	out	0x20, r18	; 32
    1740:	0f b6       	in	r0, 0x3f	; 63
    1742:	f8 94       	cli
    1744:	fa 9a       	sbi	0x1f, 2	; 31
    1746:	f9 9a       	sbi	0x1f, 1	; 31
    1748:	0f be       	out	0x3f, r0	; 63
    174a:	08 95       	ret

0000174c <_exit>:
    174c:	f8 94       	cli

0000174e <__stop_program>:
    174e:	ff cf       	rjmp	.-2      	; 0x174e <__stop_program>
